// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// OtelReadLogsReader is a Reader for the OtelReadLogs structure.
type OtelReadLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OtelReadLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOtelReadLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOtelReadLogsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOtelReadLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOtelReadLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOtelReadLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOtelReadLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/runners/{runner_id}/logs] OtelReadLogs", response, response.Code())
	}
}

// NewOtelReadLogsOK creates a OtelReadLogsOK with default headers values
func NewOtelReadLogsOK() *OtelReadLogsOK {
	return &OtelReadLogsOK{}
}

/*
OtelReadLogsOK describes a response with status code 200, with default header values.

OK
*/
type OtelReadLogsOK struct {
	Payload []*models.AppOtelLogRecord
}

// IsSuccess returns true when this otel read logs o k response has a 2xx status code
func (o *OtelReadLogsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this otel read logs o k response has a 3xx status code
func (o *OtelReadLogsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs o k response has a 4xx status code
func (o *OtelReadLogsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this otel read logs o k response has a 5xx status code
func (o *OtelReadLogsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this otel read logs o k response a status code equal to that given
func (o *OtelReadLogsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the otel read logs o k response
func (o *OtelReadLogsOK) Code() int {
	return 200
}

func (o *OtelReadLogsOK) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsOK  %+v", 200, o.Payload)
}

func (o *OtelReadLogsOK) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsOK  %+v", 200, o.Payload)
}

func (o *OtelReadLogsOK) GetPayload() []*models.AppOtelLogRecord {
	return o.Payload
}

func (o *OtelReadLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOtelReadLogsBadRequest creates a OtelReadLogsBadRequest with default headers values
func NewOtelReadLogsBadRequest() *OtelReadLogsBadRequest {
	return &OtelReadLogsBadRequest{}
}

/*
OtelReadLogsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type OtelReadLogsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this otel read logs bad request response has a 2xx status code
func (o *OtelReadLogsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this otel read logs bad request response has a 3xx status code
func (o *OtelReadLogsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs bad request response has a 4xx status code
func (o *OtelReadLogsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this otel read logs bad request response has a 5xx status code
func (o *OtelReadLogsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this otel read logs bad request response a status code equal to that given
func (o *OtelReadLogsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the otel read logs bad request response
func (o *OtelReadLogsBadRequest) Code() int {
	return 400
}

func (o *OtelReadLogsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsBadRequest  %+v", 400, o.Payload)
}

func (o *OtelReadLogsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsBadRequest  %+v", 400, o.Payload)
}

func (o *OtelReadLogsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *OtelReadLogsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOtelReadLogsUnauthorized creates a OtelReadLogsUnauthorized with default headers values
func NewOtelReadLogsUnauthorized() *OtelReadLogsUnauthorized {
	return &OtelReadLogsUnauthorized{}
}

/*
OtelReadLogsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type OtelReadLogsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this otel read logs unauthorized response has a 2xx status code
func (o *OtelReadLogsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this otel read logs unauthorized response has a 3xx status code
func (o *OtelReadLogsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs unauthorized response has a 4xx status code
func (o *OtelReadLogsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this otel read logs unauthorized response has a 5xx status code
func (o *OtelReadLogsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this otel read logs unauthorized response a status code equal to that given
func (o *OtelReadLogsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the otel read logs unauthorized response
func (o *OtelReadLogsUnauthorized) Code() int {
	return 401
}

func (o *OtelReadLogsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsUnauthorized  %+v", 401, o.Payload)
}

func (o *OtelReadLogsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsUnauthorized  %+v", 401, o.Payload)
}

func (o *OtelReadLogsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *OtelReadLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOtelReadLogsForbidden creates a OtelReadLogsForbidden with default headers values
func NewOtelReadLogsForbidden() *OtelReadLogsForbidden {
	return &OtelReadLogsForbidden{}
}

/*
OtelReadLogsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type OtelReadLogsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this otel read logs forbidden response has a 2xx status code
func (o *OtelReadLogsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this otel read logs forbidden response has a 3xx status code
func (o *OtelReadLogsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs forbidden response has a 4xx status code
func (o *OtelReadLogsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this otel read logs forbidden response has a 5xx status code
func (o *OtelReadLogsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this otel read logs forbidden response a status code equal to that given
func (o *OtelReadLogsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the otel read logs forbidden response
func (o *OtelReadLogsForbidden) Code() int {
	return 403
}

func (o *OtelReadLogsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsForbidden  %+v", 403, o.Payload)
}

func (o *OtelReadLogsForbidden) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsForbidden  %+v", 403, o.Payload)
}

func (o *OtelReadLogsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *OtelReadLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOtelReadLogsNotFound creates a OtelReadLogsNotFound with default headers values
func NewOtelReadLogsNotFound() *OtelReadLogsNotFound {
	return &OtelReadLogsNotFound{}
}

/*
OtelReadLogsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type OtelReadLogsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this otel read logs not found response has a 2xx status code
func (o *OtelReadLogsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this otel read logs not found response has a 3xx status code
func (o *OtelReadLogsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs not found response has a 4xx status code
func (o *OtelReadLogsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this otel read logs not found response has a 5xx status code
func (o *OtelReadLogsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this otel read logs not found response a status code equal to that given
func (o *OtelReadLogsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the otel read logs not found response
func (o *OtelReadLogsNotFound) Code() int {
	return 404
}

func (o *OtelReadLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsNotFound  %+v", 404, o.Payload)
}

func (o *OtelReadLogsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsNotFound  %+v", 404, o.Payload)
}

func (o *OtelReadLogsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *OtelReadLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOtelReadLogsInternalServerError creates a OtelReadLogsInternalServerError with default headers values
func NewOtelReadLogsInternalServerError() *OtelReadLogsInternalServerError {
	return &OtelReadLogsInternalServerError{}
}

/*
OtelReadLogsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type OtelReadLogsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this otel read logs internal server error response has a 2xx status code
func (o *OtelReadLogsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this otel read logs internal server error response has a 3xx status code
func (o *OtelReadLogsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this otel read logs internal server error response has a 4xx status code
func (o *OtelReadLogsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this otel read logs internal server error response has a 5xx status code
func (o *OtelReadLogsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this otel read logs internal server error response a status code equal to that given
func (o *OtelReadLogsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the otel read logs internal server error response
func (o *OtelReadLogsInternalServerError) Code() int {
	return 500
}

func (o *OtelReadLogsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *OtelReadLogsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/logs][%d] otelReadLogsInternalServerError  %+v", 500, o.Payload)
}

func (o *OtelReadLogsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *OtelReadLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
