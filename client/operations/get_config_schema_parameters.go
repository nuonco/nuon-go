// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetConfigSchemaParams creates a new GetConfigSchemaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetConfigSchemaParams() *GetConfigSchemaParams {
	return &GetConfigSchemaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetConfigSchemaParamsWithTimeout creates a new GetConfigSchemaParams object
// with the ability to set a timeout on a request.
func NewGetConfigSchemaParamsWithTimeout(timeout time.Duration) *GetConfigSchemaParams {
	return &GetConfigSchemaParams{
		timeout: timeout,
	}
}

// NewGetConfigSchemaParamsWithContext creates a new GetConfigSchemaParams object
// with the ability to set a context for a request.
func NewGetConfigSchemaParamsWithContext(ctx context.Context) *GetConfigSchemaParams {
	return &GetConfigSchemaParams{
		Context: ctx,
	}
}

// NewGetConfigSchemaParamsWithHTTPClient creates a new GetConfigSchemaParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetConfigSchemaParamsWithHTTPClient(client *http.Client) *GetConfigSchemaParams {
	return &GetConfigSchemaParams{
		HTTPClient: client,
	}
}

/*
GetConfigSchemaParams contains all the parameters to send to the API endpoint

	for the get config schema operation.

	Typically these are written to a http.Request.
*/
type GetConfigSchemaParams struct {

	/* Type.

	   return a schema for a source file
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get config schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConfigSchemaParams) WithDefaults() *GetConfigSchemaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get config schema params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetConfigSchemaParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get config schema params
func (o *GetConfigSchemaParams) WithTimeout(timeout time.Duration) *GetConfigSchemaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get config schema params
func (o *GetConfigSchemaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get config schema params
func (o *GetConfigSchemaParams) WithContext(ctx context.Context) *GetConfigSchemaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get config schema params
func (o *GetConfigSchemaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get config schema params
func (o *GetConfigSchemaParams) WithHTTPClient(client *http.Client) *GetConfigSchemaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get config schema params
func (o *GetConfigSchemaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithType adds the typeVar to the get config schema params
func (o *GetConfigSchemaParams) WithType(typeVar *string) *GetConfigSchemaParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get config schema params
func (o *GetConfigSchemaParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetConfigSchemaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
