// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// AddUserReader is a Reader for the AddUser structure.
type AddUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/orgs/current/user] AddUser", response, response.Code())
	}
}

// NewAddUserCreated creates a AddUserCreated with default headers values
func NewAddUserCreated() *AddUserCreated {
	return &AddUserCreated{}
}

/*
AddUserCreated describes a response with status code 201, with default header values.

Created
*/
type AddUserCreated struct {
	Payload *models.AppUserOrg
}

// IsSuccess returns true when this add user created response has a 2xx status code
func (o *AddUserCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add user created response has a 3xx status code
func (o *AddUserCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user created response has a 4xx status code
func (o *AddUserCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user created response has a 5xx status code
func (o *AddUserCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add user created response a status code equal to that given
func (o *AddUserCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add user created response
func (o *AddUserCreated) Code() int {
	return 201
}

func (o *AddUserCreated) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserCreated  %+v", 201, o.Payload)
}

func (o *AddUserCreated) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserCreated  %+v", 201, o.Payload)
}

func (o *AddUserCreated) GetPayload() *models.AppUserOrg {
	return o.Payload
}

func (o *AddUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppUserOrg)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserBadRequest creates a AddUserBadRequest with default headers values
func NewAddUserBadRequest() *AddUserBadRequest {
	return &AddUserBadRequest{}
}

/*
AddUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddUserBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this add user bad request response has a 2xx status code
func (o *AddUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user bad request response has a 3xx status code
func (o *AddUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user bad request response has a 4xx status code
func (o *AddUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user bad request response has a 5xx status code
func (o *AddUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add user bad request response a status code equal to that given
func (o *AddUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add user bad request response
func (o *AddUserBadRequest) Code() int {
	return 400
}

func (o *AddUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *AddUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserUnauthorized creates a AddUserUnauthorized with default headers values
func NewAddUserUnauthorized() *AddUserUnauthorized {
	return &AddUserUnauthorized{}
}

/*
AddUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddUserUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this add user unauthorized response has a 2xx status code
func (o *AddUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user unauthorized response has a 3xx status code
func (o *AddUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user unauthorized response has a 4xx status code
func (o *AddUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user unauthorized response has a 5xx status code
func (o *AddUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add user unauthorized response a status code equal to that given
func (o *AddUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add user unauthorized response
func (o *AddUserUnauthorized) Code() int {
	return 401
}

func (o *AddUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *AddUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserForbidden creates a AddUserForbidden with default headers values
func NewAddUserForbidden() *AddUserForbidden {
	return &AddUserForbidden{}
}

/*
AddUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddUserForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this add user forbidden response has a 2xx status code
func (o *AddUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user forbidden response has a 3xx status code
func (o *AddUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user forbidden response has a 4xx status code
func (o *AddUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user forbidden response has a 5xx status code
func (o *AddUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add user forbidden response a status code equal to that given
func (o *AddUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add user forbidden response
func (o *AddUserForbidden) Code() int {
	return 403
}

func (o *AddUserForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserForbidden  %+v", 403, o.Payload)
}

func (o *AddUserForbidden) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserForbidden  %+v", 403, o.Payload)
}

func (o *AddUserForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *AddUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserNotFound creates a AddUserNotFound with default headers values
func NewAddUserNotFound() *AddUserNotFound {
	return &AddUserNotFound{}
}

/*
AddUserNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddUserNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this add user not found response has a 2xx status code
func (o *AddUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user not found response has a 3xx status code
func (o *AddUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user not found response has a 4xx status code
func (o *AddUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user not found response has a 5xx status code
func (o *AddUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add user not found response a status code equal to that given
func (o *AddUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add user not found response
func (o *AddUserNotFound) Code() int {
	return 404
}

func (o *AddUserNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserNotFound  %+v", 404, o.Payload)
}

func (o *AddUserNotFound) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserNotFound  %+v", 404, o.Payload)
}

func (o *AddUserNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *AddUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserInternalServerError creates a AddUserInternalServerError with default headers values
func NewAddUserInternalServerError() *AddUserInternalServerError {
	return &AddUserInternalServerError{}
}

/*
AddUserInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AddUserInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this add user internal server error response has a 2xx status code
func (o *AddUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user internal server error response has a 3xx status code
func (o *AddUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user internal server error response has a 4xx status code
func (o *AddUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user internal server error response has a 5xx status code
func (o *AddUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add user internal server error response a status code equal to that given
func (o *AddUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add user internal server error response
func (o *AddUserInternalServerError) Code() int {
	return 500
}

func (o *AddUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserInternalServerError  %+v", 500, o.Payload)
}

func (o *AddUserInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/user][%d] addUserInternalServerError  %+v", 500, o.Payload)
}

func (o *AddUserInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *AddUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
