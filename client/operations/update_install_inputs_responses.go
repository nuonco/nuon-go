// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateInstallInputsReader is a Reader for the UpdateInstallInputs structure.
type UpdateInstallInputsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstallInputsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInstallInputsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInstallInputsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInstallInputsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInstallInputsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInstallInputsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInstallInputsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/installs/{install_id}/inputs] UpdateInstallInputs", response, response.Code())
	}
}

// NewUpdateInstallInputsOK creates a UpdateInstallInputsOK with default headers values
func NewUpdateInstallInputsOK() *UpdateInstallInputsOK {
	return &UpdateInstallInputsOK{}
}

/*
UpdateInstallInputsOK describes a response with status code 200, with default header values.

OK
*/
type UpdateInstallInputsOK struct {
	Payload *models.AppInstallInputs
}

// IsSuccess returns true when this update install inputs o k response has a 2xx status code
func (o *UpdateInstallInputsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update install inputs o k response has a 3xx status code
func (o *UpdateInstallInputsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs o k response has a 4xx status code
func (o *UpdateInstallInputsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install inputs o k response has a 5xx status code
func (o *UpdateInstallInputsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update install inputs o k response a status code equal to that given
func (o *UpdateInstallInputsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update install inputs o k response
func (o *UpdateInstallInputsOK) Code() int {
	return 200
}

func (o *UpdateInstallInputsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsOK %s", 200, payload)
}

func (o *UpdateInstallInputsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsOK %s", 200, payload)
}

func (o *UpdateInstallInputsOK) GetPayload() *models.AppInstallInputs {
	return o.Payload
}

func (o *UpdateInstallInputsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstallInputs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInputsBadRequest creates a UpdateInstallInputsBadRequest with default headers values
func NewUpdateInstallInputsBadRequest() *UpdateInstallInputsBadRequest {
	return &UpdateInstallInputsBadRequest{}
}

/*
UpdateInstallInputsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateInstallInputsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install inputs bad request response has a 2xx status code
func (o *UpdateInstallInputsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install inputs bad request response has a 3xx status code
func (o *UpdateInstallInputsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs bad request response has a 4xx status code
func (o *UpdateInstallInputsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install inputs bad request response has a 5xx status code
func (o *UpdateInstallInputsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update install inputs bad request response a status code equal to that given
func (o *UpdateInstallInputsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update install inputs bad request response
func (o *UpdateInstallInputsBadRequest) Code() int {
	return 400
}

func (o *UpdateInstallInputsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsBadRequest %s", 400, payload)
}

func (o *UpdateInstallInputsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsBadRequest %s", 400, payload)
}

func (o *UpdateInstallInputsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInputsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInputsUnauthorized creates a UpdateInstallInputsUnauthorized with default headers values
func NewUpdateInstallInputsUnauthorized() *UpdateInstallInputsUnauthorized {
	return &UpdateInstallInputsUnauthorized{}
}

/*
UpdateInstallInputsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateInstallInputsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install inputs unauthorized response has a 2xx status code
func (o *UpdateInstallInputsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install inputs unauthorized response has a 3xx status code
func (o *UpdateInstallInputsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs unauthorized response has a 4xx status code
func (o *UpdateInstallInputsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install inputs unauthorized response has a 5xx status code
func (o *UpdateInstallInputsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update install inputs unauthorized response a status code equal to that given
func (o *UpdateInstallInputsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update install inputs unauthorized response
func (o *UpdateInstallInputsUnauthorized) Code() int {
	return 401
}

func (o *UpdateInstallInputsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsUnauthorized %s", 401, payload)
}

func (o *UpdateInstallInputsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsUnauthorized %s", 401, payload)
}

func (o *UpdateInstallInputsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInputsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInputsForbidden creates a UpdateInstallInputsForbidden with default headers values
func NewUpdateInstallInputsForbidden() *UpdateInstallInputsForbidden {
	return &UpdateInstallInputsForbidden{}
}

/*
UpdateInstallInputsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateInstallInputsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install inputs forbidden response has a 2xx status code
func (o *UpdateInstallInputsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install inputs forbidden response has a 3xx status code
func (o *UpdateInstallInputsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs forbidden response has a 4xx status code
func (o *UpdateInstallInputsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install inputs forbidden response has a 5xx status code
func (o *UpdateInstallInputsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update install inputs forbidden response a status code equal to that given
func (o *UpdateInstallInputsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update install inputs forbidden response
func (o *UpdateInstallInputsForbidden) Code() int {
	return 403
}

func (o *UpdateInstallInputsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsForbidden %s", 403, payload)
}

func (o *UpdateInstallInputsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsForbidden %s", 403, payload)
}

func (o *UpdateInstallInputsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInputsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInputsNotFound creates a UpdateInstallInputsNotFound with default headers values
func NewUpdateInstallInputsNotFound() *UpdateInstallInputsNotFound {
	return &UpdateInstallInputsNotFound{}
}

/*
UpdateInstallInputsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateInstallInputsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install inputs not found response has a 2xx status code
func (o *UpdateInstallInputsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install inputs not found response has a 3xx status code
func (o *UpdateInstallInputsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs not found response has a 4xx status code
func (o *UpdateInstallInputsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install inputs not found response has a 5xx status code
func (o *UpdateInstallInputsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update install inputs not found response a status code equal to that given
func (o *UpdateInstallInputsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update install inputs not found response
func (o *UpdateInstallInputsNotFound) Code() int {
	return 404
}

func (o *UpdateInstallInputsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsNotFound %s", 404, payload)
}

func (o *UpdateInstallInputsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsNotFound %s", 404, payload)
}

func (o *UpdateInstallInputsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInputsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInputsInternalServerError creates a UpdateInstallInputsInternalServerError with default headers values
func NewUpdateInstallInputsInternalServerError() *UpdateInstallInputsInternalServerError {
	return &UpdateInstallInputsInternalServerError{}
}

/*
UpdateInstallInputsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateInstallInputsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install inputs internal server error response has a 2xx status code
func (o *UpdateInstallInputsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install inputs internal server error response has a 3xx status code
func (o *UpdateInstallInputsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install inputs internal server error response has a 4xx status code
func (o *UpdateInstallInputsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install inputs internal server error response has a 5xx status code
func (o *UpdateInstallInputsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update install inputs internal server error response a status code equal to that given
func (o *UpdateInstallInputsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update install inputs internal server error response
func (o *UpdateInstallInputsInternalServerError) Code() int {
	return 500
}

func (o *UpdateInstallInputsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsInternalServerError %s", 500, payload)
}

func (o *UpdateInstallInputsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/inputs][%d] updateInstallInputsInternalServerError %s", 500, payload)
}

func (o *UpdateInstallInputsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInputsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
