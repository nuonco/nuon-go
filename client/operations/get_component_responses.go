// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetComponentReader is a Reader for the GetComponent structure.
type GetComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetComponentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/components/{component_id}] GetComponent", response, response.Code())
	}
}

// NewGetComponentOK creates a GetComponentOK with default headers values
func NewGetComponentOK() *GetComponentOK {
	return &GetComponentOK{}
}

/*
GetComponentOK describes a response with status code 200, with default header values.

OK
*/
type GetComponentOK struct {
	Payload *models.AppComponent
}

// IsSuccess returns true when this get component o k response has a 2xx status code
func (o *GetComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get component o k response has a 3xx status code
func (o *GetComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component o k response has a 4xx status code
func (o *GetComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component o k response has a 5xx status code
func (o *GetComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get component o k response a status code equal to that given
func (o *GetComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get component o k response
func (o *GetComponentOK) Code() int {
	return 200
}

func (o *GetComponentOK) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentOK  %+v", 200, o.Payload)
}

func (o *GetComponentOK) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentOK  %+v", 200, o.Payload)
}

func (o *GetComponentOK) GetPayload() *models.AppComponent {
	return o.Payload
}

func (o *GetComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentBadRequest creates a GetComponentBadRequest with default headers values
func NewGetComponentBadRequest() *GetComponentBadRequest {
	return &GetComponentBadRequest{}
}

/*
GetComponentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetComponentBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component bad request response has a 2xx status code
func (o *GetComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component bad request response has a 3xx status code
func (o *GetComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component bad request response has a 4xx status code
func (o *GetComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component bad request response has a 5xx status code
func (o *GetComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get component bad request response a status code equal to that given
func (o *GetComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get component bad request response
func (o *GetComponentBadRequest) Code() int {
	return 400
}

func (o *GetComponentBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentBadRequest  %+v", 400, o.Payload)
}

func (o *GetComponentBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentBadRequest  %+v", 400, o.Payload)
}

func (o *GetComponentBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentUnauthorized creates a GetComponentUnauthorized with default headers values
func NewGetComponentUnauthorized() *GetComponentUnauthorized {
	return &GetComponentUnauthorized{}
}

/*
GetComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetComponentUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component unauthorized response has a 2xx status code
func (o *GetComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component unauthorized response has a 3xx status code
func (o *GetComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component unauthorized response has a 4xx status code
func (o *GetComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component unauthorized response has a 5xx status code
func (o *GetComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get component unauthorized response a status code equal to that given
func (o *GetComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get component unauthorized response
func (o *GetComponentUnauthorized) Code() int {
	return 401
}

func (o *GetComponentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetComponentUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetComponentUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentForbidden creates a GetComponentForbidden with default headers values
func NewGetComponentForbidden() *GetComponentForbidden {
	return &GetComponentForbidden{}
}

/*
GetComponentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetComponentForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component forbidden response has a 2xx status code
func (o *GetComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component forbidden response has a 3xx status code
func (o *GetComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component forbidden response has a 4xx status code
func (o *GetComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component forbidden response has a 5xx status code
func (o *GetComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get component forbidden response a status code equal to that given
func (o *GetComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get component forbidden response
func (o *GetComponentForbidden) Code() int {
	return 403
}

func (o *GetComponentForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentForbidden  %+v", 403, o.Payload)
}

func (o *GetComponentForbidden) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentForbidden  %+v", 403, o.Payload)
}

func (o *GetComponentForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentNotFound creates a GetComponentNotFound with default headers values
func NewGetComponentNotFound() *GetComponentNotFound {
	return &GetComponentNotFound{}
}

/*
GetComponentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetComponentNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component not found response has a 2xx status code
func (o *GetComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component not found response has a 3xx status code
func (o *GetComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component not found response has a 4xx status code
func (o *GetComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component not found response has a 5xx status code
func (o *GetComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get component not found response a status code equal to that given
func (o *GetComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get component not found response
func (o *GetComponentNotFound) Code() int {
	return 404
}

func (o *GetComponentNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentNotFound  %+v", 404, o.Payload)
}

func (o *GetComponentNotFound) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentNotFound  %+v", 404, o.Payload)
}

func (o *GetComponentNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentInternalServerError creates a GetComponentInternalServerError with default headers values
func NewGetComponentInternalServerError() *GetComponentInternalServerError {
	return &GetComponentInternalServerError{}
}

/*
GetComponentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetComponentInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component internal server error response has a 2xx status code
func (o *GetComponentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component internal server error response has a 3xx status code
func (o *GetComponentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component internal server error response has a 4xx status code
func (o *GetComponentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component internal server error response has a 5xx status code
func (o *GetComponentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get component internal server error response a status code equal to that given
func (o *GetComponentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get component internal server error response
func (o *GetComponentInternalServerError) Code() int {
	return 500
}

func (o *GetComponentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetComponentInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/components/{component_id}][%d] getComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetComponentInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
