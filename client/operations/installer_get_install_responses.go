// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// InstallerGetInstallReader is a Reader for the InstallerGetInstall structure.
type InstallerGetInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallerGetInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInstallerGetInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInstallerGetInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInstallerGetInstallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInstallerGetInstallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInstallerGetInstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInstallerGetInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/installer/{installer_slug}/install/{install_id}] InstallerGetInstall", response, response.Code())
	}
}

// NewInstallerGetInstallOK creates a InstallerGetInstallOK with default headers values
func NewInstallerGetInstallOK() *InstallerGetInstallOK {
	return &InstallerGetInstallOK{}
}

/*
InstallerGetInstallOK describes a response with status code 200, with default header values.

OK
*/
type InstallerGetInstallOK struct {
	Payload *models.AppInstall
}

// IsSuccess returns true when this installer get install o k response has a 2xx status code
func (o *InstallerGetInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this installer get install o k response has a 3xx status code
func (o *InstallerGetInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install o k response has a 4xx status code
func (o *InstallerGetInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this installer get install o k response has a 5xx status code
func (o *InstallerGetInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this installer get install o k response a status code equal to that given
func (o *InstallerGetInstallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the installer get install o k response
func (o *InstallerGetInstallOK) Code() int {
	return 200
}

func (o *InstallerGetInstallOK) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallOK  %+v", 200, o.Payload)
}

func (o *InstallerGetInstallOK) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallOK  %+v", 200, o.Payload)
}

func (o *InstallerGetInstallOK) GetPayload() *models.AppInstall {
	return o.Payload
}

func (o *InstallerGetInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstall)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallerGetInstallBadRequest creates a InstallerGetInstallBadRequest with default headers values
func NewInstallerGetInstallBadRequest() *InstallerGetInstallBadRequest {
	return &InstallerGetInstallBadRequest{}
}

/*
InstallerGetInstallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InstallerGetInstallBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this installer get install bad request response has a 2xx status code
func (o *InstallerGetInstallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this installer get install bad request response has a 3xx status code
func (o *InstallerGetInstallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install bad request response has a 4xx status code
func (o *InstallerGetInstallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this installer get install bad request response has a 5xx status code
func (o *InstallerGetInstallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this installer get install bad request response a status code equal to that given
func (o *InstallerGetInstallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the installer get install bad request response
func (o *InstallerGetInstallBadRequest) Code() int {
	return 400
}

func (o *InstallerGetInstallBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallBadRequest  %+v", 400, o.Payload)
}

func (o *InstallerGetInstallBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallBadRequest  %+v", 400, o.Payload)
}

func (o *InstallerGetInstallBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *InstallerGetInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallerGetInstallUnauthorized creates a InstallerGetInstallUnauthorized with default headers values
func NewInstallerGetInstallUnauthorized() *InstallerGetInstallUnauthorized {
	return &InstallerGetInstallUnauthorized{}
}

/*
InstallerGetInstallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InstallerGetInstallUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this installer get install unauthorized response has a 2xx status code
func (o *InstallerGetInstallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this installer get install unauthorized response has a 3xx status code
func (o *InstallerGetInstallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install unauthorized response has a 4xx status code
func (o *InstallerGetInstallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this installer get install unauthorized response has a 5xx status code
func (o *InstallerGetInstallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this installer get install unauthorized response a status code equal to that given
func (o *InstallerGetInstallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the installer get install unauthorized response
func (o *InstallerGetInstallUnauthorized) Code() int {
	return 401
}

func (o *InstallerGetInstallUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *InstallerGetInstallUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *InstallerGetInstallUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *InstallerGetInstallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallerGetInstallForbidden creates a InstallerGetInstallForbidden with default headers values
func NewInstallerGetInstallForbidden() *InstallerGetInstallForbidden {
	return &InstallerGetInstallForbidden{}
}

/*
InstallerGetInstallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InstallerGetInstallForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this installer get install forbidden response has a 2xx status code
func (o *InstallerGetInstallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this installer get install forbidden response has a 3xx status code
func (o *InstallerGetInstallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install forbidden response has a 4xx status code
func (o *InstallerGetInstallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this installer get install forbidden response has a 5xx status code
func (o *InstallerGetInstallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this installer get install forbidden response a status code equal to that given
func (o *InstallerGetInstallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the installer get install forbidden response
func (o *InstallerGetInstallForbidden) Code() int {
	return 403
}

func (o *InstallerGetInstallForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallForbidden  %+v", 403, o.Payload)
}

func (o *InstallerGetInstallForbidden) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallForbidden  %+v", 403, o.Payload)
}

func (o *InstallerGetInstallForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *InstallerGetInstallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallerGetInstallNotFound creates a InstallerGetInstallNotFound with default headers values
func NewInstallerGetInstallNotFound() *InstallerGetInstallNotFound {
	return &InstallerGetInstallNotFound{}
}

/*
InstallerGetInstallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InstallerGetInstallNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this installer get install not found response has a 2xx status code
func (o *InstallerGetInstallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this installer get install not found response has a 3xx status code
func (o *InstallerGetInstallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install not found response has a 4xx status code
func (o *InstallerGetInstallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this installer get install not found response has a 5xx status code
func (o *InstallerGetInstallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this installer get install not found response a status code equal to that given
func (o *InstallerGetInstallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the installer get install not found response
func (o *InstallerGetInstallNotFound) Code() int {
	return 404
}

func (o *InstallerGetInstallNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallNotFound  %+v", 404, o.Payload)
}

func (o *InstallerGetInstallNotFound) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallNotFound  %+v", 404, o.Payload)
}

func (o *InstallerGetInstallNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *InstallerGetInstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallerGetInstallInternalServerError creates a InstallerGetInstallInternalServerError with default headers values
func NewInstallerGetInstallInternalServerError() *InstallerGetInstallInternalServerError {
	return &InstallerGetInstallInternalServerError{}
}

/*
InstallerGetInstallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type InstallerGetInstallInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this installer get install internal server error response has a 2xx status code
func (o *InstallerGetInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this installer get install internal server error response has a 3xx status code
func (o *InstallerGetInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this installer get install internal server error response has a 4xx status code
func (o *InstallerGetInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this installer get install internal server error response has a 5xx status code
func (o *InstallerGetInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this installer get install internal server error response a status code equal to that given
func (o *InstallerGetInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the installer get install internal server error response
func (o *InstallerGetInstallInternalServerError) Code() int {
	return 500
}

func (o *InstallerGetInstallInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *InstallerGetInstallInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_slug}/install/{install_id}][%d] installerGetInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *InstallerGetInstallInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *InstallerGetInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
