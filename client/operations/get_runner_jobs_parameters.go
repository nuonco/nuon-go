// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRunnerJobsParams creates a new GetRunnerJobsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRunnerJobsParams() *GetRunnerJobsParams {
	return &GetRunnerJobsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunnerJobsParamsWithTimeout creates a new GetRunnerJobsParams object
// with the ability to set a timeout on a request.
func NewGetRunnerJobsParamsWithTimeout(timeout time.Duration) *GetRunnerJobsParams {
	return &GetRunnerJobsParams{
		timeout: timeout,
	}
}

// NewGetRunnerJobsParamsWithContext creates a new GetRunnerJobsParams object
// with the ability to set a context for a request.
func NewGetRunnerJobsParamsWithContext(ctx context.Context) *GetRunnerJobsParams {
	return &GetRunnerJobsParams{
		Context: ctx,
	}
}

// NewGetRunnerJobsParamsWithHTTPClient creates a new GetRunnerJobsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRunnerJobsParamsWithHTTPClient(client *http.Client) *GetRunnerJobsParams {
	return &GetRunnerJobsParams{
		HTTPClient: client,
	}
}

/*
GetRunnerJobsParams contains all the parameters to send to the API endpoint

	for the get runner jobs operation.

	Typically these are written to a http.Request.
*/
type GetRunnerJobsParams struct {

	/* Group.

	   job group

	   Default: "\"any\""
	*/
	Group *string

	/* Limit.

	   limit of jobs to return

	   Default: 10
	*/
	Limit *int64

	/* RunnerID.

	   runner ID
	*/
	RunnerID string

	/* Status.

	   job status

	   Default: "\"available\""
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get runner jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunnerJobsParams) WithDefaults() *GetRunnerJobsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get runner jobs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunnerJobsParams) SetDefaults() {
	var (
		groupDefault = string("\"any\"")

		limitDefault = int64(10)

		statusDefault = string("\"available\"")
	)

	val := GetRunnerJobsParams{
		Group:  &groupDefault,
		Limit:  &limitDefault,
		Status: &statusDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get runner jobs params
func (o *GetRunnerJobsParams) WithTimeout(timeout time.Duration) *GetRunnerJobsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runner jobs params
func (o *GetRunnerJobsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runner jobs params
func (o *GetRunnerJobsParams) WithContext(ctx context.Context) *GetRunnerJobsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runner jobs params
func (o *GetRunnerJobsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runner jobs params
func (o *GetRunnerJobsParams) WithHTTPClient(client *http.Client) *GetRunnerJobsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runner jobs params
func (o *GetRunnerJobsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the get runner jobs params
func (o *GetRunnerJobsParams) WithGroup(group *string) *GetRunnerJobsParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get runner jobs params
func (o *GetRunnerJobsParams) SetGroup(group *string) {
	o.Group = group
}

// WithLimit adds the limit to the get runner jobs params
func (o *GetRunnerJobsParams) WithLimit(limit *int64) *GetRunnerJobsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get runner jobs params
func (o *GetRunnerJobsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithRunnerID adds the runnerID to the get runner jobs params
func (o *GetRunnerJobsParams) WithRunnerID(runnerID string) *GetRunnerJobsParams {
	o.SetRunnerID(runnerID)
	return o
}

// SetRunnerID adds the runnerId to the get runner jobs params
func (o *GetRunnerJobsParams) SetRunnerID(runnerID string) {
	o.RunnerID = runnerID
}

// WithStatus adds the status to the get runner jobs params
func (o *GetRunnerJobsParams) WithStatus(status *string) *GetRunnerJobsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get runner jobs params
func (o *GetRunnerJobsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunnerJobsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Group != nil {

		// query param group
		var qrGroup string

		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {

			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param runner_id
	if err := r.SetPathParam("runner_id", o.RunnerID); err != nil {
		return err
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
