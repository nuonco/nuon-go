// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// DeleteVCSConnectionReader is a Reader for the DeleteVCSConnection structure.
type DeleteVCSConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteVCSConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteVCSConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteVCSConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteVCSConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteVCSConnectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteVCSConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteVCSConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/vcs/connections/{connection_id}] DeleteVCSConnection", response, response.Code())
	}
}

// NewDeleteVCSConnectionNoContent creates a DeleteVCSConnectionNoContent with default headers values
func NewDeleteVCSConnectionNoContent() *DeleteVCSConnectionNoContent {
	return &DeleteVCSConnectionNoContent{}
}

/*
DeleteVCSConnectionNoContent describes a response with status code 204, with default header values.

No Content
*/
type DeleteVCSConnectionNoContent struct {
}

// IsSuccess returns true when this delete v c s connection no content response has a 2xx status code
func (o *DeleteVCSConnectionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete v c s connection no content response has a 3xx status code
func (o *DeleteVCSConnectionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection no content response has a 4xx status code
func (o *DeleteVCSConnectionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v c s connection no content response has a 5xx status code
func (o *DeleteVCSConnectionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v c s connection no content response a status code equal to that given
func (o *DeleteVCSConnectionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete v c s connection no content response
func (o *DeleteVCSConnectionNoContent) Code() int {
	return 204
}

func (o *DeleteVCSConnectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionNoContent ", 204)
}

func (o *DeleteVCSConnectionNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionNoContent ", 204)
}

func (o *DeleteVCSConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteVCSConnectionBadRequest creates a DeleteVCSConnectionBadRequest with default headers values
func NewDeleteVCSConnectionBadRequest() *DeleteVCSConnectionBadRequest {
	return &DeleteVCSConnectionBadRequest{}
}

/*
DeleteVCSConnectionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteVCSConnectionBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v c s connection bad request response has a 2xx status code
func (o *DeleteVCSConnectionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v c s connection bad request response has a 3xx status code
func (o *DeleteVCSConnectionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection bad request response has a 4xx status code
func (o *DeleteVCSConnectionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v c s connection bad request response has a 5xx status code
func (o *DeleteVCSConnectionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v c s connection bad request response a status code equal to that given
func (o *DeleteVCSConnectionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete v c s connection bad request response
func (o *DeleteVCSConnectionBadRequest) Code() int {
	return 400
}

func (o *DeleteVCSConnectionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVCSConnectionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteVCSConnectionBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteVCSConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVCSConnectionUnauthorized creates a DeleteVCSConnectionUnauthorized with default headers values
func NewDeleteVCSConnectionUnauthorized() *DeleteVCSConnectionUnauthorized {
	return &DeleteVCSConnectionUnauthorized{}
}

/*
DeleteVCSConnectionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteVCSConnectionUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v c s connection unauthorized response has a 2xx status code
func (o *DeleteVCSConnectionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v c s connection unauthorized response has a 3xx status code
func (o *DeleteVCSConnectionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection unauthorized response has a 4xx status code
func (o *DeleteVCSConnectionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v c s connection unauthorized response has a 5xx status code
func (o *DeleteVCSConnectionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v c s connection unauthorized response a status code equal to that given
func (o *DeleteVCSConnectionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete v c s connection unauthorized response
func (o *DeleteVCSConnectionUnauthorized) Code() int {
	return 401
}

func (o *DeleteVCSConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteVCSConnectionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteVCSConnectionUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteVCSConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVCSConnectionForbidden creates a DeleteVCSConnectionForbidden with default headers values
func NewDeleteVCSConnectionForbidden() *DeleteVCSConnectionForbidden {
	return &DeleteVCSConnectionForbidden{}
}

/*
DeleteVCSConnectionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteVCSConnectionForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v c s connection forbidden response has a 2xx status code
func (o *DeleteVCSConnectionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v c s connection forbidden response has a 3xx status code
func (o *DeleteVCSConnectionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection forbidden response has a 4xx status code
func (o *DeleteVCSConnectionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v c s connection forbidden response has a 5xx status code
func (o *DeleteVCSConnectionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v c s connection forbidden response a status code equal to that given
func (o *DeleteVCSConnectionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete v c s connection forbidden response
func (o *DeleteVCSConnectionForbidden) Code() int {
	return 403
}

func (o *DeleteVCSConnectionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVCSConnectionForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteVCSConnectionForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteVCSConnectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVCSConnectionNotFound creates a DeleteVCSConnectionNotFound with default headers values
func NewDeleteVCSConnectionNotFound() *DeleteVCSConnectionNotFound {
	return &DeleteVCSConnectionNotFound{}
}

/*
DeleteVCSConnectionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteVCSConnectionNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v c s connection not found response has a 2xx status code
func (o *DeleteVCSConnectionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v c s connection not found response has a 3xx status code
func (o *DeleteVCSConnectionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection not found response has a 4xx status code
func (o *DeleteVCSConnectionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v c s connection not found response has a 5xx status code
func (o *DeleteVCSConnectionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v c s connection not found response a status code equal to that given
func (o *DeleteVCSConnectionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete v c s connection not found response
func (o *DeleteVCSConnectionNotFound) Code() int {
	return 404
}

func (o *DeleteVCSConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVCSConnectionNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteVCSConnectionNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteVCSConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteVCSConnectionInternalServerError creates a DeleteVCSConnectionInternalServerError with default headers values
func NewDeleteVCSConnectionInternalServerError() *DeleteVCSConnectionInternalServerError {
	return &DeleteVCSConnectionInternalServerError{}
}

/*
DeleteVCSConnectionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteVCSConnectionInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v c s connection internal server error response has a 2xx status code
func (o *DeleteVCSConnectionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v c s connection internal server error response has a 3xx status code
func (o *DeleteVCSConnectionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v c s connection internal server error response has a 4xx status code
func (o *DeleteVCSConnectionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v c s connection internal server error response has a 5xx status code
func (o *DeleteVCSConnectionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete v c s connection internal server error response a status code equal to that given
func (o *DeleteVCSConnectionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete v c s connection internal server error response
func (o *DeleteVCSConnectionInternalServerError) Code() int {
	return 500
}

func (o *DeleteVCSConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteVCSConnectionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/vcs/connections/{connection_id}][%d] deleteVCSConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteVCSConnectionInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteVCSConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
