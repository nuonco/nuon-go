// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// CancelWorkflowReader is a Reader for the CancelWorkflow structure.
type CancelWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCancelWorkflowAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/workflows/{workflow_id}/cancel] CancelWorkflow", response, response.Code())
	}
}

// NewCancelWorkflowAccepted creates a CancelWorkflowAccepted with default headers values
func NewCancelWorkflowAccepted() *CancelWorkflowAccepted {
	return &CancelWorkflowAccepted{}
}

/*
CancelWorkflowAccepted describes a response with status code 202, with default header values.

Accepted
*/
type CancelWorkflowAccepted struct {
	Payload bool
}

// IsSuccess returns true when this cancel workflow accepted response has a 2xx status code
func (o *CancelWorkflowAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel workflow accepted response has a 3xx status code
func (o *CancelWorkflowAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow accepted response has a 4xx status code
func (o *CancelWorkflowAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel workflow accepted response has a 5xx status code
func (o *CancelWorkflowAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel workflow accepted response a status code equal to that given
func (o *CancelWorkflowAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the cancel workflow accepted response
func (o *CancelWorkflowAccepted) Code() int {
	return 202
}

func (o *CancelWorkflowAccepted) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowAccepted  %+v", 202, o.Payload)
}

func (o *CancelWorkflowAccepted) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowAccepted  %+v", 202, o.Payload)
}

func (o *CancelWorkflowAccepted) GetPayload() bool {
	return o.Payload
}

func (o *CancelWorkflowAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelWorkflowBadRequest creates a CancelWorkflowBadRequest with default headers values
func NewCancelWorkflowBadRequest() *CancelWorkflowBadRequest {
	return &CancelWorkflowBadRequest{}
}

/*
CancelWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelWorkflowBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel workflow bad request response has a 2xx status code
func (o *CancelWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel workflow bad request response has a 3xx status code
func (o *CancelWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow bad request response has a 4xx status code
func (o *CancelWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel workflow bad request response has a 5xx status code
func (o *CancelWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel workflow bad request response a status code equal to that given
func (o *CancelWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel workflow bad request response
func (o *CancelWorkflowBadRequest) Code() int {
	return 400
}

func (o *CancelWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *CancelWorkflowBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *CancelWorkflowBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelWorkflowUnauthorized creates a CancelWorkflowUnauthorized with default headers values
func NewCancelWorkflowUnauthorized() *CancelWorkflowUnauthorized {
	return &CancelWorkflowUnauthorized{}
}

/*
CancelWorkflowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelWorkflowUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel workflow unauthorized response has a 2xx status code
func (o *CancelWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel workflow unauthorized response has a 3xx status code
func (o *CancelWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow unauthorized response has a 4xx status code
func (o *CancelWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel workflow unauthorized response has a 5xx status code
func (o *CancelWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel workflow unauthorized response a status code equal to that given
func (o *CancelWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cancel workflow unauthorized response
func (o *CancelWorkflowUnauthorized) Code() int {
	return 401
}

func (o *CancelWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelWorkflowUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelWorkflowForbidden creates a CancelWorkflowForbidden with default headers values
func NewCancelWorkflowForbidden() *CancelWorkflowForbidden {
	return &CancelWorkflowForbidden{}
}

/*
CancelWorkflowForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelWorkflowForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel workflow forbidden response has a 2xx status code
func (o *CancelWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel workflow forbidden response has a 3xx status code
func (o *CancelWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow forbidden response has a 4xx status code
func (o *CancelWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel workflow forbidden response has a 5xx status code
func (o *CancelWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel workflow forbidden response a status code equal to that given
func (o *CancelWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel workflow forbidden response
func (o *CancelWorkflowForbidden) Code() int {
	return 403
}

func (o *CancelWorkflowForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *CancelWorkflowForbidden) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *CancelWorkflowForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelWorkflowNotFound creates a CancelWorkflowNotFound with default headers values
func NewCancelWorkflowNotFound() *CancelWorkflowNotFound {
	return &CancelWorkflowNotFound{}
}

/*
CancelWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelWorkflowNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel workflow not found response has a 2xx status code
func (o *CancelWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel workflow not found response has a 3xx status code
func (o *CancelWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow not found response has a 4xx status code
func (o *CancelWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel workflow not found response has a 5xx status code
func (o *CancelWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel workflow not found response a status code equal to that given
func (o *CancelWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel workflow not found response
func (o *CancelWorkflowNotFound) Code() int {
	return 404
}

func (o *CancelWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *CancelWorkflowNotFound) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *CancelWorkflowNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelWorkflowInternalServerError creates a CancelWorkflowInternalServerError with default headers values
func NewCancelWorkflowInternalServerError() *CancelWorkflowInternalServerError {
	return &CancelWorkflowInternalServerError{}
}

/*
CancelWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CancelWorkflowInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel workflow internal server error response has a 2xx status code
func (o *CancelWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel workflow internal server error response has a 3xx status code
func (o *CancelWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel workflow internal server error response has a 4xx status code
func (o *CancelWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel workflow internal server error response has a 5xx status code
func (o *CancelWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel workflow internal server error response a status code equal to that given
func (o *CancelWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cancel workflow internal server error response
func (o *CancelWorkflowInternalServerError) Code() int {
	return 500
}

func (o *CancelWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelWorkflowInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/cancel][%d] cancelWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelWorkflowInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
