// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetCurrentAccountReader is a Reader for the GetCurrentAccount structure.
type GetCurrentAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCurrentAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCurrentAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCurrentAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCurrentAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCurrentAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/account] GetCurrentAccount", response, response.Code())
	}
}

// NewGetCurrentAccountOK creates a GetCurrentAccountOK with default headers values
func NewGetCurrentAccountOK() *GetCurrentAccountOK {
	return &GetCurrentAccountOK{}
}

/*
GetCurrentAccountOK describes a response with status code 200, with default header values.

OK
*/
type GetCurrentAccountOK struct {
	Payload *models.AppAccount
}

// IsSuccess returns true when this get current account o k response has a 2xx status code
func (o *GetCurrentAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get current account o k response has a 3xx status code
func (o *GetCurrentAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get current account o k response has a 4xx status code
func (o *GetCurrentAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get current account o k response has a 5xx status code
func (o *GetCurrentAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get current account o k response a status code equal to that given
func (o *GetCurrentAccountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get current account o k response
func (o *GetCurrentAccountOK) Code() int {
	return 200
}

func (o *GetCurrentAccountOK) Error() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountOK  %+v", 200, o.Payload)
}

func (o *GetCurrentAccountOK) String() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountOK  %+v", 200, o.Payload)
}

func (o *GetCurrentAccountOK) GetPayload() *models.AppAccount {
	return o.Payload
}

func (o *GetCurrentAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrentAccountUnauthorized creates a GetCurrentAccountUnauthorized with default headers values
func NewGetCurrentAccountUnauthorized() *GetCurrentAccountUnauthorized {
	return &GetCurrentAccountUnauthorized{}
}

/*
GetCurrentAccountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCurrentAccountUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get current account unauthorized response has a 2xx status code
func (o *GetCurrentAccountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get current account unauthorized response has a 3xx status code
func (o *GetCurrentAccountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get current account unauthorized response has a 4xx status code
func (o *GetCurrentAccountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get current account unauthorized response has a 5xx status code
func (o *GetCurrentAccountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get current account unauthorized response a status code equal to that given
func (o *GetCurrentAccountUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get current account unauthorized response
func (o *GetCurrentAccountUnauthorized) Code() int {
	return 401
}

func (o *GetCurrentAccountUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCurrentAccountUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCurrentAccountUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetCurrentAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrentAccountNotFound creates a GetCurrentAccountNotFound with default headers values
func NewGetCurrentAccountNotFound() *GetCurrentAccountNotFound {
	return &GetCurrentAccountNotFound{}
}

/*
GetCurrentAccountNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCurrentAccountNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get current account not found response has a 2xx status code
func (o *GetCurrentAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get current account not found response has a 3xx status code
func (o *GetCurrentAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get current account not found response has a 4xx status code
func (o *GetCurrentAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get current account not found response has a 5xx status code
func (o *GetCurrentAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get current account not found response a status code equal to that given
func (o *GetCurrentAccountNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get current account not found response
func (o *GetCurrentAccountNotFound) Code() int {
	return 404
}

func (o *GetCurrentAccountNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountNotFound  %+v", 404, o.Payload)
}

func (o *GetCurrentAccountNotFound) String() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountNotFound  %+v", 404, o.Payload)
}

func (o *GetCurrentAccountNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetCurrentAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCurrentAccountInternalServerError creates a GetCurrentAccountInternalServerError with default headers values
func NewGetCurrentAccountInternalServerError() *GetCurrentAccountInternalServerError {
	return &GetCurrentAccountInternalServerError{}
}

/*
GetCurrentAccountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCurrentAccountInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get current account internal server error response has a 2xx status code
func (o *GetCurrentAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get current account internal server error response has a 3xx status code
func (o *GetCurrentAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get current account internal server error response has a 4xx status code
func (o *GetCurrentAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get current account internal server error response has a 5xx status code
func (o *GetCurrentAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get current account internal server error response a status code equal to that given
func (o *GetCurrentAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get current account internal server error response
func (o *GetCurrentAccountInternalServerError) Code() int {
	return 500
}

func (o *GetCurrentAccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCurrentAccountInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/account][%d] getCurrentAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCurrentAccountInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetCurrentAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
