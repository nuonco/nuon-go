// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateRunnerMngReader is a Reader for the UpdateRunnerMng structure.
type UpdateRunnerMngReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunnerMngReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateRunnerMngCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunnerMngBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunnerMngUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunnerMngForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunnerMngNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRunnerMngInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/runners/{runner_id}/mng/update] UpdateRunnerMng", response, response.Code())
	}
}

// NewUpdateRunnerMngCreated creates a UpdateRunnerMngCreated with default headers values
func NewUpdateRunnerMngCreated() *UpdateRunnerMngCreated {
	return &UpdateRunnerMngCreated{}
}

/*
UpdateRunnerMngCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateRunnerMngCreated struct {
	Payload bool
}

// IsSuccess returns true when this update runner mng created response has a 2xx status code
func (o *UpdateRunnerMngCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update runner mng created response has a 3xx status code
func (o *UpdateRunnerMngCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng created response has a 4xx status code
func (o *UpdateRunnerMngCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner mng created response has a 5xx status code
func (o *UpdateRunnerMngCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner mng created response a status code equal to that given
func (o *UpdateRunnerMngCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update runner mng created response
func (o *UpdateRunnerMngCreated) Code() int {
	return 201
}

func (o *UpdateRunnerMngCreated) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngCreated  %+v", 201, o.Payload)
}

func (o *UpdateRunnerMngCreated) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngCreated  %+v", 201, o.Payload)
}

func (o *UpdateRunnerMngCreated) GetPayload() bool {
	return o.Payload
}

func (o *UpdateRunnerMngCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerMngBadRequest creates a UpdateRunnerMngBadRequest with default headers values
func NewUpdateRunnerMngBadRequest() *UpdateRunnerMngBadRequest {
	return &UpdateRunnerMngBadRequest{}
}

/*
UpdateRunnerMngBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRunnerMngBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner mng bad request response has a 2xx status code
func (o *UpdateRunnerMngBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner mng bad request response has a 3xx status code
func (o *UpdateRunnerMngBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng bad request response has a 4xx status code
func (o *UpdateRunnerMngBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner mng bad request response has a 5xx status code
func (o *UpdateRunnerMngBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner mng bad request response a status code equal to that given
func (o *UpdateRunnerMngBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update runner mng bad request response
func (o *UpdateRunnerMngBadRequest) Code() int {
	return 400
}

func (o *UpdateRunnerMngBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRunnerMngBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRunnerMngBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerMngBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerMngUnauthorized creates a UpdateRunnerMngUnauthorized with default headers values
func NewUpdateRunnerMngUnauthorized() *UpdateRunnerMngUnauthorized {
	return &UpdateRunnerMngUnauthorized{}
}

/*
UpdateRunnerMngUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRunnerMngUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner mng unauthorized response has a 2xx status code
func (o *UpdateRunnerMngUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner mng unauthorized response has a 3xx status code
func (o *UpdateRunnerMngUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng unauthorized response has a 4xx status code
func (o *UpdateRunnerMngUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner mng unauthorized response has a 5xx status code
func (o *UpdateRunnerMngUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner mng unauthorized response a status code equal to that given
func (o *UpdateRunnerMngUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update runner mng unauthorized response
func (o *UpdateRunnerMngUnauthorized) Code() int {
	return 401
}

func (o *UpdateRunnerMngUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRunnerMngUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRunnerMngUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerMngUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerMngForbidden creates a UpdateRunnerMngForbidden with default headers values
func NewUpdateRunnerMngForbidden() *UpdateRunnerMngForbidden {
	return &UpdateRunnerMngForbidden{}
}

/*
UpdateRunnerMngForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRunnerMngForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner mng forbidden response has a 2xx status code
func (o *UpdateRunnerMngForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner mng forbidden response has a 3xx status code
func (o *UpdateRunnerMngForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng forbidden response has a 4xx status code
func (o *UpdateRunnerMngForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner mng forbidden response has a 5xx status code
func (o *UpdateRunnerMngForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner mng forbidden response a status code equal to that given
func (o *UpdateRunnerMngForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update runner mng forbidden response
func (o *UpdateRunnerMngForbidden) Code() int {
	return 403
}

func (o *UpdateRunnerMngForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRunnerMngForbidden) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRunnerMngForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerMngForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerMngNotFound creates a UpdateRunnerMngNotFound with default headers values
func NewUpdateRunnerMngNotFound() *UpdateRunnerMngNotFound {
	return &UpdateRunnerMngNotFound{}
}

/*
UpdateRunnerMngNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRunnerMngNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner mng not found response has a 2xx status code
func (o *UpdateRunnerMngNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner mng not found response has a 3xx status code
func (o *UpdateRunnerMngNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng not found response has a 4xx status code
func (o *UpdateRunnerMngNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner mng not found response has a 5xx status code
func (o *UpdateRunnerMngNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner mng not found response a status code equal to that given
func (o *UpdateRunnerMngNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update runner mng not found response
func (o *UpdateRunnerMngNotFound) Code() int {
	return 404
}

func (o *UpdateRunnerMngNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRunnerMngNotFound) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRunnerMngNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerMngNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerMngInternalServerError creates a UpdateRunnerMngInternalServerError with default headers values
func NewUpdateRunnerMngInternalServerError() *UpdateRunnerMngInternalServerError {
	return &UpdateRunnerMngInternalServerError{}
}

/*
UpdateRunnerMngInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateRunnerMngInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner mng internal server error response has a 2xx status code
func (o *UpdateRunnerMngInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner mng internal server error response has a 3xx status code
func (o *UpdateRunnerMngInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner mng internal server error response has a 4xx status code
func (o *UpdateRunnerMngInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner mng internal server error response has a 5xx status code
func (o *UpdateRunnerMngInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update runner mng internal server error response a status code equal to that given
func (o *UpdateRunnerMngInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update runner mng internal server error response
func (o *UpdateRunnerMngInternalServerError) Code() int {
	return 500
}

func (o *UpdateRunnerMngInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRunnerMngInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/runners/{runner_id}/mng/update][%d] updateRunnerMngInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRunnerMngInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerMngInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
