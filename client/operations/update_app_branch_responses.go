// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateAppBranchReader is a Reader for the UpdateAppBranch structure.
type UpdateAppBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAppBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAppBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAppBranchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAppBranchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAppBranchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update] UpdateAppBranch", response, response.Code())
	}
}

// NewUpdateAppBranchOK creates a UpdateAppBranchOK with default headers values
func NewUpdateAppBranchOK() *UpdateAppBranchOK {
	return &UpdateAppBranchOK{}
}

/*
UpdateAppBranchOK describes a response with status code 200, with default header values.

OK
*/
type UpdateAppBranchOK struct {
	Payload string
}

// IsSuccess returns true when this update app branch o k response has a 2xx status code
func (o *UpdateAppBranchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update app branch o k response has a 3xx status code
func (o *UpdateAppBranchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch o k response has a 4xx status code
func (o *UpdateAppBranchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app branch o k response has a 5xx status code
func (o *UpdateAppBranchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update app branch o k response a status code equal to that given
func (o *UpdateAppBranchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update app branch o k response
func (o *UpdateAppBranchOK) Code() int {
	return 200
}

func (o *UpdateAppBranchOK) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchOK  %+v", 200, o.Payload)
}

func (o *UpdateAppBranchOK) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchOK  %+v", 200, o.Payload)
}

func (o *UpdateAppBranchOK) GetPayload() string {
	return o.Payload
}

func (o *UpdateAppBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppBranchBadRequest creates a UpdateAppBranchBadRequest with default headers values
func NewUpdateAppBranchBadRequest() *UpdateAppBranchBadRequest {
	return &UpdateAppBranchBadRequest{}
}

/*
UpdateAppBranchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAppBranchBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app branch bad request response has a 2xx status code
func (o *UpdateAppBranchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app branch bad request response has a 3xx status code
func (o *UpdateAppBranchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch bad request response has a 4xx status code
func (o *UpdateAppBranchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app branch bad request response has a 5xx status code
func (o *UpdateAppBranchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update app branch bad request response a status code equal to that given
func (o *UpdateAppBranchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update app branch bad request response
func (o *UpdateAppBranchBadRequest) Code() int {
	return 400
}

func (o *UpdateAppBranchBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppBranchBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppBranchBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppBranchUnauthorized creates a UpdateAppBranchUnauthorized with default headers values
func NewUpdateAppBranchUnauthorized() *UpdateAppBranchUnauthorized {
	return &UpdateAppBranchUnauthorized{}
}

/*
UpdateAppBranchUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAppBranchUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app branch unauthorized response has a 2xx status code
func (o *UpdateAppBranchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app branch unauthorized response has a 3xx status code
func (o *UpdateAppBranchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch unauthorized response has a 4xx status code
func (o *UpdateAppBranchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app branch unauthorized response has a 5xx status code
func (o *UpdateAppBranchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update app branch unauthorized response a status code equal to that given
func (o *UpdateAppBranchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update app branch unauthorized response
func (o *UpdateAppBranchUnauthorized) Code() int {
	return 401
}

func (o *UpdateAppBranchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppBranchUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppBranchUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppBranchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppBranchForbidden creates a UpdateAppBranchForbidden with default headers values
func NewUpdateAppBranchForbidden() *UpdateAppBranchForbidden {
	return &UpdateAppBranchForbidden{}
}

/*
UpdateAppBranchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAppBranchForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app branch forbidden response has a 2xx status code
func (o *UpdateAppBranchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app branch forbidden response has a 3xx status code
func (o *UpdateAppBranchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch forbidden response has a 4xx status code
func (o *UpdateAppBranchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app branch forbidden response has a 5xx status code
func (o *UpdateAppBranchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update app branch forbidden response a status code equal to that given
func (o *UpdateAppBranchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update app branch forbidden response
func (o *UpdateAppBranchForbidden) Code() int {
	return 403
}

func (o *UpdateAppBranchForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppBranchForbidden) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppBranchForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppBranchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppBranchNotFound creates a UpdateAppBranchNotFound with default headers values
func NewUpdateAppBranchNotFound() *UpdateAppBranchNotFound {
	return &UpdateAppBranchNotFound{}
}

/*
UpdateAppBranchNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAppBranchNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app branch not found response has a 2xx status code
func (o *UpdateAppBranchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app branch not found response has a 3xx status code
func (o *UpdateAppBranchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch not found response has a 4xx status code
func (o *UpdateAppBranchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app branch not found response has a 5xx status code
func (o *UpdateAppBranchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update app branch not found response a status code equal to that given
func (o *UpdateAppBranchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update app branch not found response
func (o *UpdateAppBranchNotFound) Code() int {
	return 404
}

func (o *UpdateAppBranchNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppBranchNotFound) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppBranchNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppBranchInternalServerError creates a UpdateAppBranchInternalServerError with default headers values
func NewUpdateAppBranchInternalServerError() *UpdateAppBranchInternalServerError {
	return &UpdateAppBranchInternalServerError{}
}

/*
UpdateAppBranchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateAppBranchInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app branch internal server error response has a 2xx status code
func (o *UpdateAppBranchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app branch internal server error response has a 3xx status code
func (o *UpdateAppBranchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app branch internal server error response has a 4xx status code
func (o *UpdateAppBranchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app branch internal server error response has a 5xx status code
func (o *UpdateAppBranchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update app branch internal server error response a status code equal to that given
func (o *UpdateAppBranchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update app branch internal server error response
func (o *UpdateAppBranchInternalServerError) Code() int {
	return 500
}

func (o *UpdateAppBranchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppBranchInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/branches/{app_branch_id}/update][%d] updateAppBranchInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppBranchInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppBranchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
