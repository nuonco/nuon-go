// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetConnectionBranchesReader is a Reader for the GetConnectionBranches structure.
type GetConnectionBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConnectionBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionBranchesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionBranchesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConnectionBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConnectionBranchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/vcs/connections/{connection_id}/branches] GetConnectionBranches", response, response.Code())
	}
}

// NewGetConnectionBranchesOK creates a GetConnectionBranchesOK with default headers values
func NewGetConnectionBranchesOK() *GetConnectionBranchesOK {
	return &GetConnectionBranchesOK{}
}

/*
GetConnectionBranchesOK describes a response with status code 200, with default header values.

OK
*/
type GetConnectionBranchesOK struct {
	Payload []*models.AppVCSConnectionBranch
}

// IsSuccess returns true when this get connection branches o k response has a 2xx status code
func (o *GetConnectionBranchesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get connection branches o k response has a 3xx status code
func (o *GetConnectionBranchesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches o k response has a 4xx status code
func (o *GetConnectionBranchesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection branches o k response has a 5xx status code
func (o *GetConnectionBranchesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection branches o k response a status code equal to that given
func (o *GetConnectionBranchesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get connection branches o k response
func (o *GetConnectionBranchesOK) Code() int {
	return 200
}

func (o *GetConnectionBranchesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesOK %s", 200, payload)
}

func (o *GetConnectionBranchesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesOK %s", 200, payload)
}

func (o *GetConnectionBranchesOK) GetPayload() []*models.AppVCSConnectionBranch {
	return o.Payload
}

func (o *GetConnectionBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionBranchesBadRequest creates a GetConnectionBranchesBadRequest with default headers values
func NewGetConnectionBranchesBadRequest() *GetConnectionBranchesBadRequest {
	return &GetConnectionBranchesBadRequest{}
}

/*
GetConnectionBranchesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetConnectionBranchesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get connection branches bad request response has a 2xx status code
func (o *GetConnectionBranchesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection branches bad request response has a 3xx status code
func (o *GetConnectionBranchesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches bad request response has a 4xx status code
func (o *GetConnectionBranchesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection branches bad request response has a 5xx status code
func (o *GetConnectionBranchesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection branches bad request response a status code equal to that given
func (o *GetConnectionBranchesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get connection branches bad request response
func (o *GetConnectionBranchesBadRequest) Code() int {
	return 400
}

func (o *GetConnectionBranchesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesBadRequest %s", 400, payload)
}

func (o *GetConnectionBranchesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesBadRequest %s", 400, payload)
}

func (o *GetConnectionBranchesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetConnectionBranchesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionBranchesUnauthorized creates a GetConnectionBranchesUnauthorized with default headers values
func NewGetConnectionBranchesUnauthorized() *GetConnectionBranchesUnauthorized {
	return &GetConnectionBranchesUnauthorized{}
}

/*
GetConnectionBranchesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetConnectionBranchesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get connection branches unauthorized response has a 2xx status code
func (o *GetConnectionBranchesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection branches unauthorized response has a 3xx status code
func (o *GetConnectionBranchesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches unauthorized response has a 4xx status code
func (o *GetConnectionBranchesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection branches unauthorized response has a 5xx status code
func (o *GetConnectionBranchesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection branches unauthorized response a status code equal to that given
func (o *GetConnectionBranchesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get connection branches unauthorized response
func (o *GetConnectionBranchesUnauthorized) Code() int {
	return 401
}

func (o *GetConnectionBranchesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesUnauthorized %s", 401, payload)
}

func (o *GetConnectionBranchesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesUnauthorized %s", 401, payload)
}

func (o *GetConnectionBranchesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetConnectionBranchesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionBranchesForbidden creates a GetConnectionBranchesForbidden with default headers values
func NewGetConnectionBranchesForbidden() *GetConnectionBranchesForbidden {
	return &GetConnectionBranchesForbidden{}
}

/*
GetConnectionBranchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetConnectionBranchesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get connection branches forbidden response has a 2xx status code
func (o *GetConnectionBranchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection branches forbidden response has a 3xx status code
func (o *GetConnectionBranchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches forbidden response has a 4xx status code
func (o *GetConnectionBranchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection branches forbidden response has a 5xx status code
func (o *GetConnectionBranchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection branches forbidden response a status code equal to that given
func (o *GetConnectionBranchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get connection branches forbidden response
func (o *GetConnectionBranchesForbidden) Code() int {
	return 403
}

func (o *GetConnectionBranchesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesForbidden %s", 403, payload)
}

func (o *GetConnectionBranchesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesForbidden %s", 403, payload)
}

func (o *GetConnectionBranchesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetConnectionBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionBranchesNotFound creates a GetConnectionBranchesNotFound with default headers values
func NewGetConnectionBranchesNotFound() *GetConnectionBranchesNotFound {
	return &GetConnectionBranchesNotFound{}
}

/*
GetConnectionBranchesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetConnectionBranchesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get connection branches not found response has a 2xx status code
func (o *GetConnectionBranchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection branches not found response has a 3xx status code
func (o *GetConnectionBranchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches not found response has a 4xx status code
func (o *GetConnectionBranchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get connection branches not found response has a 5xx status code
func (o *GetConnectionBranchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get connection branches not found response a status code equal to that given
func (o *GetConnectionBranchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get connection branches not found response
func (o *GetConnectionBranchesNotFound) Code() int {
	return 404
}

func (o *GetConnectionBranchesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesNotFound %s", 404, payload)
}

func (o *GetConnectionBranchesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesNotFound %s", 404, payload)
}

func (o *GetConnectionBranchesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetConnectionBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionBranchesInternalServerError creates a GetConnectionBranchesInternalServerError with default headers values
func NewGetConnectionBranchesInternalServerError() *GetConnectionBranchesInternalServerError {
	return &GetConnectionBranchesInternalServerError{}
}

/*
GetConnectionBranchesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetConnectionBranchesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get connection branches internal server error response has a 2xx status code
func (o *GetConnectionBranchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get connection branches internal server error response has a 3xx status code
func (o *GetConnectionBranchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get connection branches internal server error response has a 4xx status code
func (o *GetConnectionBranchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get connection branches internal server error response has a 5xx status code
func (o *GetConnectionBranchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get connection branches internal server error response a status code equal to that given
func (o *GetConnectionBranchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get connection branches internal server error response
func (o *GetConnectionBranchesInternalServerError) Code() int {
	return 500
}

func (o *GetConnectionBranchesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesInternalServerError %s", 500, payload)
}

func (o *GetConnectionBranchesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connections/{connection_id}/branches][%d] getConnectionBranchesInternalServerError %s", 500, payload)
}

func (o *GetConnectionBranchesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetConnectionBranchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
