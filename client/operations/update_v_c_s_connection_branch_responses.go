// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateVCSConnectionBranchReader is a Reader for the UpdateVCSConnectionBranch structure.
type UpdateVCSConnectionBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVCSConnectionBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateVCSConnectionBranchCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVCSConnectionBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateVCSConnectionBranchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVCSConnectionBranchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVCSConnectionBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVCSConnectionBranchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}] UpdateVCSConnectionBranch", response, response.Code())
	}
}

// NewUpdateVCSConnectionBranchCreated creates a UpdateVCSConnectionBranchCreated with default headers values
func NewUpdateVCSConnectionBranchCreated() *UpdateVCSConnectionBranchCreated {
	return &UpdateVCSConnectionBranchCreated{}
}

/*
UpdateVCSConnectionBranchCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateVCSConnectionBranchCreated struct {
	Payload *models.AppVCSConnectionBranch
}

// IsSuccess returns true when this update v c s connection branch created response has a 2xx status code
func (o *UpdateVCSConnectionBranchCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update v c s connection branch created response has a 3xx status code
func (o *UpdateVCSConnectionBranchCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch created response has a 4xx status code
func (o *UpdateVCSConnectionBranchCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s connection branch created response has a 5xx status code
func (o *UpdateVCSConnectionBranchCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s connection branch created response a status code equal to that given
func (o *UpdateVCSConnectionBranchCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update v c s connection branch created response
func (o *UpdateVCSConnectionBranchCreated) Code() int {
	return 201
}

func (o *UpdateVCSConnectionBranchCreated) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchCreated  %+v", 201, o.Payload)
}

func (o *UpdateVCSConnectionBranchCreated) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchCreated  %+v", 201, o.Payload)
}

func (o *UpdateVCSConnectionBranchCreated) GetPayload() *models.AppVCSConnectionBranch {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppVCSConnectionBranch)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSConnectionBranchBadRequest creates a UpdateVCSConnectionBranchBadRequest with default headers values
func NewUpdateVCSConnectionBranchBadRequest() *UpdateVCSConnectionBranchBadRequest {
	return &UpdateVCSConnectionBranchBadRequest{}
}

/*
UpdateVCSConnectionBranchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateVCSConnectionBranchBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update v c s connection branch bad request response has a 2xx status code
func (o *UpdateVCSConnectionBranchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s connection branch bad request response has a 3xx status code
func (o *UpdateVCSConnectionBranchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch bad request response has a 4xx status code
func (o *UpdateVCSConnectionBranchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s connection branch bad request response has a 5xx status code
func (o *UpdateVCSConnectionBranchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s connection branch bad request response a status code equal to that given
func (o *UpdateVCSConnectionBranchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update v c s connection branch bad request response
func (o *UpdateVCSConnectionBranchBadRequest) Code() int {
	return 400
}

func (o *UpdateVCSConnectionBranchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVCSConnectionBranchBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateVCSConnectionBranchBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSConnectionBranchUnauthorized creates a UpdateVCSConnectionBranchUnauthorized with default headers values
func NewUpdateVCSConnectionBranchUnauthorized() *UpdateVCSConnectionBranchUnauthorized {
	return &UpdateVCSConnectionBranchUnauthorized{}
}

/*
UpdateVCSConnectionBranchUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateVCSConnectionBranchUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update v c s connection branch unauthorized response has a 2xx status code
func (o *UpdateVCSConnectionBranchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s connection branch unauthorized response has a 3xx status code
func (o *UpdateVCSConnectionBranchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch unauthorized response has a 4xx status code
func (o *UpdateVCSConnectionBranchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s connection branch unauthorized response has a 5xx status code
func (o *UpdateVCSConnectionBranchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s connection branch unauthorized response a status code equal to that given
func (o *UpdateVCSConnectionBranchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update v c s connection branch unauthorized response
func (o *UpdateVCSConnectionBranchUnauthorized) Code() int {
	return 401
}

func (o *UpdateVCSConnectionBranchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVCSConnectionBranchUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateVCSConnectionBranchUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSConnectionBranchForbidden creates a UpdateVCSConnectionBranchForbidden with default headers values
func NewUpdateVCSConnectionBranchForbidden() *UpdateVCSConnectionBranchForbidden {
	return &UpdateVCSConnectionBranchForbidden{}
}

/*
UpdateVCSConnectionBranchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateVCSConnectionBranchForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update v c s connection branch forbidden response has a 2xx status code
func (o *UpdateVCSConnectionBranchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s connection branch forbidden response has a 3xx status code
func (o *UpdateVCSConnectionBranchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch forbidden response has a 4xx status code
func (o *UpdateVCSConnectionBranchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s connection branch forbidden response has a 5xx status code
func (o *UpdateVCSConnectionBranchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s connection branch forbidden response a status code equal to that given
func (o *UpdateVCSConnectionBranchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update v c s connection branch forbidden response
func (o *UpdateVCSConnectionBranchForbidden) Code() int {
	return 403
}

func (o *UpdateVCSConnectionBranchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchForbidden  %+v", 403, o.Payload)
}

func (o *UpdateVCSConnectionBranchForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchForbidden  %+v", 403, o.Payload)
}

func (o *UpdateVCSConnectionBranchForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSConnectionBranchNotFound creates a UpdateVCSConnectionBranchNotFound with default headers values
func NewUpdateVCSConnectionBranchNotFound() *UpdateVCSConnectionBranchNotFound {
	return &UpdateVCSConnectionBranchNotFound{}
}

/*
UpdateVCSConnectionBranchNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateVCSConnectionBranchNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update v c s connection branch not found response has a 2xx status code
func (o *UpdateVCSConnectionBranchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s connection branch not found response has a 3xx status code
func (o *UpdateVCSConnectionBranchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch not found response has a 4xx status code
func (o *UpdateVCSConnectionBranchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update v c s connection branch not found response has a 5xx status code
func (o *UpdateVCSConnectionBranchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update v c s connection branch not found response a status code equal to that given
func (o *UpdateVCSConnectionBranchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update v c s connection branch not found response
func (o *UpdateVCSConnectionBranchNotFound) Code() int {
	return 404
}

func (o *UpdateVCSConnectionBranchNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVCSConnectionBranchNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchNotFound  %+v", 404, o.Payload)
}

func (o *UpdateVCSConnectionBranchNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVCSConnectionBranchInternalServerError creates a UpdateVCSConnectionBranchInternalServerError with default headers values
func NewUpdateVCSConnectionBranchInternalServerError() *UpdateVCSConnectionBranchInternalServerError {
	return &UpdateVCSConnectionBranchInternalServerError{}
}

/*
UpdateVCSConnectionBranchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateVCSConnectionBranchInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update v c s connection branch internal server error response has a 2xx status code
func (o *UpdateVCSConnectionBranchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update v c s connection branch internal server error response has a 3xx status code
func (o *UpdateVCSConnectionBranchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update v c s connection branch internal server error response has a 4xx status code
func (o *UpdateVCSConnectionBranchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update v c s connection branch internal server error response has a 5xx status code
func (o *UpdateVCSConnectionBranchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update v c s connection branch internal server error response a status code equal to that given
func (o *UpdateVCSConnectionBranchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update v c s connection branch internal server error response
func (o *UpdateVCSConnectionBranchInternalServerError) Code() int {
	return 500
}

func (o *UpdateVCSConnectionBranchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVCSConnectionBranchInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/vcs/connections/{connection_id}/branches/{connection_branch_id}][%d] updateVCSConnectionBranchInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateVCSConnectionBranchInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateVCSConnectionBranchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
