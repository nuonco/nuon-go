// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetInstallStateHistoryReader is a Reader for the GetInstallStateHistory structure.
type GetInstallStateHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstallStateHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstallStateHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInstallStateHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInstallStateHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInstallStateHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstallStateHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInstallStateHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/installs/{install_id}/state-history] GetInstallStateHistory", response, response.Code())
	}
}

// NewGetInstallStateHistoryOK creates a GetInstallStateHistoryOK with default headers values
func NewGetInstallStateHistoryOK() *GetInstallStateHistoryOK {
	return &GetInstallStateHistoryOK{}
}

/*
GetInstallStateHistoryOK describes a response with status code 200, with default header values.

OK
*/
type GetInstallStateHistoryOK struct {
	Payload []*models.AppInstallState
}

// IsSuccess returns true when this get install state history o k response has a 2xx status code
func (o *GetInstallStateHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get install state history o k response has a 3xx status code
func (o *GetInstallStateHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history o k response has a 4xx status code
func (o *GetInstallStateHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get install state history o k response has a 5xx status code
func (o *GetInstallStateHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get install state history o k response a status code equal to that given
func (o *GetInstallStateHistoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get install state history o k response
func (o *GetInstallStateHistoryOK) Code() int {
	return 200
}

func (o *GetInstallStateHistoryOK) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryOK  %+v", 200, o.Payload)
}

func (o *GetInstallStateHistoryOK) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryOK  %+v", 200, o.Payload)
}

func (o *GetInstallStateHistoryOK) GetPayload() []*models.AppInstallState {
	return o.Payload
}

func (o *GetInstallStateHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallStateHistoryBadRequest creates a GetInstallStateHistoryBadRequest with default headers values
func NewGetInstallStateHistoryBadRequest() *GetInstallStateHistoryBadRequest {
	return &GetInstallStateHistoryBadRequest{}
}

/*
GetInstallStateHistoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetInstallStateHistoryBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install state history bad request response has a 2xx status code
func (o *GetInstallStateHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install state history bad request response has a 3xx status code
func (o *GetInstallStateHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history bad request response has a 4xx status code
func (o *GetInstallStateHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install state history bad request response has a 5xx status code
func (o *GetInstallStateHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get install state history bad request response a status code equal to that given
func (o *GetInstallStateHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get install state history bad request response
func (o *GetInstallStateHistoryBadRequest) Code() int {
	return 400
}

func (o *GetInstallStateHistoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstallStateHistoryBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetInstallStateHistoryBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallStateHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallStateHistoryUnauthorized creates a GetInstallStateHistoryUnauthorized with default headers values
func NewGetInstallStateHistoryUnauthorized() *GetInstallStateHistoryUnauthorized {
	return &GetInstallStateHistoryUnauthorized{}
}

/*
GetInstallStateHistoryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInstallStateHistoryUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install state history unauthorized response has a 2xx status code
func (o *GetInstallStateHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install state history unauthorized response has a 3xx status code
func (o *GetInstallStateHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history unauthorized response has a 4xx status code
func (o *GetInstallStateHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install state history unauthorized response has a 5xx status code
func (o *GetInstallStateHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get install state history unauthorized response a status code equal to that given
func (o *GetInstallStateHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get install state history unauthorized response
func (o *GetInstallStateHistoryUnauthorized) Code() int {
	return 401
}

func (o *GetInstallStateHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstallStateHistoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInstallStateHistoryUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallStateHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallStateHistoryForbidden creates a GetInstallStateHistoryForbidden with default headers values
func NewGetInstallStateHistoryForbidden() *GetInstallStateHistoryForbidden {
	return &GetInstallStateHistoryForbidden{}
}

/*
GetInstallStateHistoryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInstallStateHistoryForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install state history forbidden response has a 2xx status code
func (o *GetInstallStateHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install state history forbidden response has a 3xx status code
func (o *GetInstallStateHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history forbidden response has a 4xx status code
func (o *GetInstallStateHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install state history forbidden response has a 5xx status code
func (o *GetInstallStateHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get install state history forbidden response a status code equal to that given
func (o *GetInstallStateHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get install state history forbidden response
func (o *GetInstallStateHistoryForbidden) Code() int {
	return 403
}

func (o *GetInstallStateHistoryForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetInstallStateHistoryForbidden) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetInstallStateHistoryForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallStateHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallStateHistoryNotFound creates a GetInstallStateHistoryNotFound with default headers values
func NewGetInstallStateHistoryNotFound() *GetInstallStateHistoryNotFound {
	return &GetInstallStateHistoryNotFound{}
}

/*
GetInstallStateHistoryNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetInstallStateHistoryNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install state history not found response has a 2xx status code
func (o *GetInstallStateHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install state history not found response has a 3xx status code
func (o *GetInstallStateHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history not found response has a 4xx status code
func (o *GetInstallStateHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install state history not found response has a 5xx status code
func (o *GetInstallStateHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get install state history not found response a status code equal to that given
func (o *GetInstallStateHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get install state history not found response
func (o *GetInstallStateHistoryNotFound) Code() int {
	return 404
}

func (o *GetInstallStateHistoryNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetInstallStateHistoryNotFound) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetInstallStateHistoryNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallStateHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallStateHistoryInternalServerError creates a GetInstallStateHistoryInternalServerError with default headers values
func NewGetInstallStateHistoryInternalServerError() *GetInstallStateHistoryInternalServerError {
	return &GetInstallStateHistoryInternalServerError{}
}

/*
GetInstallStateHistoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetInstallStateHistoryInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install state history internal server error response has a 2xx status code
func (o *GetInstallStateHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install state history internal server error response has a 3xx status code
func (o *GetInstallStateHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install state history internal server error response has a 4xx status code
func (o *GetInstallStateHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get install state history internal server error response has a 5xx status code
func (o *GetInstallStateHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get install state history internal server error response a status code equal to that given
func (o *GetInstallStateHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get install state history internal server error response
func (o *GetInstallStateHistoryInternalServerError) Code() int {
	return 500
}

func (o *GetInstallStateHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInstallStateHistoryInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/state-history][%d] getInstallStateHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInstallStateHistoryInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallStateHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
