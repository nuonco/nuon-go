// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// CreateInstallReader is a Reader for the CreateInstall structure.
type CreateInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateInstallCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateInstallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInstallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/apps/{app_id}/installs] CreateInstall", response, response.Code())
	}
}

// NewCreateInstallCreated creates a CreateInstallCreated with default headers values
func NewCreateInstallCreated() *CreateInstallCreated {
	return &CreateInstallCreated{}
}

/*
CreateInstallCreated describes a response with status code 201, with default header values.

Created
*/
type CreateInstallCreated struct {
	Payload *models.AppInstall
}

// IsSuccess returns true when this create install created response has a 2xx status code
func (o *CreateInstallCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create install created response has a 3xx status code
func (o *CreateInstallCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install created response has a 4xx status code
func (o *CreateInstallCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create install created response has a 5xx status code
func (o *CreateInstallCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create install created response a status code equal to that given
func (o *CreateInstallCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create install created response
func (o *CreateInstallCreated) Code() int {
	return 201
}

func (o *CreateInstallCreated) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallCreated  %+v", 201, o.Payload)
}

func (o *CreateInstallCreated) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallCreated  %+v", 201, o.Payload)
}

func (o *CreateInstallCreated) GetPayload() *models.AppInstall {
	return o.Payload
}

func (o *CreateInstallCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstall)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstallBadRequest creates a CreateInstallBadRequest with default headers values
func NewCreateInstallBadRequest() *CreateInstallBadRequest {
	return &CreateInstallBadRequest{}
}

/*
CreateInstallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CreateInstallBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create install bad request response has a 2xx status code
func (o *CreateInstallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create install bad request response has a 3xx status code
func (o *CreateInstallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install bad request response has a 4xx status code
func (o *CreateInstallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create install bad request response has a 5xx status code
func (o *CreateInstallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create install bad request response a status code equal to that given
func (o *CreateInstallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create install bad request response
func (o *CreateInstallBadRequest) Code() int {
	return 400
}

func (o *CreateInstallBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInstallBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInstallBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstallUnauthorized creates a CreateInstallUnauthorized with default headers values
func NewCreateInstallUnauthorized() *CreateInstallUnauthorized {
	return &CreateInstallUnauthorized{}
}

/*
CreateInstallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateInstallUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create install unauthorized response has a 2xx status code
func (o *CreateInstallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create install unauthorized response has a 3xx status code
func (o *CreateInstallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install unauthorized response has a 4xx status code
func (o *CreateInstallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create install unauthorized response has a 5xx status code
func (o *CreateInstallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create install unauthorized response a status code equal to that given
func (o *CreateInstallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create install unauthorized response
func (o *CreateInstallUnauthorized) Code() int {
	return 401
}

func (o *CreateInstallUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateInstallUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateInstallUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateInstallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstallForbidden creates a CreateInstallForbidden with default headers values
func NewCreateInstallForbidden() *CreateInstallForbidden {
	return &CreateInstallForbidden{}
}

/*
CreateInstallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateInstallForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create install forbidden response has a 2xx status code
func (o *CreateInstallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create install forbidden response has a 3xx status code
func (o *CreateInstallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install forbidden response has a 4xx status code
func (o *CreateInstallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create install forbidden response has a 5xx status code
func (o *CreateInstallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create install forbidden response a status code equal to that given
func (o *CreateInstallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create install forbidden response
func (o *CreateInstallForbidden) Code() int {
	return 403
}

func (o *CreateInstallForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallForbidden  %+v", 403, o.Payload)
}

func (o *CreateInstallForbidden) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallForbidden  %+v", 403, o.Payload)
}

func (o *CreateInstallForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateInstallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstallNotFound creates a CreateInstallNotFound with default headers values
func NewCreateInstallNotFound() *CreateInstallNotFound {
	return &CreateInstallNotFound{}
}

/*
CreateInstallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CreateInstallNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create install not found response has a 2xx status code
func (o *CreateInstallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create install not found response has a 3xx status code
func (o *CreateInstallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install not found response has a 4xx status code
func (o *CreateInstallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create install not found response has a 5xx status code
func (o *CreateInstallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create install not found response a status code equal to that given
func (o *CreateInstallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create install not found response
func (o *CreateInstallNotFound) Code() int {
	return 404
}

func (o *CreateInstallNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallNotFound  %+v", 404, o.Payload)
}

func (o *CreateInstallNotFound) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallNotFound  %+v", 404, o.Payload)
}

func (o *CreateInstallNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateInstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInstallInternalServerError creates a CreateInstallInternalServerError with default headers values
func NewCreateInstallInternalServerError() *CreateInstallInternalServerError {
	return &CreateInstallInternalServerError{}
}

/*
CreateInstallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateInstallInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this create install internal server error response has a 2xx status code
func (o *CreateInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create install internal server error response has a 3xx status code
func (o *CreateInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create install internal server error response has a 4xx status code
func (o *CreateInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create install internal server error response has a 5xx status code
func (o *CreateInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create install internal server error response a status code equal to that given
func (o *CreateInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create install internal server error response
func (o *CreateInstallInternalServerError) Code() int {
	return 500
}

func (o *CreateInstallInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInstallInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/apps/{app_id}/installs][%d] createInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInstallInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CreateInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
