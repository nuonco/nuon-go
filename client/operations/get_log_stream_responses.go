// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetLogStreamReader is a Reader for the GetLogStream structure.
type GetLogStreamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogStreamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLogStreamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLogStreamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLogStreamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLogStreamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLogStreamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLogStreamInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/log-streams/{log_stream_id}] GetLogStream", response, response.Code())
	}
}

// NewGetLogStreamOK creates a GetLogStreamOK with default headers values
func NewGetLogStreamOK() *GetLogStreamOK {
	return &GetLogStreamOK{}
}

/*
GetLogStreamOK describes a response with status code 200, with default header values.

OK
*/
type GetLogStreamOK struct {
	Payload *models.AppLogStream
}

// IsSuccess returns true when this get log stream o k response has a 2xx status code
func (o *GetLogStreamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get log stream o k response has a 3xx status code
func (o *GetLogStreamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream o k response has a 4xx status code
func (o *GetLogStreamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log stream o k response has a 5xx status code
func (o *GetLogStreamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get log stream o k response a status code equal to that given
func (o *GetLogStreamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get log stream o k response
func (o *GetLogStreamOK) Code() int {
	return 200
}

func (o *GetLogStreamOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamOK %s", 200, payload)
}

func (o *GetLogStreamOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamOK %s", 200, payload)
}

func (o *GetLogStreamOK) GetPayload() *models.AppLogStream {
	return o.Payload
}

func (o *GetLogStreamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppLogStream)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogStreamBadRequest creates a GetLogStreamBadRequest with default headers values
func NewGetLogStreamBadRequest() *GetLogStreamBadRequest {
	return &GetLogStreamBadRequest{}
}

/*
GetLogStreamBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLogStreamBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get log stream bad request response has a 2xx status code
func (o *GetLogStreamBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log stream bad request response has a 3xx status code
func (o *GetLogStreamBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream bad request response has a 4xx status code
func (o *GetLogStreamBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log stream bad request response has a 5xx status code
func (o *GetLogStreamBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get log stream bad request response a status code equal to that given
func (o *GetLogStreamBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get log stream bad request response
func (o *GetLogStreamBadRequest) Code() int {
	return 400
}

func (o *GetLogStreamBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamBadRequest %s", 400, payload)
}

func (o *GetLogStreamBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamBadRequest %s", 400, payload)
}

func (o *GetLogStreamBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLogStreamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogStreamUnauthorized creates a GetLogStreamUnauthorized with default headers values
func NewGetLogStreamUnauthorized() *GetLogStreamUnauthorized {
	return &GetLogStreamUnauthorized{}
}

/*
GetLogStreamUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLogStreamUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get log stream unauthorized response has a 2xx status code
func (o *GetLogStreamUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log stream unauthorized response has a 3xx status code
func (o *GetLogStreamUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream unauthorized response has a 4xx status code
func (o *GetLogStreamUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log stream unauthorized response has a 5xx status code
func (o *GetLogStreamUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get log stream unauthorized response a status code equal to that given
func (o *GetLogStreamUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get log stream unauthorized response
func (o *GetLogStreamUnauthorized) Code() int {
	return 401
}

func (o *GetLogStreamUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamUnauthorized %s", 401, payload)
}

func (o *GetLogStreamUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamUnauthorized %s", 401, payload)
}

func (o *GetLogStreamUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLogStreamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogStreamForbidden creates a GetLogStreamForbidden with default headers values
func NewGetLogStreamForbidden() *GetLogStreamForbidden {
	return &GetLogStreamForbidden{}
}

/*
GetLogStreamForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLogStreamForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get log stream forbidden response has a 2xx status code
func (o *GetLogStreamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log stream forbidden response has a 3xx status code
func (o *GetLogStreamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream forbidden response has a 4xx status code
func (o *GetLogStreamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log stream forbidden response has a 5xx status code
func (o *GetLogStreamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get log stream forbidden response a status code equal to that given
func (o *GetLogStreamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get log stream forbidden response
func (o *GetLogStreamForbidden) Code() int {
	return 403
}

func (o *GetLogStreamForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamForbidden %s", 403, payload)
}

func (o *GetLogStreamForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamForbidden %s", 403, payload)
}

func (o *GetLogStreamForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLogStreamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogStreamNotFound creates a GetLogStreamNotFound with default headers values
func NewGetLogStreamNotFound() *GetLogStreamNotFound {
	return &GetLogStreamNotFound{}
}

/*
GetLogStreamNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLogStreamNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get log stream not found response has a 2xx status code
func (o *GetLogStreamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log stream not found response has a 3xx status code
func (o *GetLogStreamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream not found response has a 4xx status code
func (o *GetLogStreamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get log stream not found response has a 5xx status code
func (o *GetLogStreamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get log stream not found response a status code equal to that given
func (o *GetLogStreamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get log stream not found response
func (o *GetLogStreamNotFound) Code() int {
	return 404
}

func (o *GetLogStreamNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamNotFound %s", 404, payload)
}

func (o *GetLogStreamNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamNotFound %s", 404, payload)
}

func (o *GetLogStreamNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLogStreamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogStreamInternalServerError creates a GetLogStreamInternalServerError with default headers values
func NewGetLogStreamInternalServerError() *GetLogStreamInternalServerError {
	return &GetLogStreamInternalServerError{}
}

/*
GetLogStreamInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetLogStreamInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get log stream internal server error response has a 2xx status code
func (o *GetLogStreamInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get log stream internal server error response has a 3xx status code
func (o *GetLogStreamInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get log stream internal server error response has a 4xx status code
func (o *GetLogStreamInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get log stream internal server error response has a 5xx status code
func (o *GetLogStreamInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get log stream internal server error response a status code equal to that given
func (o *GetLogStreamInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get log stream internal server error response
func (o *GetLogStreamInternalServerError) Code() int {
	return 500
}

func (o *GetLogStreamInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamInternalServerError %s", 500, payload)
}

func (o *GetLogStreamInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/log-streams/{log_stream_id}][%d] getLogStreamInternalServerError %s", 500, payload)
}

func (o *GetLogStreamInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLogStreamInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
