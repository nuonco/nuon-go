// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateAppActionReader is a Reader for the UpdateAppAction structure.
type UpdateAppActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAppActionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAppActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAppActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAppActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAppActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/apps/{app_id}/actions/{action_id}] UpdateAppAction", response, response.Code())
	}
}

// NewUpdateAppActionCreated creates a UpdateAppActionCreated with default headers values
func NewUpdateAppActionCreated() *UpdateAppActionCreated {
	return &UpdateAppActionCreated{}
}

/*
UpdateAppActionCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAppActionCreated struct {
	Payload *models.AppActionWorkflow
}

// IsSuccess returns true when this update app action created response has a 2xx status code
func (o *UpdateAppActionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update app action created response has a 3xx status code
func (o *UpdateAppActionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action created response has a 4xx status code
func (o *UpdateAppActionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app action created response has a 5xx status code
func (o *UpdateAppActionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update app action created response a status code equal to that given
func (o *UpdateAppActionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update app action created response
func (o *UpdateAppActionCreated) Code() int {
	return 201
}

func (o *UpdateAppActionCreated) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionCreated  %+v", 201, o.Payload)
}

func (o *UpdateAppActionCreated) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionCreated  %+v", 201, o.Payload)
}

func (o *UpdateAppActionCreated) GetPayload() *models.AppActionWorkflow {
	return o.Payload
}

func (o *UpdateAppActionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppActionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppActionBadRequest creates a UpdateAppActionBadRequest with default headers values
func NewUpdateAppActionBadRequest() *UpdateAppActionBadRequest {
	return &UpdateAppActionBadRequest{}
}

/*
UpdateAppActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAppActionBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app action bad request response has a 2xx status code
func (o *UpdateAppActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app action bad request response has a 3xx status code
func (o *UpdateAppActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action bad request response has a 4xx status code
func (o *UpdateAppActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app action bad request response has a 5xx status code
func (o *UpdateAppActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update app action bad request response a status code equal to that given
func (o *UpdateAppActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update app action bad request response
func (o *UpdateAppActionBadRequest) Code() int {
	return 400
}

func (o *UpdateAppActionBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppActionBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppActionBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppActionUnauthorized creates a UpdateAppActionUnauthorized with default headers values
func NewUpdateAppActionUnauthorized() *UpdateAppActionUnauthorized {
	return &UpdateAppActionUnauthorized{}
}

/*
UpdateAppActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAppActionUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app action unauthorized response has a 2xx status code
func (o *UpdateAppActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app action unauthorized response has a 3xx status code
func (o *UpdateAppActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action unauthorized response has a 4xx status code
func (o *UpdateAppActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app action unauthorized response has a 5xx status code
func (o *UpdateAppActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update app action unauthorized response a status code equal to that given
func (o *UpdateAppActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update app action unauthorized response
func (o *UpdateAppActionUnauthorized) Code() int {
	return 401
}

func (o *UpdateAppActionUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppActionUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppActionUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppActionForbidden creates a UpdateAppActionForbidden with default headers values
func NewUpdateAppActionForbidden() *UpdateAppActionForbidden {
	return &UpdateAppActionForbidden{}
}

/*
UpdateAppActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAppActionForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app action forbidden response has a 2xx status code
func (o *UpdateAppActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app action forbidden response has a 3xx status code
func (o *UpdateAppActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action forbidden response has a 4xx status code
func (o *UpdateAppActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app action forbidden response has a 5xx status code
func (o *UpdateAppActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update app action forbidden response a status code equal to that given
func (o *UpdateAppActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update app action forbidden response
func (o *UpdateAppActionForbidden) Code() int {
	return 403
}

func (o *UpdateAppActionForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppActionForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppActionForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppActionNotFound creates a UpdateAppActionNotFound with default headers values
func NewUpdateAppActionNotFound() *UpdateAppActionNotFound {
	return &UpdateAppActionNotFound{}
}

/*
UpdateAppActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAppActionNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app action not found response has a 2xx status code
func (o *UpdateAppActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app action not found response has a 3xx status code
func (o *UpdateAppActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action not found response has a 4xx status code
func (o *UpdateAppActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app action not found response has a 5xx status code
func (o *UpdateAppActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update app action not found response a status code equal to that given
func (o *UpdateAppActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update app action not found response
func (o *UpdateAppActionNotFound) Code() int {
	return 404
}

func (o *UpdateAppActionNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppActionNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppActionNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppActionInternalServerError creates a UpdateAppActionInternalServerError with default headers values
func NewUpdateAppActionInternalServerError() *UpdateAppActionInternalServerError {
	return &UpdateAppActionInternalServerError{}
}

/*
UpdateAppActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateAppActionInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app action internal server error response has a 2xx status code
func (o *UpdateAppActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app action internal server error response has a 3xx status code
func (o *UpdateAppActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app action internal server error response has a 4xx status code
func (o *UpdateAppActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app action internal server error response has a 5xx status code
func (o *UpdateAppActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update app action internal server error response a status code equal to that given
func (o *UpdateAppActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update app action internal server error response
func (o *UpdateAppActionInternalServerError) Code() int {
	return 500
}

func (o *UpdateAppActionInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppActionInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/actions/{action_id}][%d] updateAppActionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppActionInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
