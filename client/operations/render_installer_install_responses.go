// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// RenderInstallerInstallReader is a Reader for the RenderInstallerInstall structure.
type RenderInstallerInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenderInstallerInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRenderInstallerInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRenderInstallerInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRenderInstallerInstallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRenderInstallerInstallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRenderInstallerInstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRenderInstallerInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/installer/{installer_id}/install/{install_id}/render] RenderInstallerInstall", response, response.Code())
	}
}

// NewRenderInstallerInstallOK creates a RenderInstallerInstallOK with default headers values
func NewRenderInstallerInstallOK() *RenderInstallerInstallOK {
	return &RenderInstallerInstallOK{}
}

/*
RenderInstallerInstallOK describes a response with status code 200, with default header values.

OK
*/
type RenderInstallerInstallOK struct {
	Payload *models.ServiceRenderedInstall
}

// IsSuccess returns true when this render installer install o k response has a 2xx status code
func (o *RenderInstallerInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this render installer install o k response has a 3xx status code
func (o *RenderInstallerInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install o k response has a 4xx status code
func (o *RenderInstallerInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this render installer install o k response has a 5xx status code
func (o *RenderInstallerInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this render installer install o k response a status code equal to that given
func (o *RenderInstallerInstallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the render installer install o k response
func (o *RenderInstallerInstallOK) Code() int {
	return 200
}

func (o *RenderInstallerInstallOK) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallOK  %+v", 200, o.Payload)
}

func (o *RenderInstallerInstallOK) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallOK  %+v", 200, o.Payload)
}

func (o *RenderInstallerInstallOK) GetPayload() *models.ServiceRenderedInstall {
	return o.Payload
}

func (o *RenderInstallerInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceRenderedInstall)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderInstallerInstallBadRequest creates a RenderInstallerInstallBadRequest with default headers values
func NewRenderInstallerInstallBadRequest() *RenderInstallerInstallBadRequest {
	return &RenderInstallerInstallBadRequest{}
}

/*
RenderInstallerInstallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RenderInstallerInstallBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this render installer install bad request response has a 2xx status code
func (o *RenderInstallerInstallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render installer install bad request response has a 3xx status code
func (o *RenderInstallerInstallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install bad request response has a 4xx status code
func (o *RenderInstallerInstallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this render installer install bad request response has a 5xx status code
func (o *RenderInstallerInstallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this render installer install bad request response a status code equal to that given
func (o *RenderInstallerInstallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the render installer install bad request response
func (o *RenderInstallerInstallBadRequest) Code() int {
	return 400
}

func (o *RenderInstallerInstallBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallBadRequest  %+v", 400, o.Payload)
}

func (o *RenderInstallerInstallBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallBadRequest  %+v", 400, o.Payload)
}

func (o *RenderInstallerInstallBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RenderInstallerInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderInstallerInstallUnauthorized creates a RenderInstallerInstallUnauthorized with default headers values
func NewRenderInstallerInstallUnauthorized() *RenderInstallerInstallUnauthorized {
	return &RenderInstallerInstallUnauthorized{}
}

/*
RenderInstallerInstallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RenderInstallerInstallUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this render installer install unauthorized response has a 2xx status code
func (o *RenderInstallerInstallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render installer install unauthorized response has a 3xx status code
func (o *RenderInstallerInstallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install unauthorized response has a 4xx status code
func (o *RenderInstallerInstallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this render installer install unauthorized response has a 5xx status code
func (o *RenderInstallerInstallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this render installer install unauthorized response a status code equal to that given
func (o *RenderInstallerInstallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the render installer install unauthorized response
func (o *RenderInstallerInstallUnauthorized) Code() int {
	return 401
}

func (o *RenderInstallerInstallUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *RenderInstallerInstallUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *RenderInstallerInstallUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RenderInstallerInstallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderInstallerInstallForbidden creates a RenderInstallerInstallForbidden with default headers values
func NewRenderInstallerInstallForbidden() *RenderInstallerInstallForbidden {
	return &RenderInstallerInstallForbidden{}
}

/*
RenderInstallerInstallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RenderInstallerInstallForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this render installer install forbidden response has a 2xx status code
func (o *RenderInstallerInstallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render installer install forbidden response has a 3xx status code
func (o *RenderInstallerInstallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install forbidden response has a 4xx status code
func (o *RenderInstallerInstallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this render installer install forbidden response has a 5xx status code
func (o *RenderInstallerInstallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this render installer install forbidden response a status code equal to that given
func (o *RenderInstallerInstallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the render installer install forbidden response
func (o *RenderInstallerInstallForbidden) Code() int {
	return 403
}

func (o *RenderInstallerInstallForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallForbidden  %+v", 403, o.Payload)
}

func (o *RenderInstallerInstallForbidden) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallForbidden  %+v", 403, o.Payload)
}

func (o *RenderInstallerInstallForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RenderInstallerInstallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderInstallerInstallNotFound creates a RenderInstallerInstallNotFound with default headers values
func NewRenderInstallerInstallNotFound() *RenderInstallerInstallNotFound {
	return &RenderInstallerInstallNotFound{}
}

/*
RenderInstallerInstallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RenderInstallerInstallNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this render installer install not found response has a 2xx status code
func (o *RenderInstallerInstallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render installer install not found response has a 3xx status code
func (o *RenderInstallerInstallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install not found response has a 4xx status code
func (o *RenderInstallerInstallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this render installer install not found response has a 5xx status code
func (o *RenderInstallerInstallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this render installer install not found response a status code equal to that given
func (o *RenderInstallerInstallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the render installer install not found response
func (o *RenderInstallerInstallNotFound) Code() int {
	return 404
}

func (o *RenderInstallerInstallNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallNotFound  %+v", 404, o.Payload)
}

func (o *RenderInstallerInstallNotFound) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallNotFound  %+v", 404, o.Payload)
}

func (o *RenderInstallerInstallNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RenderInstallerInstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRenderInstallerInstallInternalServerError creates a RenderInstallerInstallInternalServerError with default headers values
func NewRenderInstallerInstallInternalServerError() *RenderInstallerInstallInternalServerError {
	return &RenderInstallerInstallInternalServerError{}
}

/*
RenderInstallerInstallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RenderInstallerInstallInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this render installer install internal server error response has a 2xx status code
func (o *RenderInstallerInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this render installer install internal server error response has a 3xx status code
func (o *RenderInstallerInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this render installer install internal server error response has a 4xx status code
func (o *RenderInstallerInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this render installer install internal server error response has a 5xx status code
func (o *RenderInstallerInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this render installer install internal server error response a status code equal to that given
func (o *RenderInstallerInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the render installer install internal server error response
func (o *RenderInstallerInstallInternalServerError) Code() int {
	return 500
}

func (o *RenderInstallerInstallInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *RenderInstallerInstallInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/installer/{installer_id}/install/{install_id}/render][%d] renderInstallerInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *RenderInstallerInstallInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RenderInstallerInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
