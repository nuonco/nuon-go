// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetWorkflowsReader is a Reader for the GetWorkflows structure.
type GetWorkflowsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWorkflowsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWorkflowsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkflowsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkflowsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWorkflowsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/installs/{install_id}/workflows] GetWorkflows", response, response.Code())
	}
}

// NewGetWorkflowsOK creates a GetWorkflowsOK with default headers values
func NewGetWorkflowsOK() *GetWorkflowsOK {
	return &GetWorkflowsOK{}
}

/*
GetWorkflowsOK describes a response with status code 200, with default header values.

OK
*/
type GetWorkflowsOK struct {
	Payload []*models.AppWorkflow
}

// IsSuccess returns true when this get workflows o k response has a 2xx status code
func (o *GetWorkflowsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workflows o k response has a 3xx status code
func (o *GetWorkflowsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows o k response has a 4xx status code
func (o *GetWorkflowsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflows o k response has a 5xx status code
func (o *GetWorkflowsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows o k response a status code equal to that given
func (o *GetWorkflowsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workflows o k response
func (o *GetWorkflowsOK) Code() int {
	return 200
}

func (o *GetWorkflowsOK) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowsOK) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowsOK) GetPayload() []*models.AppWorkflow {
	return o.Payload
}

func (o *GetWorkflowsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsBadRequest creates a GetWorkflowsBadRequest with default headers values
func NewGetWorkflowsBadRequest() *GetWorkflowsBadRequest {
	return &GetWorkflowsBadRequest{}
}

/*
GetWorkflowsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetWorkflowsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get workflows bad request response has a 2xx status code
func (o *GetWorkflowsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows bad request response has a 3xx status code
func (o *GetWorkflowsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows bad request response has a 4xx status code
func (o *GetWorkflowsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows bad request response has a 5xx status code
func (o *GetWorkflowsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows bad request response a status code equal to that given
func (o *GetWorkflowsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get workflows bad request response
func (o *GetWorkflowsBadRequest) Code() int {
	return 400
}

func (o *GetWorkflowsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWorkflowsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsBadRequest  %+v", 400, o.Payload)
}

func (o *GetWorkflowsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetWorkflowsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsUnauthorized creates a GetWorkflowsUnauthorized with default headers values
func NewGetWorkflowsUnauthorized() *GetWorkflowsUnauthorized {
	return &GetWorkflowsUnauthorized{}
}

/*
GetWorkflowsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkflowsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get workflows unauthorized response has a 2xx status code
func (o *GetWorkflowsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows unauthorized response has a 3xx status code
func (o *GetWorkflowsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows unauthorized response has a 4xx status code
func (o *GetWorkflowsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows unauthorized response has a 5xx status code
func (o *GetWorkflowsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows unauthorized response a status code equal to that given
func (o *GetWorkflowsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workflows unauthorized response
func (o *GetWorkflowsUnauthorized) Code() int {
	return 401
}

func (o *GetWorkflowsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkflowsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWorkflowsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetWorkflowsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsForbidden creates a GetWorkflowsForbidden with default headers values
func NewGetWorkflowsForbidden() *GetWorkflowsForbidden {
	return &GetWorkflowsForbidden{}
}

/*
GetWorkflowsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkflowsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get workflows forbidden response has a 2xx status code
func (o *GetWorkflowsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows forbidden response has a 3xx status code
func (o *GetWorkflowsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows forbidden response has a 4xx status code
func (o *GetWorkflowsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows forbidden response has a 5xx status code
func (o *GetWorkflowsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows forbidden response a status code equal to that given
func (o *GetWorkflowsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workflows forbidden response
func (o *GetWorkflowsForbidden) Code() int {
	return 403
}

func (o *GetWorkflowsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkflowsForbidden) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsForbidden  %+v", 403, o.Payload)
}

func (o *GetWorkflowsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetWorkflowsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsNotFound creates a GetWorkflowsNotFound with default headers values
func NewGetWorkflowsNotFound() *GetWorkflowsNotFound {
	return &GetWorkflowsNotFound{}
}

/*
GetWorkflowsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetWorkflowsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get workflows not found response has a 2xx status code
func (o *GetWorkflowsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows not found response has a 3xx status code
func (o *GetWorkflowsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows not found response has a 4xx status code
func (o *GetWorkflowsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workflows not found response has a 5xx status code
func (o *GetWorkflowsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workflows not found response a status code equal to that given
func (o *GetWorkflowsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workflows not found response
func (o *GetWorkflowsNotFound) Code() int {
	return 404
}

func (o *GetWorkflowsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkflowsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsNotFound  %+v", 404, o.Payload)
}

func (o *GetWorkflowsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetWorkflowsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowsInternalServerError creates a GetWorkflowsInternalServerError with default headers values
func NewGetWorkflowsInternalServerError() *GetWorkflowsInternalServerError {
	return &GetWorkflowsInternalServerError{}
}

/*
GetWorkflowsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetWorkflowsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get workflows internal server error response has a 2xx status code
func (o *GetWorkflowsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workflows internal server error response has a 3xx status code
func (o *GetWorkflowsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workflows internal server error response has a 4xx status code
func (o *GetWorkflowsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workflows internal server error response has a 5xx status code
func (o *GetWorkflowsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get workflows internal server error response a status code equal to that given
func (o *GetWorkflowsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get workflows internal server error response
func (o *GetWorkflowsInternalServerError) Code() int {
	return 500
}

func (o *GetWorkflowsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkflowsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/installs/{install_id}/workflows][%d] getWorkflowsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetWorkflowsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetWorkflowsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
