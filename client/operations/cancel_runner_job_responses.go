// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// CancelRunnerJobReader is a Reader for the CancelRunnerJob structure.
type CancelRunnerJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelRunnerJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCancelRunnerJobAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelRunnerJobBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelRunnerJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelRunnerJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelRunnerJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelRunnerJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/runner-jobs/{runner_job_id}/cancel] CancelRunnerJob", response, response.Code())
	}
}

// NewCancelRunnerJobAccepted creates a CancelRunnerJobAccepted with default headers values
func NewCancelRunnerJobAccepted() *CancelRunnerJobAccepted {
	return &CancelRunnerJobAccepted{}
}

/*
CancelRunnerJobAccepted describes a response with status code 202, with default header values.

Accepted
*/
type CancelRunnerJobAccepted struct {
	Payload *models.AppRunnerJob
}

// IsSuccess returns true when this cancel runner job accepted response has a 2xx status code
func (o *CancelRunnerJobAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel runner job accepted response has a 3xx status code
func (o *CancelRunnerJobAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job accepted response has a 4xx status code
func (o *CancelRunnerJobAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel runner job accepted response has a 5xx status code
func (o *CancelRunnerJobAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel runner job accepted response a status code equal to that given
func (o *CancelRunnerJobAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the cancel runner job accepted response
func (o *CancelRunnerJobAccepted) Code() int {
	return 202
}

func (o *CancelRunnerJobAccepted) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobAccepted  %+v", 202, o.Payload)
}

func (o *CancelRunnerJobAccepted) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobAccepted  %+v", 202, o.Payload)
}

func (o *CancelRunnerJobAccepted) GetPayload() *models.AppRunnerJob {
	return o.Payload
}

func (o *CancelRunnerJobAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRunnerJob)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRunnerJobBadRequest creates a CancelRunnerJobBadRequest with default headers values
func NewCancelRunnerJobBadRequest() *CancelRunnerJobBadRequest {
	return &CancelRunnerJobBadRequest{}
}

/*
CancelRunnerJobBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelRunnerJobBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel runner job bad request response has a 2xx status code
func (o *CancelRunnerJobBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel runner job bad request response has a 3xx status code
func (o *CancelRunnerJobBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job bad request response has a 4xx status code
func (o *CancelRunnerJobBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel runner job bad request response has a 5xx status code
func (o *CancelRunnerJobBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel runner job bad request response a status code equal to that given
func (o *CancelRunnerJobBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel runner job bad request response
func (o *CancelRunnerJobBadRequest) Code() int {
	return 400
}

func (o *CancelRunnerJobBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobBadRequest  %+v", 400, o.Payload)
}

func (o *CancelRunnerJobBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobBadRequest  %+v", 400, o.Payload)
}

func (o *CancelRunnerJobBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelRunnerJobBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRunnerJobUnauthorized creates a CancelRunnerJobUnauthorized with default headers values
func NewCancelRunnerJobUnauthorized() *CancelRunnerJobUnauthorized {
	return &CancelRunnerJobUnauthorized{}
}

/*
CancelRunnerJobUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelRunnerJobUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel runner job unauthorized response has a 2xx status code
func (o *CancelRunnerJobUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel runner job unauthorized response has a 3xx status code
func (o *CancelRunnerJobUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job unauthorized response has a 4xx status code
func (o *CancelRunnerJobUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel runner job unauthorized response has a 5xx status code
func (o *CancelRunnerJobUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel runner job unauthorized response a status code equal to that given
func (o *CancelRunnerJobUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cancel runner job unauthorized response
func (o *CancelRunnerJobUnauthorized) Code() int {
	return 401
}

func (o *CancelRunnerJobUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelRunnerJobUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelRunnerJobUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelRunnerJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRunnerJobForbidden creates a CancelRunnerJobForbidden with default headers values
func NewCancelRunnerJobForbidden() *CancelRunnerJobForbidden {
	return &CancelRunnerJobForbidden{}
}

/*
CancelRunnerJobForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelRunnerJobForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel runner job forbidden response has a 2xx status code
func (o *CancelRunnerJobForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel runner job forbidden response has a 3xx status code
func (o *CancelRunnerJobForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job forbidden response has a 4xx status code
func (o *CancelRunnerJobForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel runner job forbidden response has a 5xx status code
func (o *CancelRunnerJobForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel runner job forbidden response a status code equal to that given
func (o *CancelRunnerJobForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel runner job forbidden response
func (o *CancelRunnerJobForbidden) Code() int {
	return 403
}

func (o *CancelRunnerJobForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobForbidden  %+v", 403, o.Payload)
}

func (o *CancelRunnerJobForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobForbidden  %+v", 403, o.Payload)
}

func (o *CancelRunnerJobForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelRunnerJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRunnerJobNotFound creates a CancelRunnerJobNotFound with default headers values
func NewCancelRunnerJobNotFound() *CancelRunnerJobNotFound {
	return &CancelRunnerJobNotFound{}
}

/*
CancelRunnerJobNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelRunnerJobNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel runner job not found response has a 2xx status code
func (o *CancelRunnerJobNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel runner job not found response has a 3xx status code
func (o *CancelRunnerJobNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job not found response has a 4xx status code
func (o *CancelRunnerJobNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel runner job not found response has a 5xx status code
func (o *CancelRunnerJobNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel runner job not found response a status code equal to that given
func (o *CancelRunnerJobNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel runner job not found response
func (o *CancelRunnerJobNotFound) Code() int {
	return 404
}

func (o *CancelRunnerJobNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobNotFound  %+v", 404, o.Payload)
}

func (o *CancelRunnerJobNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobNotFound  %+v", 404, o.Payload)
}

func (o *CancelRunnerJobNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelRunnerJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelRunnerJobInternalServerError creates a CancelRunnerJobInternalServerError with default headers values
func NewCancelRunnerJobInternalServerError() *CancelRunnerJobInternalServerError {
	return &CancelRunnerJobInternalServerError{}
}

/*
CancelRunnerJobInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CancelRunnerJobInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel runner job internal server error response has a 2xx status code
func (o *CancelRunnerJobInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel runner job internal server error response has a 3xx status code
func (o *CancelRunnerJobInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel runner job internal server error response has a 4xx status code
func (o *CancelRunnerJobInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel runner job internal server error response has a 5xx status code
func (o *CancelRunnerJobInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel runner job internal server error response a status code equal to that given
func (o *CancelRunnerJobInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cancel runner job internal server error response
func (o *CancelRunnerJobInternalServerError) Code() int {
	return 500
}

func (o *CancelRunnerJobInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelRunnerJobInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/runner-jobs/{runner_job_id}/cancel][%d] cancelRunnerJobInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelRunnerJobInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelRunnerJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
