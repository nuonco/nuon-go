// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// PatchV1ComponentsComponentIDReader is a Reader for the PatchV1ComponentsComponentID structure.
type PatchV1ComponentsComponentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1ComponentsComponentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchV1ComponentsComponentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchV1ComponentsComponentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchV1ComponentsComponentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchV1ComponentsComponentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchV1ComponentsComponentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchV1ComponentsComponentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/components/{component_id}] PatchV1ComponentsComponentID", response, response.Code())
	}
}

// NewPatchV1ComponentsComponentIDOK creates a PatchV1ComponentsComponentIDOK with default headers values
func NewPatchV1ComponentsComponentIDOK() *PatchV1ComponentsComponentIDOK {
	return &PatchV1ComponentsComponentIDOK{}
}

/*
PatchV1ComponentsComponentIDOK describes a response with status code 200, with default header values.

OK
*/
type PatchV1ComponentsComponentIDOK struct {
	Payload *models.AppComponent
}

// IsSuccess returns true when this patch v1 components component Id o k response has a 2xx status code
func (o *PatchV1ComponentsComponentIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 components component Id o k response has a 3xx status code
func (o *PatchV1ComponentsComponentIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id o k response has a 4xx status code
func (o *PatchV1ComponentsComponentIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 components component Id o k response has a 5xx status code
func (o *PatchV1ComponentsComponentIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 components component Id o k response a status code equal to that given
func (o *PatchV1ComponentsComponentIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch v1 components component Id o k response
func (o *PatchV1ComponentsComponentIDOK) Code() int {
	return 200
}

func (o *PatchV1ComponentsComponentIDOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdOK  %+v", 200, o.Payload)
}

func (o *PatchV1ComponentsComponentIDOK) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdOK  %+v", 200, o.Payload)
}

func (o *PatchV1ComponentsComponentIDOK) GetPayload() *models.AppComponent {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1ComponentsComponentIDBadRequest creates a PatchV1ComponentsComponentIDBadRequest with default headers values
func NewPatchV1ComponentsComponentIDBadRequest() *PatchV1ComponentsComponentIDBadRequest {
	return &PatchV1ComponentsComponentIDBadRequest{}
}

/*
PatchV1ComponentsComponentIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchV1ComponentsComponentIDBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 components component Id bad request response has a 2xx status code
func (o *PatchV1ComponentsComponentIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 components component Id bad request response has a 3xx status code
func (o *PatchV1ComponentsComponentIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id bad request response has a 4xx status code
func (o *PatchV1ComponentsComponentIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 components component Id bad request response has a 5xx status code
func (o *PatchV1ComponentsComponentIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 components component Id bad request response a status code equal to that given
func (o *PatchV1ComponentsComponentIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch v1 components component Id bad request response
func (o *PatchV1ComponentsComponentIDBadRequest) Code() int {
	return 400
}

func (o *PatchV1ComponentsComponentIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1ComponentsComponentIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1ComponentsComponentIDBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1ComponentsComponentIDUnauthorized creates a PatchV1ComponentsComponentIDUnauthorized with default headers values
func NewPatchV1ComponentsComponentIDUnauthorized() *PatchV1ComponentsComponentIDUnauthorized {
	return &PatchV1ComponentsComponentIDUnauthorized{}
}

/*
PatchV1ComponentsComponentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchV1ComponentsComponentIDUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 components component Id unauthorized response has a 2xx status code
func (o *PatchV1ComponentsComponentIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 components component Id unauthorized response has a 3xx status code
func (o *PatchV1ComponentsComponentIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id unauthorized response has a 4xx status code
func (o *PatchV1ComponentsComponentIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 components component Id unauthorized response has a 5xx status code
func (o *PatchV1ComponentsComponentIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 components component Id unauthorized response a status code equal to that given
func (o *PatchV1ComponentsComponentIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch v1 components component Id unauthorized response
func (o *PatchV1ComponentsComponentIDUnauthorized) Code() int {
	return 401
}

func (o *PatchV1ComponentsComponentIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchV1ComponentsComponentIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchV1ComponentsComponentIDUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1ComponentsComponentIDForbidden creates a PatchV1ComponentsComponentIDForbidden with default headers values
func NewPatchV1ComponentsComponentIDForbidden() *PatchV1ComponentsComponentIDForbidden {
	return &PatchV1ComponentsComponentIDForbidden{}
}

/*
PatchV1ComponentsComponentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchV1ComponentsComponentIDForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 components component Id forbidden response has a 2xx status code
func (o *PatchV1ComponentsComponentIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 components component Id forbidden response has a 3xx status code
func (o *PatchV1ComponentsComponentIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id forbidden response has a 4xx status code
func (o *PatchV1ComponentsComponentIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 components component Id forbidden response has a 5xx status code
func (o *PatchV1ComponentsComponentIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 components component Id forbidden response a status code equal to that given
func (o *PatchV1ComponentsComponentIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch v1 components component Id forbidden response
func (o *PatchV1ComponentsComponentIDForbidden) Code() int {
	return 403
}

func (o *PatchV1ComponentsComponentIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1ComponentsComponentIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1ComponentsComponentIDForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1ComponentsComponentIDNotFound creates a PatchV1ComponentsComponentIDNotFound with default headers values
func NewPatchV1ComponentsComponentIDNotFound() *PatchV1ComponentsComponentIDNotFound {
	return &PatchV1ComponentsComponentIDNotFound{}
}

/*
PatchV1ComponentsComponentIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchV1ComponentsComponentIDNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 components component Id not found response has a 2xx status code
func (o *PatchV1ComponentsComponentIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 components component Id not found response has a 3xx status code
func (o *PatchV1ComponentsComponentIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id not found response has a 4xx status code
func (o *PatchV1ComponentsComponentIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 components component Id not found response has a 5xx status code
func (o *PatchV1ComponentsComponentIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 components component Id not found response a status code equal to that given
func (o *PatchV1ComponentsComponentIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch v1 components component Id not found response
func (o *PatchV1ComponentsComponentIDNotFound) Code() int {
	return 404
}

func (o *PatchV1ComponentsComponentIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1ComponentsComponentIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1ComponentsComponentIDNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1ComponentsComponentIDInternalServerError creates a PatchV1ComponentsComponentIDInternalServerError with default headers values
func NewPatchV1ComponentsComponentIDInternalServerError() *PatchV1ComponentsComponentIDInternalServerError {
	return &PatchV1ComponentsComponentIDInternalServerError{}
}

/*
PatchV1ComponentsComponentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchV1ComponentsComponentIDInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 components component Id internal server error response has a 2xx status code
func (o *PatchV1ComponentsComponentIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 components component Id internal server error response has a 3xx status code
func (o *PatchV1ComponentsComponentIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 components component Id internal server error response has a 4xx status code
func (o *PatchV1ComponentsComponentIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 components component Id internal server error response has a 5xx status code
func (o *PatchV1ComponentsComponentIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch v1 components component Id internal server error response a status code equal to that given
func (o *PatchV1ComponentsComponentIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch v1 components component Id internal server error response
func (o *PatchV1ComponentsComponentIDInternalServerError) Code() int {
	return 500
}

func (o *PatchV1ComponentsComponentIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchV1ComponentsComponentIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] patchV1ComponentsComponentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchV1ComponentsComponentIDInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1ComponentsComponentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
