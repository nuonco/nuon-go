// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetRunnerConnectStatusReader is a Reader for the GetRunnerConnectStatus structure.
type GetRunnerConnectStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunnerConnectStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunnerConnectStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRunnerConnectStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRunnerConnectStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRunnerConnectStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRunnerConnectStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRunnerConnectStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/runners/{runner_id}/connected] GetRunnerConnectStatus", response, response.Code())
	}
}

// NewGetRunnerConnectStatusOK creates a GetRunnerConnectStatusOK with default headers values
func NewGetRunnerConnectStatusOK() *GetRunnerConnectStatusOK {
	return &GetRunnerConnectStatusOK{}
}

/*
GetRunnerConnectStatusOK describes a response with status code 200, with default header values.

OK
*/
type GetRunnerConnectStatusOK struct {
	Payload *models.ServiceRunnerConnectionStatus
}

// IsSuccess returns true when this get runner connect status o k response has a 2xx status code
func (o *GetRunnerConnectStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get runner connect status o k response has a 3xx status code
func (o *GetRunnerConnectStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status o k response has a 4xx status code
func (o *GetRunnerConnectStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runner connect status o k response has a 5xx status code
func (o *GetRunnerConnectStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner connect status o k response a status code equal to that given
func (o *GetRunnerConnectStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get runner connect status o k response
func (o *GetRunnerConnectStatusOK) Code() int {
	return 200
}

func (o *GetRunnerConnectStatusOK) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusOK  %+v", 200, o.Payload)
}

func (o *GetRunnerConnectStatusOK) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusOK  %+v", 200, o.Payload)
}

func (o *GetRunnerConnectStatusOK) GetPayload() *models.ServiceRunnerConnectionStatus {
	return o.Payload
}

func (o *GetRunnerConnectStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceRunnerConnectionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerConnectStatusBadRequest creates a GetRunnerConnectStatusBadRequest with default headers values
func NewGetRunnerConnectStatusBadRequest() *GetRunnerConnectStatusBadRequest {
	return &GetRunnerConnectStatusBadRequest{}
}

/*
GetRunnerConnectStatusBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRunnerConnectStatusBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner connect status bad request response has a 2xx status code
func (o *GetRunnerConnectStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner connect status bad request response has a 3xx status code
func (o *GetRunnerConnectStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status bad request response has a 4xx status code
func (o *GetRunnerConnectStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner connect status bad request response has a 5xx status code
func (o *GetRunnerConnectStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner connect status bad request response a status code equal to that given
func (o *GetRunnerConnectStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get runner connect status bad request response
func (o *GetRunnerConnectStatusBadRequest) Code() int {
	return 400
}

func (o *GetRunnerConnectStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetRunnerConnectStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetRunnerConnectStatusBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerConnectStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerConnectStatusUnauthorized creates a GetRunnerConnectStatusUnauthorized with default headers values
func NewGetRunnerConnectStatusUnauthorized() *GetRunnerConnectStatusUnauthorized {
	return &GetRunnerConnectStatusUnauthorized{}
}

/*
GetRunnerConnectStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRunnerConnectStatusUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner connect status unauthorized response has a 2xx status code
func (o *GetRunnerConnectStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner connect status unauthorized response has a 3xx status code
func (o *GetRunnerConnectStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status unauthorized response has a 4xx status code
func (o *GetRunnerConnectStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner connect status unauthorized response has a 5xx status code
func (o *GetRunnerConnectStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner connect status unauthorized response a status code equal to that given
func (o *GetRunnerConnectStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get runner connect status unauthorized response
func (o *GetRunnerConnectStatusUnauthorized) Code() int {
	return 401
}

func (o *GetRunnerConnectStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRunnerConnectStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRunnerConnectStatusUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerConnectStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerConnectStatusForbidden creates a GetRunnerConnectStatusForbidden with default headers values
func NewGetRunnerConnectStatusForbidden() *GetRunnerConnectStatusForbidden {
	return &GetRunnerConnectStatusForbidden{}
}

/*
GetRunnerConnectStatusForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRunnerConnectStatusForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner connect status forbidden response has a 2xx status code
func (o *GetRunnerConnectStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner connect status forbidden response has a 3xx status code
func (o *GetRunnerConnectStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status forbidden response has a 4xx status code
func (o *GetRunnerConnectStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner connect status forbidden response has a 5xx status code
func (o *GetRunnerConnectStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner connect status forbidden response a status code equal to that given
func (o *GetRunnerConnectStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get runner connect status forbidden response
func (o *GetRunnerConnectStatusForbidden) Code() int {
	return 403
}

func (o *GetRunnerConnectStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetRunnerConnectStatusForbidden) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetRunnerConnectStatusForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerConnectStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerConnectStatusNotFound creates a GetRunnerConnectStatusNotFound with default headers values
func NewGetRunnerConnectStatusNotFound() *GetRunnerConnectStatusNotFound {
	return &GetRunnerConnectStatusNotFound{}
}

/*
GetRunnerConnectStatusNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRunnerConnectStatusNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner connect status not found response has a 2xx status code
func (o *GetRunnerConnectStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner connect status not found response has a 3xx status code
func (o *GetRunnerConnectStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status not found response has a 4xx status code
func (o *GetRunnerConnectStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner connect status not found response has a 5xx status code
func (o *GetRunnerConnectStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner connect status not found response a status code equal to that given
func (o *GetRunnerConnectStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get runner connect status not found response
func (o *GetRunnerConnectStatusNotFound) Code() int {
	return 404
}

func (o *GetRunnerConnectStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetRunnerConnectStatusNotFound) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetRunnerConnectStatusNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerConnectStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerConnectStatusInternalServerError creates a GetRunnerConnectStatusInternalServerError with default headers values
func NewGetRunnerConnectStatusInternalServerError() *GetRunnerConnectStatusInternalServerError {
	return &GetRunnerConnectStatusInternalServerError{}
}

/*
GetRunnerConnectStatusInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRunnerConnectStatusInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner connect status internal server error response has a 2xx status code
func (o *GetRunnerConnectStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner connect status internal server error response has a 3xx status code
func (o *GetRunnerConnectStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner connect status internal server error response has a 4xx status code
func (o *GetRunnerConnectStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runner connect status internal server error response has a 5xx status code
func (o *GetRunnerConnectStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get runner connect status internal server error response a status code equal to that given
func (o *GetRunnerConnectStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get runner connect status internal server error response
func (o *GetRunnerConnectStatusInternalServerError) Code() int {
	return 500
}

func (o *GetRunnerConnectStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRunnerConnectStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/connected][%d] getRunnerConnectStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRunnerConnectStatusInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerConnectStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
