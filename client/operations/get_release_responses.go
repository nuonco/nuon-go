// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetReleaseReader is a Reader for the GetRelease structure.
type GetReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReleaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/releases/{release_id}] GetRelease", response, response.Code())
	}
}

// NewGetReleaseOK creates a GetReleaseOK with default headers values
func NewGetReleaseOK() *GetReleaseOK {
	return &GetReleaseOK{}
}

/*
GetReleaseOK describes a response with status code 200, with default header values.

OK
*/
type GetReleaseOK struct {
	Payload *models.AppComponentRelease
}

// IsSuccess returns true when this get release o k response has a 2xx status code
func (o *GetReleaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get release o k response has a 3xx status code
func (o *GetReleaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release o k response has a 4xx status code
func (o *GetReleaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release o k response has a 5xx status code
func (o *GetReleaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get release o k response a status code equal to that given
func (o *GetReleaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get release o k response
func (o *GetReleaseOK) Code() int {
	return 200
}

func (o *GetReleaseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseOK %s", 200, payload)
}

func (o *GetReleaseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseOK %s", 200, payload)
}

func (o *GetReleaseOK) GetPayload() *models.AppComponentRelease {
	return o.Payload
}

func (o *GetReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponentRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseBadRequest creates a GetReleaseBadRequest with default headers values
func NewGetReleaseBadRequest() *GetReleaseBadRequest {
	return &GetReleaseBadRequest{}
}

/*
GetReleaseBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetReleaseBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get release bad request response has a 2xx status code
func (o *GetReleaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release bad request response has a 3xx status code
func (o *GetReleaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release bad request response has a 4xx status code
func (o *GetReleaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release bad request response has a 5xx status code
func (o *GetReleaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get release bad request response a status code equal to that given
func (o *GetReleaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get release bad request response
func (o *GetReleaseBadRequest) Code() int {
	return 400
}

func (o *GetReleaseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseBadRequest %s", 400, payload)
}

func (o *GetReleaseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseBadRequest %s", 400, payload)
}

func (o *GetReleaseBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseUnauthorized creates a GetReleaseUnauthorized with default headers values
func NewGetReleaseUnauthorized() *GetReleaseUnauthorized {
	return &GetReleaseUnauthorized{}
}

/*
GetReleaseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetReleaseUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get release unauthorized response has a 2xx status code
func (o *GetReleaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release unauthorized response has a 3xx status code
func (o *GetReleaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release unauthorized response has a 4xx status code
func (o *GetReleaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release unauthorized response has a 5xx status code
func (o *GetReleaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get release unauthorized response a status code equal to that given
func (o *GetReleaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get release unauthorized response
func (o *GetReleaseUnauthorized) Code() int {
	return 401
}

func (o *GetReleaseUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseUnauthorized %s", 401, payload)
}

func (o *GetReleaseUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseUnauthorized %s", 401, payload)
}

func (o *GetReleaseUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseForbidden creates a GetReleaseForbidden with default headers values
func NewGetReleaseForbidden() *GetReleaseForbidden {
	return &GetReleaseForbidden{}
}

/*
GetReleaseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetReleaseForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get release forbidden response has a 2xx status code
func (o *GetReleaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release forbidden response has a 3xx status code
func (o *GetReleaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release forbidden response has a 4xx status code
func (o *GetReleaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release forbidden response has a 5xx status code
func (o *GetReleaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get release forbidden response a status code equal to that given
func (o *GetReleaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get release forbidden response
func (o *GetReleaseForbidden) Code() int {
	return 403
}

func (o *GetReleaseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseForbidden %s", 403, payload)
}

func (o *GetReleaseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseForbidden %s", 403, payload)
}

func (o *GetReleaseForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetReleaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseNotFound creates a GetReleaseNotFound with default headers values
func NewGetReleaseNotFound() *GetReleaseNotFound {
	return &GetReleaseNotFound{}
}

/*
GetReleaseNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetReleaseNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get release not found response has a 2xx status code
func (o *GetReleaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release not found response has a 3xx status code
func (o *GetReleaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release not found response has a 4xx status code
func (o *GetReleaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get release not found response has a 5xx status code
func (o *GetReleaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get release not found response a status code equal to that given
func (o *GetReleaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get release not found response
func (o *GetReleaseNotFound) Code() int {
	return 404
}

func (o *GetReleaseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseNotFound %s", 404, payload)
}

func (o *GetReleaseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseNotFound %s", 404, payload)
}

func (o *GetReleaseNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReleaseInternalServerError creates a GetReleaseInternalServerError with default headers values
func NewGetReleaseInternalServerError() *GetReleaseInternalServerError {
	return &GetReleaseInternalServerError{}
}

/*
GetReleaseInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetReleaseInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get release internal server error response has a 2xx status code
func (o *GetReleaseInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get release internal server error response has a 3xx status code
func (o *GetReleaseInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get release internal server error response has a 4xx status code
func (o *GetReleaseInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get release internal server error response has a 5xx status code
func (o *GetReleaseInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get release internal server error response a status code equal to that given
func (o *GetReleaseInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get release internal server error response
func (o *GetReleaseInternalServerError) Code() int {
	return 500
}

func (o *GetReleaseInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseInternalServerError %s", 500, payload)
}

func (o *GetReleaseInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/releases/{release_id}][%d] getReleaseInternalServerError %s", 500, payload)
}

func (o *GetReleaseInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
