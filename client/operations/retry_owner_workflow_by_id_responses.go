// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// RetryOwnerWorkflowByIDReader is a Reader for the RetryOwnerWorkflowByID structure.
type RetryOwnerWorkflowByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryOwnerWorkflowByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRetryOwnerWorkflowByIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetryOwnerWorkflowByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRetryOwnerWorkflowByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetryOwnerWorkflowByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetryOwnerWorkflowByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetryOwnerWorkflowByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/workflows/{workflow_id}/retry] RetryOwnerWorkflowByID", response, response.Code())
	}
}

// NewRetryOwnerWorkflowByIDCreated creates a RetryOwnerWorkflowByIDCreated with default headers values
func NewRetryOwnerWorkflowByIDCreated() *RetryOwnerWorkflowByIDCreated {
	return &RetryOwnerWorkflowByIDCreated{}
}

/*
RetryOwnerWorkflowByIDCreated describes a response with status code 201, with default header values.

Created
*/
type RetryOwnerWorkflowByIDCreated struct {
	Payload *models.ServiceRetryWorkflowByIDResponse
}

// IsSuccess returns true when this retry owner workflow by Id created response has a 2xx status code
func (o *RetryOwnerWorkflowByIDCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry owner workflow by Id created response has a 3xx status code
func (o *RetryOwnerWorkflowByIDCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id created response has a 4xx status code
func (o *RetryOwnerWorkflowByIDCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry owner workflow by Id created response has a 5xx status code
func (o *RetryOwnerWorkflowByIDCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this retry owner workflow by Id created response a status code equal to that given
func (o *RetryOwnerWorkflowByIDCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the retry owner workflow by Id created response
func (o *RetryOwnerWorkflowByIDCreated) Code() int {
	return 201
}

func (o *RetryOwnerWorkflowByIDCreated) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdCreated  %+v", 201, o.Payload)
}

func (o *RetryOwnerWorkflowByIDCreated) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdCreated  %+v", 201, o.Payload)
}

func (o *RetryOwnerWorkflowByIDCreated) GetPayload() *models.ServiceRetryWorkflowByIDResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceRetryWorkflowByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryOwnerWorkflowByIDBadRequest creates a RetryOwnerWorkflowByIDBadRequest with default headers values
func NewRetryOwnerWorkflowByIDBadRequest() *RetryOwnerWorkflowByIDBadRequest {
	return &RetryOwnerWorkflowByIDBadRequest{}
}

/*
RetryOwnerWorkflowByIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetryOwnerWorkflowByIDBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry owner workflow by Id bad request response has a 2xx status code
func (o *RetryOwnerWorkflowByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry owner workflow by Id bad request response has a 3xx status code
func (o *RetryOwnerWorkflowByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id bad request response has a 4xx status code
func (o *RetryOwnerWorkflowByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry owner workflow by Id bad request response has a 5xx status code
func (o *RetryOwnerWorkflowByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry owner workflow by Id bad request response a status code equal to that given
func (o *RetryOwnerWorkflowByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the retry owner workflow by Id bad request response
func (o *RetryOwnerWorkflowByIDBadRequest) Code() int {
	return 400
}

func (o *RetryOwnerWorkflowByIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdBadRequest  %+v", 400, o.Payload)
}

func (o *RetryOwnerWorkflowByIDBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdBadRequest  %+v", 400, o.Payload)
}

func (o *RetryOwnerWorkflowByIDBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryOwnerWorkflowByIDUnauthorized creates a RetryOwnerWorkflowByIDUnauthorized with default headers values
func NewRetryOwnerWorkflowByIDUnauthorized() *RetryOwnerWorkflowByIDUnauthorized {
	return &RetryOwnerWorkflowByIDUnauthorized{}
}

/*
RetryOwnerWorkflowByIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RetryOwnerWorkflowByIDUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry owner workflow by Id unauthorized response has a 2xx status code
func (o *RetryOwnerWorkflowByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry owner workflow by Id unauthorized response has a 3xx status code
func (o *RetryOwnerWorkflowByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id unauthorized response has a 4xx status code
func (o *RetryOwnerWorkflowByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry owner workflow by Id unauthorized response has a 5xx status code
func (o *RetryOwnerWorkflowByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this retry owner workflow by Id unauthorized response a status code equal to that given
func (o *RetryOwnerWorkflowByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the retry owner workflow by Id unauthorized response
func (o *RetryOwnerWorkflowByIDUnauthorized) Code() int {
	return 401
}

func (o *RetryOwnerWorkflowByIDUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryOwnerWorkflowByIDUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryOwnerWorkflowByIDUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryOwnerWorkflowByIDForbidden creates a RetryOwnerWorkflowByIDForbidden with default headers values
func NewRetryOwnerWorkflowByIDForbidden() *RetryOwnerWorkflowByIDForbidden {
	return &RetryOwnerWorkflowByIDForbidden{}
}

/*
RetryOwnerWorkflowByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RetryOwnerWorkflowByIDForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry owner workflow by Id forbidden response has a 2xx status code
func (o *RetryOwnerWorkflowByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry owner workflow by Id forbidden response has a 3xx status code
func (o *RetryOwnerWorkflowByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id forbidden response has a 4xx status code
func (o *RetryOwnerWorkflowByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry owner workflow by Id forbidden response has a 5xx status code
func (o *RetryOwnerWorkflowByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retry owner workflow by Id forbidden response a status code equal to that given
func (o *RetryOwnerWorkflowByIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retry owner workflow by Id forbidden response
func (o *RetryOwnerWorkflowByIDForbidden) Code() int {
	return 403
}

func (o *RetryOwnerWorkflowByIDForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdForbidden  %+v", 403, o.Payload)
}

func (o *RetryOwnerWorkflowByIDForbidden) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdForbidden  %+v", 403, o.Payload)
}

func (o *RetryOwnerWorkflowByIDForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryOwnerWorkflowByIDNotFound creates a RetryOwnerWorkflowByIDNotFound with default headers values
func NewRetryOwnerWorkflowByIDNotFound() *RetryOwnerWorkflowByIDNotFound {
	return &RetryOwnerWorkflowByIDNotFound{}
}

/*
RetryOwnerWorkflowByIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetryOwnerWorkflowByIDNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry owner workflow by Id not found response has a 2xx status code
func (o *RetryOwnerWorkflowByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry owner workflow by Id not found response has a 3xx status code
func (o *RetryOwnerWorkflowByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id not found response has a 4xx status code
func (o *RetryOwnerWorkflowByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry owner workflow by Id not found response has a 5xx status code
func (o *RetryOwnerWorkflowByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry owner workflow by Id not found response a status code equal to that given
func (o *RetryOwnerWorkflowByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry owner workflow by Id not found response
func (o *RetryOwnerWorkflowByIDNotFound) Code() int {
	return 404
}

func (o *RetryOwnerWorkflowByIDNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdNotFound  %+v", 404, o.Payload)
}

func (o *RetryOwnerWorkflowByIDNotFound) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdNotFound  %+v", 404, o.Payload)
}

func (o *RetryOwnerWorkflowByIDNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryOwnerWorkflowByIDInternalServerError creates a RetryOwnerWorkflowByIDInternalServerError with default headers values
func NewRetryOwnerWorkflowByIDInternalServerError() *RetryOwnerWorkflowByIDInternalServerError {
	return &RetryOwnerWorkflowByIDInternalServerError{}
}

/*
RetryOwnerWorkflowByIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetryOwnerWorkflowByIDInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry owner workflow by Id internal server error response has a 2xx status code
func (o *RetryOwnerWorkflowByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry owner workflow by Id internal server error response has a 3xx status code
func (o *RetryOwnerWorkflowByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry owner workflow by Id internal server error response has a 4xx status code
func (o *RetryOwnerWorkflowByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry owner workflow by Id internal server error response has a 5xx status code
func (o *RetryOwnerWorkflowByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry owner workflow by Id internal server error response a status code equal to that given
func (o *RetryOwnerWorkflowByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry owner workflow by Id internal server error response
func (o *RetryOwnerWorkflowByIDInternalServerError) Code() int {
	return 500
}

func (o *RetryOwnerWorkflowByIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryOwnerWorkflowByIDInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/retry][%d] retryOwnerWorkflowByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryOwnerWorkflowByIDInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryOwnerWorkflowByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
