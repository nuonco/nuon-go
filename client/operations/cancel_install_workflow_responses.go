// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// CancelInstallWorkflowReader is a Reader for the CancelInstallWorkflow structure.
type CancelInstallWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelInstallWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCancelInstallWorkflowAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelInstallWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelInstallWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelInstallWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelInstallWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelInstallWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/install-workflows/{install_workflow_id}/cancel] CancelInstallWorkflow", response, response.Code())
	}
}

// NewCancelInstallWorkflowAccepted creates a CancelInstallWorkflowAccepted with default headers values
func NewCancelInstallWorkflowAccepted() *CancelInstallWorkflowAccepted {
	return &CancelInstallWorkflowAccepted{}
}

/*
CancelInstallWorkflowAccepted describes a response with status code 202, with default header values.

Accepted
*/
type CancelInstallWorkflowAccepted struct {
	Payload bool
}

// IsSuccess returns true when this cancel install workflow accepted response has a 2xx status code
func (o *CancelInstallWorkflowAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel install workflow accepted response has a 3xx status code
func (o *CancelInstallWorkflowAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow accepted response has a 4xx status code
func (o *CancelInstallWorkflowAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel install workflow accepted response has a 5xx status code
func (o *CancelInstallWorkflowAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel install workflow accepted response a status code equal to that given
func (o *CancelInstallWorkflowAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the cancel install workflow accepted response
func (o *CancelInstallWorkflowAccepted) Code() int {
	return 202
}

func (o *CancelInstallWorkflowAccepted) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowAccepted %s", 202, payload)
}

func (o *CancelInstallWorkflowAccepted) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowAccepted %s", 202, payload)
}

func (o *CancelInstallWorkflowAccepted) GetPayload() bool {
	return o.Payload
}

func (o *CancelInstallWorkflowAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInstallWorkflowBadRequest creates a CancelInstallWorkflowBadRequest with default headers values
func NewCancelInstallWorkflowBadRequest() *CancelInstallWorkflowBadRequest {
	return &CancelInstallWorkflowBadRequest{}
}

/*
CancelInstallWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelInstallWorkflowBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel install workflow bad request response has a 2xx status code
func (o *CancelInstallWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel install workflow bad request response has a 3xx status code
func (o *CancelInstallWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow bad request response has a 4xx status code
func (o *CancelInstallWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel install workflow bad request response has a 5xx status code
func (o *CancelInstallWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel install workflow bad request response a status code equal to that given
func (o *CancelInstallWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel install workflow bad request response
func (o *CancelInstallWorkflowBadRequest) Code() int {
	return 400
}

func (o *CancelInstallWorkflowBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowBadRequest %s", 400, payload)
}

func (o *CancelInstallWorkflowBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowBadRequest %s", 400, payload)
}

func (o *CancelInstallWorkflowBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelInstallWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInstallWorkflowUnauthorized creates a CancelInstallWorkflowUnauthorized with default headers values
func NewCancelInstallWorkflowUnauthorized() *CancelInstallWorkflowUnauthorized {
	return &CancelInstallWorkflowUnauthorized{}
}

/*
CancelInstallWorkflowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelInstallWorkflowUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel install workflow unauthorized response has a 2xx status code
func (o *CancelInstallWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel install workflow unauthorized response has a 3xx status code
func (o *CancelInstallWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow unauthorized response has a 4xx status code
func (o *CancelInstallWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel install workflow unauthorized response has a 5xx status code
func (o *CancelInstallWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel install workflow unauthorized response a status code equal to that given
func (o *CancelInstallWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cancel install workflow unauthorized response
func (o *CancelInstallWorkflowUnauthorized) Code() int {
	return 401
}

func (o *CancelInstallWorkflowUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowUnauthorized %s", 401, payload)
}

func (o *CancelInstallWorkflowUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowUnauthorized %s", 401, payload)
}

func (o *CancelInstallWorkflowUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelInstallWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInstallWorkflowForbidden creates a CancelInstallWorkflowForbidden with default headers values
func NewCancelInstallWorkflowForbidden() *CancelInstallWorkflowForbidden {
	return &CancelInstallWorkflowForbidden{}
}

/*
CancelInstallWorkflowForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelInstallWorkflowForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel install workflow forbidden response has a 2xx status code
func (o *CancelInstallWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel install workflow forbidden response has a 3xx status code
func (o *CancelInstallWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow forbidden response has a 4xx status code
func (o *CancelInstallWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel install workflow forbidden response has a 5xx status code
func (o *CancelInstallWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel install workflow forbidden response a status code equal to that given
func (o *CancelInstallWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel install workflow forbidden response
func (o *CancelInstallWorkflowForbidden) Code() int {
	return 403
}

func (o *CancelInstallWorkflowForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowForbidden %s", 403, payload)
}

func (o *CancelInstallWorkflowForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowForbidden %s", 403, payload)
}

func (o *CancelInstallWorkflowForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelInstallWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInstallWorkflowNotFound creates a CancelInstallWorkflowNotFound with default headers values
func NewCancelInstallWorkflowNotFound() *CancelInstallWorkflowNotFound {
	return &CancelInstallWorkflowNotFound{}
}

/*
CancelInstallWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelInstallWorkflowNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel install workflow not found response has a 2xx status code
func (o *CancelInstallWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel install workflow not found response has a 3xx status code
func (o *CancelInstallWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow not found response has a 4xx status code
func (o *CancelInstallWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel install workflow not found response has a 5xx status code
func (o *CancelInstallWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel install workflow not found response a status code equal to that given
func (o *CancelInstallWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel install workflow not found response
func (o *CancelInstallWorkflowNotFound) Code() int {
	return 404
}

func (o *CancelInstallWorkflowNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowNotFound %s", 404, payload)
}

func (o *CancelInstallWorkflowNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowNotFound %s", 404, payload)
}

func (o *CancelInstallWorkflowNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelInstallWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInstallWorkflowInternalServerError creates a CancelInstallWorkflowInternalServerError with default headers values
func NewCancelInstallWorkflowInternalServerError() *CancelInstallWorkflowInternalServerError {
	return &CancelInstallWorkflowInternalServerError{}
}

/*
CancelInstallWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CancelInstallWorkflowInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this cancel install workflow internal server error response has a 2xx status code
func (o *CancelInstallWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel install workflow internal server error response has a 3xx status code
func (o *CancelInstallWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel install workflow internal server error response has a 4xx status code
func (o *CancelInstallWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel install workflow internal server error response has a 5xx status code
func (o *CancelInstallWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel install workflow internal server error response a status code equal to that given
func (o *CancelInstallWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cancel install workflow internal server error response
func (o *CancelInstallWorkflowInternalServerError) Code() int {
	return 500
}

func (o *CancelInstallWorkflowInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowInternalServerError %s", 500, payload)
}

func (o *CancelInstallWorkflowInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/install-workflows/{install_workflow_id}/cancel][%d] cancelInstallWorkflowInternalServerError %s", 500, payload)
}

func (o *CancelInstallWorkflowInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *CancelInstallWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
