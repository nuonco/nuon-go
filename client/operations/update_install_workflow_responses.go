// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateInstallWorkflowReader is a Reader for the UpdateInstallWorkflow structure.
type UpdateInstallWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstallWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInstallWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInstallWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInstallWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInstallWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInstallWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInstallWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/install-workflows/{install_workflow_id}] UpdateInstallWorkflow", response, response.Code())
	}
}

// NewUpdateInstallWorkflowOK creates a UpdateInstallWorkflowOK with default headers values
func NewUpdateInstallWorkflowOK() *UpdateInstallWorkflowOK {
	return &UpdateInstallWorkflowOK{}
}

/*
UpdateInstallWorkflowOK describes a response with status code 200, with default header values.

OK
*/
type UpdateInstallWorkflowOK struct {
	Payload *models.AppInstallWorkflow
}

// IsSuccess returns true when this update install workflow o k response has a 2xx status code
func (o *UpdateInstallWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update install workflow o k response has a 3xx status code
func (o *UpdateInstallWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow o k response has a 4xx status code
func (o *UpdateInstallWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install workflow o k response has a 5xx status code
func (o *UpdateInstallWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update install workflow o k response a status code equal to that given
func (o *UpdateInstallWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update install workflow o k response
func (o *UpdateInstallWorkflowOK) Code() int {
	return 200
}

func (o *UpdateInstallWorkflowOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowOK  %+v", 200, o.Payload)
}

func (o *UpdateInstallWorkflowOK) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowOK  %+v", 200, o.Payload)
}

func (o *UpdateInstallWorkflowOK) GetPayload() *models.AppInstallWorkflow {
	return o.Payload
}

func (o *UpdateInstallWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstallWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallWorkflowBadRequest creates a UpdateInstallWorkflowBadRequest with default headers values
func NewUpdateInstallWorkflowBadRequest() *UpdateInstallWorkflowBadRequest {
	return &UpdateInstallWorkflowBadRequest{}
}

/*
UpdateInstallWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateInstallWorkflowBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install workflow bad request response has a 2xx status code
func (o *UpdateInstallWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install workflow bad request response has a 3xx status code
func (o *UpdateInstallWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow bad request response has a 4xx status code
func (o *UpdateInstallWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install workflow bad request response has a 5xx status code
func (o *UpdateInstallWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update install workflow bad request response a status code equal to that given
func (o *UpdateInstallWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update install workflow bad request response
func (o *UpdateInstallWorkflowBadRequest) Code() int {
	return 400
}

func (o *UpdateInstallWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallWorkflowBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallWorkflowBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallWorkflowUnauthorized creates a UpdateInstallWorkflowUnauthorized with default headers values
func NewUpdateInstallWorkflowUnauthorized() *UpdateInstallWorkflowUnauthorized {
	return &UpdateInstallWorkflowUnauthorized{}
}

/*
UpdateInstallWorkflowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateInstallWorkflowUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install workflow unauthorized response has a 2xx status code
func (o *UpdateInstallWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install workflow unauthorized response has a 3xx status code
func (o *UpdateInstallWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow unauthorized response has a 4xx status code
func (o *UpdateInstallWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install workflow unauthorized response has a 5xx status code
func (o *UpdateInstallWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update install workflow unauthorized response a status code equal to that given
func (o *UpdateInstallWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update install workflow unauthorized response
func (o *UpdateInstallWorkflowUnauthorized) Code() int {
	return 401
}

func (o *UpdateInstallWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallWorkflowUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallWorkflowForbidden creates a UpdateInstallWorkflowForbidden with default headers values
func NewUpdateInstallWorkflowForbidden() *UpdateInstallWorkflowForbidden {
	return &UpdateInstallWorkflowForbidden{}
}

/*
UpdateInstallWorkflowForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateInstallWorkflowForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install workflow forbidden response has a 2xx status code
func (o *UpdateInstallWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install workflow forbidden response has a 3xx status code
func (o *UpdateInstallWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow forbidden response has a 4xx status code
func (o *UpdateInstallWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install workflow forbidden response has a 5xx status code
func (o *UpdateInstallWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update install workflow forbidden response a status code equal to that given
func (o *UpdateInstallWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update install workflow forbidden response
func (o *UpdateInstallWorkflowForbidden) Code() int {
	return 403
}

func (o *UpdateInstallWorkflowForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallWorkflowForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallWorkflowForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallWorkflowNotFound creates a UpdateInstallWorkflowNotFound with default headers values
func NewUpdateInstallWorkflowNotFound() *UpdateInstallWorkflowNotFound {
	return &UpdateInstallWorkflowNotFound{}
}

/*
UpdateInstallWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateInstallWorkflowNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install workflow not found response has a 2xx status code
func (o *UpdateInstallWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install workflow not found response has a 3xx status code
func (o *UpdateInstallWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow not found response has a 4xx status code
func (o *UpdateInstallWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install workflow not found response has a 5xx status code
func (o *UpdateInstallWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update install workflow not found response a status code equal to that given
func (o *UpdateInstallWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update install workflow not found response
func (o *UpdateInstallWorkflowNotFound) Code() int {
	return 404
}

func (o *UpdateInstallWorkflowNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallWorkflowNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallWorkflowNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallWorkflowInternalServerError creates a UpdateInstallWorkflowInternalServerError with default headers values
func NewUpdateInstallWorkflowInternalServerError() *UpdateInstallWorkflowInternalServerError {
	return &UpdateInstallWorkflowInternalServerError{}
}

/*
UpdateInstallWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateInstallWorkflowInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install workflow internal server error response has a 2xx status code
func (o *UpdateInstallWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install workflow internal server error response has a 3xx status code
func (o *UpdateInstallWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install workflow internal server error response has a 4xx status code
func (o *UpdateInstallWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install workflow internal server error response has a 5xx status code
func (o *UpdateInstallWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update install workflow internal server error response a status code equal to that given
func (o *UpdateInstallWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update install workflow internal server error response
func (o *UpdateInstallWorkflowInternalServerError) Code() int {
	return 500
}

func (o *UpdateInstallWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallWorkflowInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/install-workflows/{install_workflow_id}][%d] updateInstallWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallWorkflowInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
