// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetAppActionReader is a Reader for the GetAppAction structure.
type GetAppActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAppActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAppActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/apps/{app_id}/actions/{action_id}] GetAppAction", response, response.Code())
	}
}

// NewGetAppActionOK creates a GetAppActionOK with default headers values
func NewGetAppActionOK() *GetAppActionOK {
	return &GetAppActionOK{}
}

/*
GetAppActionOK describes a response with status code 200, with default header values.

OK
*/
type GetAppActionOK struct {
	Payload *models.AppActionWorkflow
}

// IsSuccess returns true when this get app action o k response has a 2xx status code
func (o *GetAppActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get app action o k response has a 3xx status code
func (o *GetAppActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action o k response has a 4xx status code
func (o *GetAppActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app action o k response has a 5xx status code
func (o *GetAppActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get app action o k response a status code equal to that given
func (o *GetAppActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get app action o k response
func (o *GetAppActionOK) Code() int {
	return 200
}

func (o *GetAppActionOK) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionOK  %+v", 200, o.Payload)
}

func (o *GetAppActionOK) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionOK  %+v", 200, o.Payload)
}

func (o *GetAppActionOK) GetPayload() *models.AppActionWorkflow {
	return o.Payload
}

func (o *GetAppActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppActionWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppActionBadRequest creates a GetAppActionBadRequest with default headers values
func NewGetAppActionBadRequest() *GetAppActionBadRequest {
	return &GetAppActionBadRequest{}
}

/*
GetAppActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAppActionBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app action bad request response has a 2xx status code
func (o *GetAppActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app action bad request response has a 3xx status code
func (o *GetAppActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action bad request response has a 4xx status code
func (o *GetAppActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app action bad request response has a 5xx status code
func (o *GetAppActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get app action bad request response a status code equal to that given
func (o *GetAppActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get app action bad request response
func (o *GetAppActionBadRequest) Code() int {
	return 400
}

func (o *GetAppActionBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppActionBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppActionBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppActionUnauthorized creates a GetAppActionUnauthorized with default headers values
func NewGetAppActionUnauthorized() *GetAppActionUnauthorized {
	return &GetAppActionUnauthorized{}
}

/*
GetAppActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAppActionUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app action unauthorized response has a 2xx status code
func (o *GetAppActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app action unauthorized response has a 3xx status code
func (o *GetAppActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action unauthorized response has a 4xx status code
func (o *GetAppActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app action unauthorized response has a 5xx status code
func (o *GetAppActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get app action unauthorized response a status code equal to that given
func (o *GetAppActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get app action unauthorized response
func (o *GetAppActionUnauthorized) Code() int {
	return 401
}

func (o *GetAppActionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppActionUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppActionUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppActionForbidden creates a GetAppActionForbidden with default headers values
func NewGetAppActionForbidden() *GetAppActionForbidden {
	return &GetAppActionForbidden{}
}

/*
GetAppActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAppActionForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app action forbidden response has a 2xx status code
func (o *GetAppActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app action forbidden response has a 3xx status code
func (o *GetAppActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action forbidden response has a 4xx status code
func (o *GetAppActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app action forbidden response has a 5xx status code
func (o *GetAppActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get app action forbidden response a status code equal to that given
func (o *GetAppActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get app action forbidden response
func (o *GetAppActionForbidden) Code() int {
	return 403
}

func (o *GetAppActionForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionForbidden  %+v", 403, o.Payload)
}

func (o *GetAppActionForbidden) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionForbidden  %+v", 403, o.Payload)
}

func (o *GetAppActionForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppActionNotFound creates a GetAppActionNotFound with default headers values
func NewGetAppActionNotFound() *GetAppActionNotFound {
	return &GetAppActionNotFound{}
}

/*
GetAppActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAppActionNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app action not found response has a 2xx status code
func (o *GetAppActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app action not found response has a 3xx status code
func (o *GetAppActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action not found response has a 4xx status code
func (o *GetAppActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app action not found response has a 5xx status code
func (o *GetAppActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get app action not found response a status code equal to that given
func (o *GetAppActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get app action not found response
func (o *GetAppActionNotFound) Code() int {
	return 404
}

func (o *GetAppActionNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionNotFound  %+v", 404, o.Payload)
}

func (o *GetAppActionNotFound) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionNotFound  %+v", 404, o.Payload)
}

func (o *GetAppActionNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppActionInternalServerError creates a GetAppActionInternalServerError with default headers values
func NewGetAppActionInternalServerError() *GetAppActionInternalServerError {
	return &GetAppActionInternalServerError{}
}

/*
GetAppActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAppActionInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app action internal server error response has a 2xx status code
func (o *GetAppActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app action internal server error response has a 3xx status code
func (o *GetAppActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app action internal server error response has a 4xx status code
func (o *GetAppActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app action internal server error response has a 5xx status code
func (o *GetAppActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get app action internal server error response a status code equal to that given
func (o *GetAppActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get app action internal server error response
func (o *GetAppActionInternalServerError) Code() int {
	return 500
}

func (o *GetAppActionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppActionInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/actions/{action_id}][%d] getAppActionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppActionInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
