// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// HandleWebhookReader is a Reader for the HandleWebhook structure.
type HandleWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandleWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewHandleWebhookCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewHandleWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewHandleWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandleWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandleWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewHandleWebhookInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/vcs/handle-webhook] HandleWebhook", response, response.Code())
	}
}

// NewHandleWebhookCreated creates a HandleWebhookCreated with default headers values
func NewHandleWebhookCreated() *HandleWebhookCreated {
	return &HandleWebhookCreated{}
}

/*
HandleWebhookCreated describes a response with status code 201, with default header values.

Created
*/
type HandleWebhookCreated struct {
	Payload string
}

// IsSuccess returns true when this handle webhook created response has a 2xx status code
func (o *HandleWebhookCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this handle webhook created response has a 3xx status code
func (o *HandleWebhookCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook created response has a 4xx status code
func (o *HandleWebhookCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle webhook created response has a 5xx status code
func (o *HandleWebhookCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this handle webhook created response a status code equal to that given
func (o *HandleWebhookCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the handle webhook created response
func (o *HandleWebhookCreated) Code() int {
	return 201
}

func (o *HandleWebhookCreated) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookCreated  %+v", 201, o.Payload)
}

func (o *HandleWebhookCreated) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookCreated  %+v", 201, o.Payload)
}

func (o *HandleWebhookCreated) GetPayload() string {
	return o.Payload
}

func (o *HandleWebhookCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleWebhookBadRequest creates a HandleWebhookBadRequest with default headers values
func NewHandleWebhookBadRequest() *HandleWebhookBadRequest {
	return &HandleWebhookBadRequest{}
}

/*
HandleWebhookBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type HandleWebhookBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this handle webhook bad request response has a 2xx status code
func (o *HandleWebhookBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle webhook bad request response has a 3xx status code
func (o *HandleWebhookBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook bad request response has a 4xx status code
func (o *HandleWebhookBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle webhook bad request response has a 5xx status code
func (o *HandleWebhookBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this handle webhook bad request response a status code equal to that given
func (o *HandleWebhookBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the handle webhook bad request response
func (o *HandleWebhookBadRequest) Code() int {
	return 400
}

func (o *HandleWebhookBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *HandleWebhookBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *HandleWebhookBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *HandleWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleWebhookUnauthorized creates a HandleWebhookUnauthorized with default headers values
func NewHandleWebhookUnauthorized() *HandleWebhookUnauthorized {
	return &HandleWebhookUnauthorized{}
}

/*
HandleWebhookUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandleWebhookUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this handle webhook unauthorized response has a 2xx status code
func (o *HandleWebhookUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle webhook unauthorized response has a 3xx status code
func (o *HandleWebhookUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook unauthorized response has a 4xx status code
func (o *HandleWebhookUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle webhook unauthorized response has a 5xx status code
func (o *HandleWebhookUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this handle webhook unauthorized response a status code equal to that given
func (o *HandleWebhookUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the handle webhook unauthorized response
func (o *HandleWebhookUnauthorized) Code() int {
	return 401
}

func (o *HandleWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *HandleWebhookUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *HandleWebhookUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *HandleWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleWebhookForbidden creates a HandleWebhookForbidden with default headers values
func NewHandleWebhookForbidden() *HandleWebhookForbidden {
	return &HandleWebhookForbidden{}
}

/*
HandleWebhookForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandleWebhookForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this handle webhook forbidden response has a 2xx status code
func (o *HandleWebhookForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle webhook forbidden response has a 3xx status code
func (o *HandleWebhookForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook forbidden response has a 4xx status code
func (o *HandleWebhookForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle webhook forbidden response has a 5xx status code
func (o *HandleWebhookForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this handle webhook forbidden response a status code equal to that given
func (o *HandleWebhookForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the handle webhook forbidden response
func (o *HandleWebhookForbidden) Code() int {
	return 403
}

func (o *HandleWebhookForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookForbidden  %+v", 403, o.Payload)
}

func (o *HandleWebhookForbidden) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookForbidden  %+v", 403, o.Payload)
}

func (o *HandleWebhookForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *HandleWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleWebhookNotFound creates a HandleWebhookNotFound with default headers values
func NewHandleWebhookNotFound() *HandleWebhookNotFound {
	return &HandleWebhookNotFound{}
}

/*
HandleWebhookNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandleWebhookNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this handle webhook not found response has a 2xx status code
func (o *HandleWebhookNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle webhook not found response has a 3xx status code
func (o *HandleWebhookNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook not found response has a 4xx status code
func (o *HandleWebhookNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle webhook not found response has a 5xx status code
func (o *HandleWebhookNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this handle webhook not found response a status code equal to that given
func (o *HandleWebhookNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the handle webhook not found response
func (o *HandleWebhookNotFound) Code() int {
	return 404
}

func (o *HandleWebhookNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookNotFound  %+v", 404, o.Payload)
}

func (o *HandleWebhookNotFound) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookNotFound  %+v", 404, o.Payload)
}

func (o *HandleWebhookNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *HandleWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewHandleWebhookInternalServerError creates a HandleWebhookInternalServerError with default headers values
func NewHandleWebhookInternalServerError() *HandleWebhookInternalServerError {
	return &HandleWebhookInternalServerError{}
}

/*
HandleWebhookInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type HandleWebhookInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this handle webhook internal server error response has a 2xx status code
func (o *HandleWebhookInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle webhook internal server error response has a 3xx status code
func (o *HandleWebhookInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle webhook internal server error response has a 4xx status code
func (o *HandleWebhookInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle webhook internal server error response has a 5xx status code
func (o *HandleWebhookInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this handle webhook internal server error response a status code equal to that given
func (o *HandleWebhookInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the handle webhook internal server error response
func (o *HandleWebhookInternalServerError) Code() int {
	return 500
}

func (o *HandleWebhookInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *HandleWebhookInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/vcs/handle-webhook][%d] handleWebhookInternalServerError  %+v", 500, o.Payload)
}

func (o *HandleWebhookInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *HandleWebhookInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
