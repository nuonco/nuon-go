// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetAppBreakGlassConfigReader is a Reader for the GetAppBreakGlassConfig structure.
type GetAppBreakGlassConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppBreakGlassConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppBreakGlassConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppBreakGlassConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAppBreakGlassConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppBreakGlassConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppBreakGlassConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAppBreakGlassConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}] GetAppBreakGlassConfig", response, response.Code())
	}
}

// NewGetAppBreakGlassConfigOK creates a GetAppBreakGlassConfigOK with default headers values
func NewGetAppBreakGlassConfigOK() *GetAppBreakGlassConfigOK {
	return &GetAppBreakGlassConfigOK{}
}

/*
GetAppBreakGlassConfigOK describes a response with status code 200, with default header values.

OK
*/
type GetAppBreakGlassConfigOK struct {
	Payload *models.AppAppBreakGlassConfig
}

// IsSuccess returns true when this get app break glass config o k response has a 2xx status code
func (o *GetAppBreakGlassConfigOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get app break glass config o k response has a 3xx status code
func (o *GetAppBreakGlassConfigOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config o k response has a 4xx status code
func (o *GetAppBreakGlassConfigOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app break glass config o k response has a 5xx status code
func (o *GetAppBreakGlassConfigOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get app break glass config o k response a status code equal to that given
func (o *GetAppBreakGlassConfigOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get app break glass config o k response
func (o *GetAppBreakGlassConfigOK) Code() int {
	return 200
}

func (o *GetAppBreakGlassConfigOK) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigOK  %+v", 200, o.Payload)
}

func (o *GetAppBreakGlassConfigOK) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigOK  %+v", 200, o.Payload)
}

func (o *GetAppBreakGlassConfigOK) GetPayload() *models.AppAppBreakGlassConfig {
	return o.Payload
}

func (o *GetAppBreakGlassConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppAppBreakGlassConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBreakGlassConfigBadRequest creates a GetAppBreakGlassConfigBadRequest with default headers values
func NewGetAppBreakGlassConfigBadRequest() *GetAppBreakGlassConfigBadRequest {
	return &GetAppBreakGlassConfigBadRequest{}
}

/*
GetAppBreakGlassConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAppBreakGlassConfigBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app break glass config bad request response has a 2xx status code
func (o *GetAppBreakGlassConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app break glass config bad request response has a 3xx status code
func (o *GetAppBreakGlassConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config bad request response has a 4xx status code
func (o *GetAppBreakGlassConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app break glass config bad request response has a 5xx status code
func (o *GetAppBreakGlassConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get app break glass config bad request response a status code equal to that given
func (o *GetAppBreakGlassConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get app break glass config bad request response
func (o *GetAppBreakGlassConfigBadRequest) Code() int {
	return 400
}

func (o *GetAppBreakGlassConfigBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppBreakGlassConfigBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppBreakGlassConfigBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppBreakGlassConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBreakGlassConfigUnauthorized creates a GetAppBreakGlassConfigUnauthorized with default headers values
func NewGetAppBreakGlassConfigUnauthorized() *GetAppBreakGlassConfigUnauthorized {
	return &GetAppBreakGlassConfigUnauthorized{}
}

/*
GetAppBreakGlassConfigUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAppBreakGlassConfigUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app break glass config unauthorized response has a 2xx status code
func (o *GetAppBreakGlassConfigUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app break glass config unauthorized response has a 3xx status code
func (o *GetAppBreakGlassConfigUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config unauthorized response has a 4xx status code
func (o *GetAppBreakGlassConfigUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app break glass config unauthorized response has a 5xx status code
func (o *GetAppBreakGlassConfigUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get app break glass config unauthorized response a status code equal to that given
func (o *GetAppBreakGlassConfigUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get app break glass config unauthorized response
func (o *GetAppBreakGlassConfigUnauthorized) Code() int {
	return 401
}

func (o *GetAppBreakGlassConfigUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppBreakGlassConfigUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppBreakGlassConfigUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppBreakGlassConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBreakGlassConfigForbidden creates a GetAppBreakGlassConfigForbidden with default headers values
func NewGetAppBreakGlassConfigForbidden() *GetAppBreakGlassConfigForbidden {
	return &GetAppBreakGlassConfigForbidden{}
}

/*
GetAppBreakGlassConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAppBreakGlassConfigForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app break glass config forbidden response has a 2xx status code
func (o *GetAppBreakGlassConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app break glass config forbidden response has a 3xx status code
func (o *GetAppBreakGlassConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config forbidden response has a 4xx status code
func (o *GetAppBreakGlassConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app break glass config forbidden response has a 5xx status code
func (o *GetAppBreakGlassConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get app break glass config forbidden response a status code equal to that given
func (o *GetAppBreakGlassConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get app break glass config forbidden response
func (o *GetAppBreakGlassConfigForbidden) Code() int {
	return 403
}

func (o *GetAppBreakGlassConfigForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigForbidden  %+v", 403, o.Payload)
}

func (o *GetAppBreakGlassConfigForbidden) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigForbidden  %+v", 403, o.Payload)
}

func (o *GetAppBreakGlassConfigForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppBreakGlassConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBreakGlassConfigNotFound creates a GetAppBreakGlassConfigNotFound with default headers values
func NewGetAppBreakGlassConfigNotFound() *GetAppBreakGlassConfigNotFound {
	return &GetAppBreakGlassConfigNotFound{}
}

/*
GetAppBreakGlassConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAppBreakGlassConfigNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app break glass config not found response has a 2xx status code
func (o *GetAppBreakGlassConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app break glass config not found response has a 3xx status code
func (o *GetAppBreakGlassConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config not found response has a 4xx status code
func (o *GetAppBreakGlassConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app break glass config not found response has a 5xx status code
func (o *GetAppBreakGlassConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get app break glass config not found response a status code equal to that given
func (o *GetAppBreakGlassConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get app break glass config not found response
func (o *GetAppBreakGlassConfigNotFound) Code() int {
	return 404
}

func (o *GetAppBreakGlassConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetAppBreakGlassConfigNotFound) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetAppBreakGlassConfigNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppBreakGlassConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppBreakGlassConfigInternalServerError creates a GetAppBreakGlassConfigInternalServerError with default headers values
func NewGetAppBreakGlassConfigInternalServerError() *GetAppBreakGlassConfigInternalServerError {
	return &GetAppBreakGlassConfigInternalServerError{}
}

/*
GetAppBreakGlassConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAppBreakGlassConfigInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app break glass config internal server error response has a 2xx status code
func (o *GetAppBreakGlassConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app break glass config internal server error response has a 3xx status code
func (o *GetAppBreakGlassConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app break glass config internal server error response has a 4xx status code
func (o *GetAppBreakGlassConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app break glass config internal server error response has a 5xx status code
func (o *GetAppBreakGlassConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get app break glass config internal server error response a status code equal to that given
func (o *GetAppBreakGlassConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get app break glass config internal server error response
func (o *GetAppBreakGlassConfigInternalServerError) Code() int {
	return 500
}

func (o *GetAppBreakGlassConfigInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppBreakGlassConfigInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/break-glass-configs/{break_glass_config_id}][%d] getAppBreakGlassConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppBreakGlassConfigInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppBreakGlassConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
