// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetRunnerReader is a Reader for the GetRunner structure.
type GetRunnerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunnerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunnerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRunnerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRunnerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRunnerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRunnerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRunnerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/runners/{runner_id}] GetRunner", response, response.Code())
	}
}

// NewGetRunnerOK creates a GetRunnerOK with default headers values
func NewGetRunnerOK() *GetRunnerOK {
	return &GetRunnerOK{}
}

/*
GetRunnerOK describes a response with status code 200, with default header values.

OK
*/
type GetRunnerOK struct {
	Payload *models.AppRunner
}

// IsSuccess returns true when this get runner o k response has a 2xx status code
func (o *GetRunnerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get runner o k response has a 3xx status code
func (o *GetRunnerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner o k response has a 4xx status code
func (o *GetRunnerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runner o k response has a 5xx status code
func (o *GetRunnerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner o k response a status code equal to that given
func (o *GetRunnerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get runner o k response
func (o *GetRunnerOK) Code() int {
	return 200
}

func (o *GetRunnerOK) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerOK  %+v", 200, o.Payload)
}

func (o *GetRunnerOK) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerOK  %+v", 200, o.Payload)
}

func (o *GetRunnerOK) GetPayload() *models.AppRunner {
	return o.Payload
}

func (o *GetRunnerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRunner)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerBadRequest creates a GetRunnerBadRequest with default headers values
func NewGetRunnerBadRequest() *GetRunnerBadRequest {
	return &GetRunnerBadRequest{}
}

/*
GetRunnerBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRunnerBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner bad request response has a 2xx status code
func (o *GetRunnerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner bad request response has a 3xx status code
func (o *GetRunnerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner bad request response has a 4xx status code
func (o *GetRunnerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner bad request response has a 5xx status code
func (o *GetRunnerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner bad request response a status code equal to that given
func (o *GetRunnerBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get runner bad request response
func (o *GetRunnerBadRequest) Code() int {
	return 400
}

func (o *GetRunnerBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerBadRequest  %+v", 400, o.Payload)
}

func (o *GetRunnerBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerBadRequest  %+v", 400, o.Payload)
}

func (o *GetRunnerBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerUnauthorized creates a GetRunnerUnauthorized with default headers values
func NewGetRunnerUnauthorized() *GetRunnerUnauthorized {
	return &GetRunnerUnauthorized{}
}

/*
GetRunnerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRunnerUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner unauthorized response has a 2xx status code
func (o *GetRunnerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner unauthorized response has a 3xx status code
func (o *GetRunnerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner unauthorized response has a 4xx status code
func (o *GetRunnerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner unauthorized response has a 5xx status code
func (o *GetRunnerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner unauthorized response a status code equal to that given
func (o *GetRunnerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get runner unauthorized response
func (o *GetRunnerUnauthorized) Code() int {
	return 401
}

func (o *GetRunnerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRunnerUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRunnerUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerForbidden creates a GetRunnerForbidden with default headers values
func NewGetRunnerForbidden() *GetRunnerForbidden {
	return &GetRunnerForbidden{}
}

/*
GetRunnerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRunnerForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner forbidden response has a 2xx status code
func (o *GetRunnerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner forbidden response has a 3xx status code
func (o *GetRunnerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner forbidden response has a 4xx status code
func (o *GetRunnerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner forbidden response has a 5xx status code
func (o *GetRunnerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner forbidden response a status code equal to that given
func (o *GetRunnerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get runner forbidden response
func (o *GetRunnerForbidden) Code() int {
	return 403
}

func (o *GetRunnerForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerForbidden  %+v", 403, o.Payload)
}

func (o *GetRunnerForbidden) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerForbidden  %+v", 403, o.Payload)
}

func (o *GetRunnerForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerNotFound creates a GetRunnerNotFound with default headers values
func NewGetRunnerNotFound() *GetRunnerNotFound {
	return &GetRunnerNotFound{}
}

/*
GetRunnerNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRunnerNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner not found response has a 2xx status code
func (o *GetRunnerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner not found response has a 3xx status code
func (o *GetRunnerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner not found response has a 4xx status code
func (o *GetRunnerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get runner not found response has a 5xx status code
func (o *GetRunnerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get runner not found response a status code equal to that given
func (o *GetRunnerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get runner not found response
func (o *GetRunnerNotFound) Code() int {
	return 404
}

func (o *GetRunnerNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerNotFound  %+v", 404, o.Payload)
}

func (o *GetRunnerNotFound) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerNotFound  %+v", 404, o.Payload)
}

func (o *GetRunnerNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunnerInternalServerError creates a GetRunnerInternalServerError with default headers values
func NewGetRunnerInternalServerError() *GetRunnerInternalServerError {
	return &GetRunnerInternalServerError{}
}

/*
GetRunnerInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetRunnerInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get runner internal server error response has a 2xx status code
func (o *GetRunnerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get runner internal server error response has a 3xx status code
func (o *GetRunnerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get runner internal server error response has a 4xx status code
func (o *GetRunnerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get runner internal server error response has a 5xx status code
func (o *GetRunnerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get runner internal server error response a status code equal to that given
func (o *GetRunnerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get runner internal server error response
func (o *GetRunnerInternalServerError) Code() int {
	return 500
}

func (o *GetRunnerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRunnerInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}][%d] getRunnerInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRunnerInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetRunnerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
