// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// RetryWorkflowStepReader is a Reader for the RetryWorkflowStep structure.
type RetryWorkflowStepReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryWorkflowStepReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRetryWorkflowStepCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetryWorkflowStepBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRetryWorkflowStepUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetryWorkflowStepForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetryWorkflowStepNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetryWorkflowStepInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry] RetryWorkflowStep", response, response.Code())
	}
}

// NewRetryWorkflowStepCreated creates a RetryWorkflowStepCreated with default headers values
func NewRetryWorkflowStepCreated() *RetryWorkflowStepCreated {
	return &RetryWorkflowStepCreated{}
}

/*
RetryWorkflowStepCreated describes a response with status code 201, with default header values.

Created
*/
type RetryWorkflowStepCreated struct {
	Payload *models.ServiceRetryWorkflowByIDResponse
}

// IsSuccess returns true when this retry workflow step created response has a 2xx status code
func (o *RetryWorkflowStepCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry workflow step created response has a 3xx status code
func (o *RetryWorkflowStepCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step created response has a 4xx status code
func (o *RetryWorkflowStepCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry workflow step created response has a 5xx status code
func (o *RetryWorkflowStepCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow step created response a status code equal to that given
func (o *RetryWorkflowStepCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the retry workflow step created response
func (o *RetryWorkflowStepCreated) Code() int {
	return 201
}

func (o *RetryWorkflowStepCreated) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepCreated  %+v", 201, o.Payload)
}

func (o *RetryWorkflowStepCreated) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepCreated  %+v", 201, o.Payload)
}

func (o *RetryWorkflowStepCreated) GetPayload() *models.ServiceRetryWorkflowByIDResponse {
	return o.Payload
}

func (o *RetryWorkflowStepCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceRetryWorkflowByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowStepBadRequest creates a RetryWorkflowStepBadRequest with default headers values
func NewRetryWorkflowStepBadRequest() *RetryWorkflowStepBadRequest {
	return &RetryWorkflowStepBadRequest{}
}

/*
RetryWorkflowStepBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetryWorkflowStepBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow step bad request response has a 2xx status code
func (o *RetryWorkflowStepBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow step bad request response has a 3xx status code
func (o *RetryWorkflowStepBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step bad request response has a 4xx status code
func (o *RetryWorkflowStepBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow step bad request response has a 5xx status code
func (o *RetryWorkflowStepBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow step bad request response a status code equal to that given
func (o *RetryWorkflowStepBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the retry workflow step bad request response
func (o *RetryWorkflowStepBadRequest) Code() int {
	return 400
}

func (o *RetryWorkflowStepBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepBadRequest  %+v", 400, o.Payload)
}

func (o *RetryWorkflowStepBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepBadRequest  %+v", 400, o.Payload)
}

func (o *RetryWorkflowStepBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowStepBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowStepUnauthorized creates a RetryWorkflowStepUnauthorized with default headers values
func NewRetryWorkflowStepUnauthorized() *RetryWorkflowStepUnauthorized {
	return &RetryWorkflowStepUnauthorized{}
}

/*
RetryWorkflowStepUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RetryWorkflowStepUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow step unauthorized response has a 2xx status code
func (o *RetryWorkflowStepUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow step unauthorized response has a 3xx status code
func (o *RetryWorkflowStepUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step unauthorized response has a 4xx status code
func (o *RetryWorkflowStepUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow step unauthorized response has a 5xx status code
func (o *RetryWorkflowStepUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow step unauthorized response a status code equal to that given
func (o *RetryWorkflowStepUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the retry workflow step unauthorized response
func (o *RetryWorkflowStepUnauthorized) Code() int {
	return 401
}

func (o *RetryWorkflowStepUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryWorkflowStepUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryWorkflowStepUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowStepUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowStepForbidden creates a RetryWorkflowStepForbidden with default headers values
func NewRetryWorkflowStepForbidden() *RetryWorkflowStepForbidden {
	return &RetryWorkflowStepForbidden{}
}

/*
RetryWorkflowStepForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RetryWorkflowStepForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow step forbidden response has a 2xx status code
func (o *RetryWorkflowStepForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow step forbidden response has a 3xx status code
func (o *RetryWorkflowStepForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step forbidden response has a 4xx status code
func (o *RetryWorkflowStepForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow step forbidden response has a 5xx status code
func (o *RetryWorkflowStepForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow step forbidden response a status code equal to that given
func (o *RetryWorkflowStepForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retry workflow step forbidden response
func (o *RetryWorkflowStepForbidden) Code() int {
	return 403
}

func (o *RetryWorkflowStepForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepForbidden  %+v", 403, o.Payload)
}

func (o *RetryWorkflowStepForbidden) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepForbidden  %+v", 403, o.Payload)
}

func (o *RetryWorkflowStepForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowStepForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowStepNotFound creates a RetryWorkflowStepNotFound with default headers values
func NewRetryWorkflowStepNotFound() *RetryWorkflowStepNotFound {
	return &RetryWorkflowStepNotFound{}
}

/*
RetryWorkflowStepNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetryWorkflowStepNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow step not found response has a 2xx status code
func (o *RetryWorkflowStepNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow step not found response has a 3xx status code
func (o *RetryWorkflowStepNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step not found response has a 4xx status code
func (o *RetryWorkflowStepNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow step not found response has a 5xx status code
func (o *RetryWorkflowStepNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow step not found response a status code equal to that given
func (o *RetryWorkflowStepNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry workflow step not found response
func (o *RetryWorkflowStepNotFound) Code() int {
	return 404
}

func (o *RetryWorkflowStepNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepNotFound  %+v", 404, o.Payload)
}

func (o *RetryWorkflowStepNotFound) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepNotFound  %+v", 404, o.Payload)
}

func (o *RetryWorkflowStepNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowStepNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowStepInternalServerError creates a RetryWorkflowStepInternalServerError with default headers values
func NewRetryWorkflowStepInternalServerError() *RetryWorkflowStepInternalServerError {
	return &RetryWorkflowStepInternalServerError{}
}

/*
RetryWorkflowStepInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetryWorkflowStepInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow step internal server error response has a 2xx status code
func (o *RetryWorkflowStepInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow step internal server error response has a 3xx status code
func (o *RetryWorkflowStepInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow step internal server error response has a 4xx status code
func (o *RetryWorkflowStepInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry workflow step internal server error response has a 5xx status code
func (o *RetryWorkflowStepInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry workflow step internal server error response a status code equal to that given
func (o *RetryWorkflowStepInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry workflow step internal server error response
func (o *RetryWorkflowStepInternalServerError) Code() int {
	return 500
}

func (o *RetryWorkflowStepInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryWorkflowStepInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/workflows/{workflow_id}/step/{step_id}/retry][%d] retryWorkflowStepInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryWorkflowStepInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowStepInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
