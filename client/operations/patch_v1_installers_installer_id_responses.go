// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// PatchV1InstallersInstallerIDReader is a Reader for the PatchV1InstallersInstallerID structure.
type PatchV1InstallersInstallerIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1InstallersInstallerIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchV1InstallersInstallerIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchV1InstallersInstallerIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchV1InstallersInstallerIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchV1InstallersInstallerIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchV1InstallersInstallerIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchV1InstallersInstallerIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/installers/{installer_id}] PatchV1InstallersInstallerID", response, response.Code())
	}
}

// NewPatchV1InstallersInstallerIDCreated creates a PatchV1InstallersInstallerIDCreated with default headers values
func NewPatchV1InstallersInstallerIDCreated() *PatchV1InstallersInstallerIDCreated {
	return &PatchV1InstallersInstallerIDCreated{}
}

/*
PatchV1InstallersInstallerIDCreated describes a response with status code 201, with default header values.

Created
*/
type PatchV1InstallersInstallerIDCreated struct {
	Payload *models.AppAppInstaller
}

// IsSuccess returns true when this patch v1 installers installer Id created response has a 2xx status code
func (o *PatchV1InstallersInstallerIDCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 installers installer Id created response has a 3xx status code
func (o *PatchV1InstallersInstallerIDCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id created response has a 4xx status code
func (o *PatchV1InstallersInstallerIDCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 installers installer Id created response has a 5xx status code
func (o *PatchV1InstallersInstallerIDCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 installers installer Id created response a status code equal to that given
func (o *PatchV1InstallersInstallerIDCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the patch v1 installers installer Id created response
func (o *PatchV1InstallersInstallerIDCreated) Code() int {
	return 201
}

func (o *PatchV1InstallersInstallerIDCreated) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdCreated  %+v", 201, o.Payload)
}

func (o *PatchV1InstallersInstallerIDCreated) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdCreated  %+v", 201, o.Payload)
}

func (o *PatchV1InstallersInstallerIDCreated) GetPayload() *models.AppAppInstaller {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppAppInstaller)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1InstallersInstallerIDBadRequest creates a PatchV1InstallersInstallerIDBadRequest with default headers values
func NewPatchV1InstallersInstallerIDBadRequest() *PatchV1InstallersInstallerIDBadRequest {
	return &PatchV1InstallersInstallerIDBadRequest{}
}

/*
PatchV1InstallersInstallerIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchV1InstallersInstallerIDBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 installers installer Id bad request response has a 2xx status code
func (o *PatchV1InstallersInstallerIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 installers installer Id bad request response has a 3xx status code
func (o *PatchV1InstallersInstallerIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id bad request response has a 4xx status code
func (o *PatchV1InstallersInstallerIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 installers installer Id bad request response has a 5xx status code
func (o *PatchV1InstallersInstallerIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 installers installer Id bad request response a status code equal to that given
func (o *PatchV1InstallersInstallerIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch v1 installers installer Id bad request response
func (o *PatchV1InstallersInstallerIDBadRequest) Code() int {
	return 400
}

func (o *PatchV1InstallersInstallerIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1InstallersInstallerIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1InstallersInstallerIDBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1InstallersInstallerIDUnauthorized creates a PatchV1InstallersInstallerIDUnauthorized with default headers values
func NewPatchV1InstallersInstallerIDUnauthorized() *PatchV1InstallersInstallerIDUnauthorized {
	return &PatchV1InstallersInstallerIDUnauthorized{}
}

/*
PatchV1InstallersInstallerIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchV1InstallersInstallerIDUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 installers installer Id unauthorized response has a 2xx status code
func (o *PatchV1InstallersInstallerIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 installers installer Id unauthorized response has a 3xx status code
func (o *PatchV1InstallersInstallerIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id unauthorized response has a 4xx status code
func (o *PatchV1InstallersInstallerIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 installers installer Id unauthorized response has a 5xx status code
func (o *PatchV1InstallersInstallerIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 installers installer Id unauthorized response a status code equal to that given
func (o *PatchV1InstallersInstallerIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch v1 installers installer Id unauthorized response
func (o *PatchV1InstallersInstallerIDUnauthorized) Code() int {
	return 401
}

func (o *PatchV1InstallersInstallerIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchV1InstallersInstallerIDUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchV1InstallersInstallerIDUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1InstallersInstallerIDForbidden creates a PatchV1InstallersInstallerIDForbidden with default headers values
func NewPatchV1InstallersInstallerIDForbidden() *PatchV1InstallersInstallerIDForbidden {
	return &PatchV1InstallersInstallerIDForbidden{}
}

/*
PatchV1InstallersInstallerIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchV1InstallersInstallerIDForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 installers installer Id forbidden response has a 2xx status code
func (o *PatchV1InstallersInstallerIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 installers installer Id forbidden response has a 3xx status code
func (o *PatchV1InstallersInstallerIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id forbidden response has a 4xx status code
func (o *PatchV1InstallersInstallerIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 installers installer Id forbidden response has a 5xx status code
func (o *PatchV1InstallersInstallerIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 installers installer Id forbidden response a status code equal to that given
func (o *PatchV1InstallersInstallerIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch v1 installers installer Id forbidden response
func (o *PatchV1InstallersInstallerIDForbidden) Code() int {
	return 403
}

func (o *PatchV1InstallersInstallerIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1InstallersInstallerIDForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdForbidden  %+v", 403, o.Payload)
}

func (o *PatchV1InstallersInstallerIDForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1InstallersInstallerIDNotFound creates a PatchV1InstallersInstallerIDNotFound with default headers values
func NewPatchV1InstallersInstallerIDNotFound() *PatchV1InstallersInstallerIDNotFound {
	return &PatchV1InstallersInstallerIDNotFound{}
}

/*
PatchV1InstallersInstallerIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchV1InstallersInstallerIDNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 installers installer Id not found response has a 2xx status code
func (o *PatchV1InstallersInstallerIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 installers installer Id not found response has a 3xx status code
func (o *PatchV1InstallersInstallerIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id not found response has a 4xx status code
func (o *PatchV1InstallersInstallerIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 installers installer Id not found response has a 5xx status code
func (o *PatchV1InstallersInstallerIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 installers installer Id not found response a status code equal to that given
func (o *PatchV1InstallersInstallerIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch v1 installers installer Id not found response
func (o *PatchV1InstallersInstallerIDNotFound) Code() int {
	return 404
}

func (o *PatchV1InstallersInstallerIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1InstallersInstallerIDNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdNotFound  %+v", 404, o.Payload)
}

func (o *PatchV1InstallersInstallerIDNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1InstallersInstallerIDInternalServerError creates a PatchV1InstallersInstallerIDInternalServerError with default headers values
func NewPatchV1InstallersInstallerIDInternalServerError() *PatchV1InstallersInstallerIDInternalServerError {
	return &PatchV1InstallersInstallerIDInternalServerError{}
}

/*
PatchV1InstallersInstallerIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchV1InstallersInstallerIDInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this patch v1 installers installer Id internal server error response has a 2xx status code
func (o *PatchV1InstallersInstallerIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 installers installer Id internal server error response has a 3xx status code
func (o *PatchV1InstallersInstallerIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 installers installer Id internal server error response has a 4xx status code
func (o *PatchV1InstallersInstallerIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 installers installer Id internal server error response has a 5xx status code
func (o *PatchV1InstallersInstallerIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch v1 installers installer Id internal server error response a status code equal to that given
func (o *PatchV1InstallersInstallerIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch v1 installers installer Id internal server error response
func (o *PatchV1InstallersInstallerIDInternalServerError) Code() int {
	return 500
}

func (o *PatchV1InstallersInstallerIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchV1InstallersInstallerIDInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/installers/{installer_id}][%d] patchV1InstallersInstallerIdInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchV1InstallersInstallerIDInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PatchV1InstallersInstallerIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
