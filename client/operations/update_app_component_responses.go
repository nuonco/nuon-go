// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateAppComponentReader is a Reader for the UpdateAppComponent structure.
type UpdateAppComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAppComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAppComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAppComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAppComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAppComponentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/apps/{app_id}/components/{component_id}] UpdateAppComponent", response, response.Code())
	}
}

// NewUpdateAppComponentOK creates a UpdateAppComponentOK with default headers values
func NewUpdateAppComponentOK() *UpdateAppComponentOK {
	return &UpdateAppComponentOK{}
}

/*
UpdateAppComponentOK describes a response with status code 200, with default header values.

OK
*/
type UpdateAppComponentOK struct {
	Payload *models.AppComponent
}

// IsSuccess returns true when this update app component o k response has a 2xx status code
func (o *UpdateAppComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update app component o k response has a 3xx status code
func (o *UpdateAppComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component o k response has a 4xx status code
func (o *UpdateAppComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app component o k response has a 5xx status code
func (o *UpdateAppComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update app component o k response a status code equal to that given
func (o *UpdateAppComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update app component o k response
func (o *UpdateAppComponentOK) Code() int {
	return 200
}

func (o *UpdateAppComponentOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentOK  %+v", 200, o.Payload)
}

func (o *UpdateAppComponentOK) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentOK  %+v", 200, o.Payload)
}

func (o *UpdateAppComponentOK) GetPayload() *models.AppComponent {
	return o.Payload
}

func (o *UpdateAppComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppComponentBadRequest creates a UpdateAppComponentBadRequest with default headers values
func NewUpdateAppComponentBadRequest() *UpdateAppComponentBadRequest {
	return &UpdateAppComponentBadRequest{}
}

/*
UpdateAppComponentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAppComponentBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app component bad request response has a 2xx status code
func (o *UpdateAppComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app component bad request response has a 3xx status code
func (o *UpdateAppComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component bad request response has a 4xx status code
func (o *UpdateAppComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app component bad request response has a 5xx status code
func (o *UpdateAppComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update app component bad request response a status code equal to that given
func (o *UpdateAppComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update app component bad request response
func (o *UpdateAppComponentBadRequest) Code() int {
	return 400
}

func (o *UpdateAppComponentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppComponentBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppComponentBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppComponentUnauthorized creates a UpdateAppComponentUnauthorized with default headers values
func NewUpdateAppComponentUnauthorized() *UpdateAppComponentUnauthorized {
	return &UpdateAppComponentUnauthorized{}
}

/*
UpdateAppComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAppComponentUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app component unauthorized response has a 2xx status code
func (o *UpdateAppComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app component unauthorized response has a 3xx status code
func (o *UpdateAppComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component unauthorized response has a 4xx status code
func (o *UpdateAppComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app component unauthorized response has a 5xx status code
func (o *UpdateAppComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update app component unauthorized response a status code equal to that given
func (o *UpdateAppComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update app component unauthorized response
func (o *UpdateAppComponentUnauthorized) Code() int {
	return 401
}

func (o *UpdateAppComponentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppComponentUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppComponentUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppComponentForbidden creates a UpdateAppComponentForbidden with default headers values
func NewUpdateAppComponentForbidden() *UpdateAppComponentForbidden {
	return &UpdateAppComponentForbidden{}
}

/*
UpdateAppComponentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAppComponentForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app component forbidden response has a 2xx status code
func (o *UpdateAppComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app component forbidden response has a 3xx status code
func (o *UpdateAppComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component forbidden response has a 4xx status code
func (o *UpdateAppComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app component forbidden response has a 5xx status code
func (o *UpdateAppComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update app component forbidden response a status code equal to that given
func (o *UpdateAppComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update app component forbidden response
func (o *UpdateAppComponentForbidden) Code() int {
	return 403
}

func (o *UpdateAppComponentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppComponentForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppComponentForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppComponentNotFound creates a UpdateAppComponentNotFound with default headers values
func NewUpdateAppComponentNotFound() *UpdateAppComponentNotFound {
	return &UpdateAppComponentNotFound{}
}

/*
UpdateAppComponentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAppComponentNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app component not found response has a 2xx status code
func (o *UpdateAppComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app component not found response has a 3xx status code
func (o *UpdateAppComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component not found response has a 4xx status code
func (o *UpdateAppComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app component not found response has a 5xx status code
func (o *UpdateAppComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update app component not found response a status code equal to that given
func (o *UpdateAppComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update app component not found response
func (o *UpdateAppComponentNotFound) Code() int {
	return 404
}

func (o *UpdateAppComponentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppComponentNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppComponentNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppComponentInternalServerError creates a UpdateAppComponentInternalServerError with default headers values
func NewUpdateAppComponentInternalServerError() *UpdateAppComponentInternalServerError {
	return &UpdateAppComponentInternalServerError{}
}

/*
UpdateAppComponentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateAppComponentInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app component internal server error response has a 2xx status code
func (o *UpdateAppComponentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app component internal server error response has a 3xx status code
func (o *UpdateAppComponentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app component internal server error response has a 4xx status code
func (o *UpdateAppComponentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app component internal server error response has a 5xx status code
func (o *UpdateAppComponentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update app component internal server error response a status code equal to that given
func (o *UpdateAppComponentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update app component internal server error response
func (o *UpdateAppComponentInternalServerError) Code() int {
	return 500
}

func (o *UpdateAppComponentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppComponentInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/components/{component_id}][%d] updateAppComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppComponentInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppComponentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
