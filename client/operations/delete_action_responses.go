// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// DeleteActionReader is a Reader for the DeleteAction structure.
type DeleteActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteActionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteActionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/actions/{action_id}] DeleteAction", response, response.Code())
	}
}

// NewDeleteActionOK creates a DeleteActionOK with default headers values
func NewDeleteActionOK() *DeleteActionOK {
	return &DeleteActionOK{}
}

/*
DeleteActionOK describes a response with status code 200, with default header values.

OK
*/
type DeleteActionOK struct {
	Payload bool
}

// IsSuccess returns true when this delete action o k response has a 2xx status code
func (o *DeleteActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete action o k response has a 3xx status code
func (o *DeleteActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action o k response has a 4xx status code
func (o *DeleteActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete action o k response has a 5xx status code
func (o *DeleteActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action o k response a status code equal to that given
func (o *DeleteActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete action o k response
func (o *DeleteActionOK) Code() int {
	return 200
}

func (o *DeleteActionOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionOK  %+v", 200, o.Payload)
}

func (o *DeleteActionOK) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionOK  %+v", 200, o.Payload)
}

func (o *DeleteActionOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionBadRequest creates a DeleteActionBadRequest with default headers values
func NewDeleteActionBadRequest() *DeleteActionBadRequest {
	return &DeleteActionBadRequest{}
}

/*
DeleteActionBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteActionBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete action bad request response has a 2xx status code
func (o *DeleteActionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action bad request response has a 3xx status code
func (o *DeleteActionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action bad request response has a 4xx status code
func (o *DeleteActionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action bad request response has a 5xx status code
func (o *DeleteActionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action bad request response a status code equal to that given
func (o *DeleteActionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete action bad request response
func (o *DeleteActionBadRequest) Code() int {
	return 400
}

func (o *DeleteActionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteActionBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteActionBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteActionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionUnauthorized creates a DeleteActionUnauthorized with default headers values
func NewDeleteActionUnauthorized() *DeleteActionUnauthorized {
	return &DeleteActionUnauthorized{}
}

/*
DeleteActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteActionUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete action unauthorized response has a 2xx status code
func (o *DeleteActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action unauthorized response has a 3xx status code
func (o *DeleteActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action unauthorized response has a 4xx status code
func (o *DeleteActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action unauthorized response has a 5xx status code
func (o *DeleteActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action unauthorized response a status code equal to that given
func (o *DeleteActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete action unauthorized response
func (o *DeleteActionUnauthorized) Code() int {
	return 401
}

func (o *DeleteActionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteActionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteActionUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionForbidden creates a DeleteActionForbidden with default headers values
func NewDeleteActionForbidden() *DeleteActionForbidden {
	return &DeleteActionForbidden{}
}

/*
DeleteActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteActionForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete action forbidden response has a 2xx status code
func (o *DeleteActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action forbidden response has a 3xx status code
func (o *DeleteActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action forbidden response has a 4xx status code
func (o *DeleteActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action forbidden response has a 5xx status code
func (o *DeleteActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action forbidden response a status code equal to that given
func (o *DeleteActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete action forbidden response
func (o *DeleteActionForbidden) Code() int {
	return 403
}

func (o *DeleteActionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteActionForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteActionForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionNotFound creates a DeleteActionNotFound with default headers values
func NewDeleteActionNotFound() *DeleteActionNotFound {
	return &DeleteActionNotFound{}
}

/*
DeleteActionNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteActionNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete action not found response has a 2xx status code
func (o *DeleteActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action not found response has a 3xx status code
func (o *DeleteActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action not found response has a 4xx status code
func (o *DeleteActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete action not found response has a 5xx status code
func (o *DeleteActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete action not found response a status code equal to that given
func (o *DeleteActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete action not found response
func (o *DeleteActionNotFound) Code() int {
	return 404
}

func (o *DeleteActionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActionNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteActionNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteActionInternalServerError creates a DeleteActionInternalServerError with default headers values
func NewDeleteActionInternalServerError() *DeleteActionInternalServerError {
	return &DeleteActionInternalServerError{}
}

/*
DeleteActionInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteActionInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete action internal server error response has a 2xx status code
func (o *DeleteActionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete action internal server error response has a 3xx status code
func (o *DeleteActionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete action internal server error response has a 4xx status code
func (o *DeleteActionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete action internal server error response has a 5xx status code
func (o *DeleteActionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete action internal server error response a status code equal to that given
func (o *DeleteActionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete action internal server error response
func (o *DeleteActionInternalServerError) Code() int {
	return 500
}

func (o *DeleteActionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteActionInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/actions/{action_id}][%d] deleteActionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteActionInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteActionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
