// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetLatestRunnerHeartBeatReader is a Reader for the GetLatestRunnerHeartBeat structure.
type GetLatestRunnerHeartBeatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLatestRunnerHeartBeatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLatestRunnerHeartBeatOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLatestRunnerHeartBeatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLatestRunnerHeartBeatUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLatestRunnerHeartBeatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLatestRunnerHeartBeatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLatestRunnerHeartBeatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/runners/{runner_id}/heart-beats/latest] GetLatestRunnerHeartBeat", response, response.Code())
	}
}

// NewGetLatestRunnerHeartBeatOK creates a GetLatestRunnerHeartBeatOK with default headers values
func NewGetLatestRunnerHeartBeatOK() *GetLatestRunnerHeartBeatOK {
	return &GetLatestRunnerHeartBeatOK{}
}

/*
GetLatestRunnerHeartBeatOK describes a response with status code 200, with default header values.

OK
*/
type GetLatestRunnerHeartBeatOK struct {
	Payload models.ServiceLatestRunnerHeartBeats
}

// IsSuccess returns true when this get latest runner heart beat o k response has a 2xx status code
func (o *GetLatestRunnerHeartBeatOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get latest runner heart beat o k response has a 3xx status code
func (o *GetLatestRunnerHeartBeatOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat o k response has a 4xx status code
func (o *GetLatestRunnerHeartBeatOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest runner heart beat o k response has a 5xx status code
func (o *GetLatestRunnerHeartBeatOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest runner heart beat o k response a status code equal to that given
func (o *GetLatestRunnerHeartBeatOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get latest runner heart beat o k response
func (o *GetLatestRunnerHeartBeatOK) Code() int {
	return 200
}

func (o *GetLatestRunnerHeartBeatOK) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatOK  %+v", 200, o.Payload)
}

func (o *GetLatestRunnerHeartBeatOK) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatOK  %+v", 200, o.Payload)
}

func (o *GetLatestRunnerHeartBeatOK) GetPayload() models.ServiceLatestRunnerHeartBeats {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestRunnerHeartBeatBadRequest creates a GetLatestRunnerHeartBeatBadRequest with default headers values
func NewGetLatestRunnerHeartBeatBadRequest() *GetLatestRunnerHeartBeatBadRequest {
	return &GetLatestRunnerHeartBeatBadRequest{}
}

/*
GetLatestRunnerHeartBeatBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLatestRunnerHeartBeatBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get latest runner heart beat bad request response has a 2xx status code
func (o *GetLatestRunnerHeartBeatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest runner heart beat bad request response has a 3xx status code
func (o *GetLatestRunnerHeartBeatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat bad request response has a 4xx status code
func (o *GetLatestRunnerHeartBeatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest runner heart beat bad request response has a 5xx status code
func (o *GetLatestRunnerHeartBeatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest runner heart beat bad request response a status code equal to that given
func (o *GetLatestRunnerHeartBeatBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get latest runner heart beat bad request response
func (o *GetLatestRunnerHeartBeatBadRequest) Code() int {
	return 400
}

func (o *GetLatestRunnerHeartBeatBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatBadRequest  %+v", 400, o.Payload)
}

func (o *GetLatestRunnerHeartBeatBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatBadRequest  %+v", 400, o.Payload)
}

func (o *GetLatestRunnerHeartBeatBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestRunnerHeartBeatUnauthorized creates a GetLatestRunnerHeartBeatUnauthorized with default headers values
func NewGetLatestRunnerHeartBeatUnauthorized() *GetLatestRunnerHeartBeatUnauthorized {
	return &GetLatestRunnerHeartBeatUnauthorized{}
}

/*
GetLatestRunnerHeartBeatUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLatestRunnerHeartBeatUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get latest runner heart beat unauthorized response has a 2xx status code
func (o *GetLatestRunnerHeartBeatUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest runner heart beat unauthorized response has a 3xx status code
func (o *GetLatestRunnerHeartBeatUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat unauthorized response has a 4xx status code
func (o *GetLatestRunnerHeartBeatUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest runner heart beat unauthorized response has a 5xx status code
func (o *GetLatestRunnerHeartBeatUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest runner heart beat unauthorized response a status code equal to that given
func (o *GetLatestRunnerHeartBeatUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get latest runner heart beat unauthorized response
func (o *GetLatestRunnerHeartBeatUnauthorized) Code() int {
	return 401
}

func (o *GetLatestRunnerHeartBeatUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLatestRunnerHeartBeatUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLatestRunnerHeartBeatUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestRunnerHeartBeatForbidden creates a GetLatestRunnerHeartBeatForbidden with default headers values
func NewGetLatestRunnerHeartBeatForbidden() *GetLatestRunnerHeartBeatForbidden {
	return &GetLatestRunnerHeartBeatForbidden{}
}

/*
GetLatestRunnerHeartBeatForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLatestRunnerHeartBeatForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get latest runner heart beat forbidden response has a 2xx status code
func (o *GetLatestRunnerHeartBeatForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest runner heart beat forbidden response has a 3xx status code
func (o *GetLatestRunnerHeartBeatForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat forbidden response has a 4xx status code
func (o *GetLatestRunnerHeartBeatForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest runner heart beat forbidden response has a 5xx status code
func (o *GetLatestRunnerHeartBeatForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest runner heart beat forbidden response a status code equal to that given
func (o *GetLatestRunnerHeartBeatForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get latest runner heart beat forbidden response
func (o *GetLatestRunnerHeartBeatForbidden) Code() int {
	return 403
}

func (o *GetLatestRunnerHeartBeatForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatForbidden  %+v", 403, o.Payload)
}

func (o *GetLatestRunnerHeartBeatForbidden) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatForbidden  %+v", 403, o.Payload)
}

func (o *GetLatestRunnerHeartBeatForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestRunnerHeartBeatNotFound creates a GetLatestRunnerHeartBeatNotFound with default headers values
func NewGetLatestRunnerHeartBeatNotFound() *GetLatestRunnerHeartBeatNotFound {
	return &GetLatestRunnerHeartBeatNotFound{}
}

/*
GetLatestRunnerHeartBeatNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLatestRunnerHeartBeatNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get latest runner heart beat not found response has a 2xx status code
func (o *GetLatestRunnerHeartBeatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest runner heart beat not found response has a 3xx status code
func (o *GetLatestRunnerHeartBeatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat not found response has a 4xx status code
func (o *GetLatestRunnerHeartBeatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get latest runner heart beat not found response has a 5xx status code
func (o *GetLatestRunnerHeartBeatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get latest runner heart beat not found response a status code equal to that given
func (o *GetLatestRunnerHeartBeatNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get latest runner heart beat not found response
func (o *GetLatestRunnerHeartBeatNotFound) Code() int {
	return 404
}

func (o *GetLatestRunnerHeartBeatNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatNotFound  %+v", 404, o.Payload)
}

func (o *GetLatestRunnerHeartBeatNotFound) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatNotFound  %+v", 404, o.Payload)
}

func (o *GetLatestRunnerHeartBeatNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLatestRunnerHeartBeatInternalServerError creates a GetLatestRunnerHeartBeatInternalServerError with default headers values
func NewGetLatestRunnerHeartBeatInternalServerError() *GetLatestRunnerHeartBeatInternalServerError {
	return &GetLatestRunnerHeartBeatInternalServerError{}
}

/*
GetLatestRunnerHeartBeatInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetLatestRunnerHeartBeatInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get latest runner heart beat internal server error response has a 2xx status code
func (o *GetLatestRunnerHeartBeatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get latest runner heart beat internal server error response has a 3xx status code
func (o *GetLatestRunnerHeartBeatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get latest runner heart beat internal server error response has a 4xx status code
func (o *GetLatestRunnerHeartBeatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get latest runner heart beat internal server error response has a 5xx status code
func (o *GetLatestRunnerHeartBeatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get latest runner heart beat internal server error response a status code equal to that given
func (o *GetLatestRunnerHeartBeatInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get latest runner heart beat internal server error response
func (o *GetLatestRunnerHeartBeatInternalServerError) Code() int {
	return 500
}

func (o *GetLatestRunnerHeartBeatInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLatestRunnerHeartBeatInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/runners/{runner_id}/heart-beats/latest][%d] getLatestRunnerHeartBeatInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLatestRunnerHeartBeatInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetLatestRunnerHeartBeatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
