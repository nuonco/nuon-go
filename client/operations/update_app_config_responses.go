// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateAppConfigReader is a Reader for the UpdateAppConfig structure.
type UpdateAppConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateAppConfigCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAppConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAppConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAppConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAppConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/apps/{app_id}/config/{app_config_id}] UpdateAppConfig", response, response.Code())
	}
}

// NewUpdateAppConfigCreated creates a UpdateAppConfigCreated with default headers values
func NewUpdateAppConfigCreated() *UpdateAppConfigCreated {
	return &UpdateAppConfigCreated{}
}

/*
UpdateAppConfigCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAppConfigCreated struct {
	Payload *models.AppAppConfig
}

// IsSuccess returns true when this update app config created response has a 2xx status code
func (o *UpdateAppConfigCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update app config created response has a 3xx status code
func (o *UpdateAppConfigCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config created response has a 4xx status code
func (o *UpdateAppConfigCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app config created response has a 5xx status code
func (o *UpdateAppConfigCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update app config created response a status code equal to that given
func (o *UpdateAppConfigCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update app config created response
func (o *UpdateAppConfigCreated) Code() int {
	return 201
}

func (o *UpdateAppConfigCreated) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigCreated  %+v", 201, o.Payload)
}

func (o *UpdateAppConfigCreated) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigCreated  %+v", 201, o.Payload)
}

func (o *UpdateAppConfigCreated) GetPayload() *models.AppAppConfig {
	return o.Payload
}

func (o *UpdateAppConfigCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppAppConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppConfigBadRequest creates a UpdateAppConfigBadRequest with default headers values
func NewUpdateAppConfigBadRequest() *UpdateAppConfigBadRequest {
	return &UpdateAppConfigBadRequest{}
}

/*
UpdateAppConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAppConfigBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app config bad request response has a 2xx status code
func (o *UpdateAppConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app config bad request response has a 3xx status code
func (o *UpdateAppConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config bad request response has a 4xx status code
func (o *UpdateAppConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app config bad request response has a 5xx status code
func (o *UpdateAppConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update app config bad request response a status code equal to that given
func (o *UpdateAppConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update app config bad request response
func (o *UpdateAppConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateAppConfigBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppConfigBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateAppConfigBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppConfigUnauthorized creates a UpdateAppConfigUnauthorized with default headers values
func NewUpdateAppConfigUnauthorized() *UpdateAppConfigUnauthorized {
	return &UpdateAppConfigUnauthorized{}
}

/*
UpdateAppConfigUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAppConfigUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app config unauthorized response has a 2xx status code
func (o *UpdateAppConfigUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app config unauthorized response has a 3xx status code
func (o *UpdateAppConfigUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config unauthorized response has a 4xx status code
func (o *UpdateAppConfigUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app config unauthorized response has a 5xx status code
func (o *UpdateAppConfigUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update app config unauthorized response a status code equal to that given
func (o *UpdateAppConfigUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update app config unauthorized response
func (o *UpdateAppConfigUnauthorized) Code() int {
	return 401
}

func (o *UpdateAppConfigUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppConfigUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAppConfigUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppConfigForbidden creates a UpdateAppConfigForbidden with default headers values
func NewUpdateAppConfigForbidden() *UpdateAppConfigForbidden {
	return &UpdateAppConfigForbidden{}
}

/*
UpdateAppConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAppConfigForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app config forbidden response has a 2xx status code
func (o *UpdateAppConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app config forbidden response has a 3xx status code
func (o *UpdateAppConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config forbidden response has a 4xx status code
func (o *UpdateAppConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app config forbidden response has a 5xx status code
func (o *UpdateAppConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update app config forbidden response a status code equal to that given
func (o *UpdateAppConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update app config forbidden response
func (o *UpdateAppConfigForbidden) Code() int {
	return 403
}

func (o *UpdateAppConfigForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppConfigForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAppConfigForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppConfigNotFound creates a UpdateAppConfigNotFound with default headers values
func NewUpdateAppConfigNotFound() *UpdateAppConfigNotFound {
	return &UpdateAppConfigNotFound{}
}

/*
UpdateAppConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAppConfigNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app config not found response has a 2xx status code
func (o *UpdateAppConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app config not found response has a 3xx status code
func (o *UpdateAppConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config not found response has a 4xx status code
func (o *UpdateAppConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update app config not found response has a 5xx status code
func (o *UpdateAppConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update app config not found response a status code equal to that given
func (o *UpdateAppConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update app config not found response
func (o *UpdateAppConfigNotFound) Code() int {
	return 404
}

func (o *UpdateAppConfigNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppConfigNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAppConfigNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppConfigInternalServerError creates a UpdateAppConfigInternalServerError with default headers values
func NewUpdateAppConfigInternalServerError() *UpdateAppConfigInternalServerError {
	return &UpdateAppConfigInternalServerError{}
}

/*
UpdateAppConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateAppConfigInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update app config internal server error response has a 2xx status code
func (o *UpdateAppConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update app config internal server error response has a 3xx status code
func (o *UpdateAppConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update app config internal server error response has a 4xx status code
func (o *UpdateAppConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update app config internal server error response has a 5xx status code
func (o *UpdateAppConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update app config internal server error response a status code equal to that given
func (o *UpdateAppConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update app config internal server error response
func (o *UpdateAppConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateAppConfigInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppConfigInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/apps/{app_id}/config/{app_config_id}][%d] updateAppConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateAppConfigInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateAppConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
