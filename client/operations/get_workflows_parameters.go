// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWorkflowsParams creates a new GetWorkflowsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWorkflowsParams() *GetWorkflowsParams {
	return &GetWorkflowsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkflowsParamsWithTimeout creates a new GetWorkflowsParams object
// with the ability to set a timeout on a request.
func NewGetWorkflowsParamsWithTimeout(timeout time.Duration) *GetWorkflowsParams {
	return &GetWorkflowsParams{
		timeout: timeout,
	}
}

// NewGetWorkflowsParamsWithContext creates a new GetWorkflowsParams object
// with the ability to set a context for a request.
func NewGetWorkflowsParamsWithContext(ctx context.Context) *GetWorkflowsParams {
	return &GetWorkflowsParams{
		Context: ctx,
	}
}

// NewGetWorkflowsParamsWithHTTPClient creates a new GetWorkflowsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWorkflowsParamsWithHTTPClient(client *http.Client) *GetWorkflowsParams {
	return &GetWorkflowsParams{
		HTTPClient: client,
	}
}

/*
GetWorkflowsParams contains all the parameters to send to the API endpoint

	for the get workflows operation.

	Typically these are written to a http.Request.
*/
type GetWorkflowsParams struct {

	/* CreatedAtGte.

	   filter workflows created after timestamp (RFC3339 format)
	*/
	CreatedAtGte *string

	/* CreatedAtLte.

	   filter workflows created before timestamp (RFC3339 format)
	*/
	CreatedAtLte *string

	/* InstallID.

	   install ID
	*/
	InstallID string

	/* Limit.

	   limit of results to return

	   Default: 10
	*/
	Limit *int64

	/* Offset.

	   offset of results to return
	*/
	Offset *int64

	/* Page.

	   page number of results to return
	*/
	Page *int64

	/* Planonly.

	   exclude plan only workflows when set to false

	   Default: true
	*/
	Planonly *bool

	/* Type.

	   filter by workflow type
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkflowsParams) WithDefaults() *GetWorkflowsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get workflows params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWorkflowsParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)

		pageDefault = int64(0)

		planonlyDefault = bool(true)
	)

	val := GetWorkflowsParams{
		Limit:    &limitDefault,
		Offset:   &offsetDefault,
		Page:     &pageDefault,
		Planonly: &planonlyDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get workflows params
func (o *GetWorkflowsParams) WithTimeout(timeout time.Duration) *GetWorkflowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workflows params
func (o *GetWorkflowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workflows params
func (o *GetWorkflowsParams) WithContext(ctx context.Context) *GetWorkflowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workflows params
func (o *GetWorkflowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workflows params
func (o *GetWorkflowsParams) WithHTTPClient(client *http.Client) *GetWorkflowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workflows params
func (o *GetWorkflowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAtGte adds the createdAtGte to the get workflows params
func (o *GetWorkflowsParams) WithCreatedAtGte(createdAtGte *string) *GetWorkflowsParams {
	o.SetCreatedAtGte(createdAtGte)
	return o
}

// SetCreatedAtGte adds the createdAtGte to the get workflows params
func (o *GetWorkflowsParams) SetCreatedAtGte(createdAtGte *string) {
	o.CreatedAtGte = createdAtGte
}

// WithCreatedAtLte adds the createdAtLte to the get workflows params
func (o *GetWorkflowsParams) WithCreatedAtLte(createdAtLte *string) *GetWorkflowsParams {
	o.SetCreatedAtLte(createdAtLte)
	return o
}

// SetCreatedAtLte adds the createdAtLte to the get workflows params
func (o *GetWorkflowsParams) SetCreatedAtLte(createdAtLte *string) {
	o.CreatedAtLte = createdAtLte
}

// WithInstallID adds the installID to the get workflows params
func (o *GetWorkflowsParams) WithInstallID(installID string) *GetWorkflowsParams {
	o.SetInstallID(installID)
	return o
}

// SetInstallID adds the installId to the get workflows params
func (o *GetWorkflowsParams) SetInstallID(installID string) {
	o.InstallID = installID
}

// WithLimit adds the limit to the get workflows params
func (o *GetWorkflowsParams) WithLimit(limit *int64) *GetWorkflowsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get workflows params
func (o *GetWorkflowsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get workflows params
func (o *GetWorkflowsParams) WithOffset(offset *int64) *GetWorkflowsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get workflows params
func (o *GetWorkflowsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the get workflows params
func (o *GetWorkflowsParams) WithPage(page *int64) *GetWorkflowsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get workflows params
func (o *GetWorkflowsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPlanonly adds the planonly to the get workflows params
func (o *GetWorkflowsParams) WithPlanonly(planonly *bool) *GetWorkflowsParams {
	o.SetPlanonly(planonly)
	return o
}

// SetPlanonly adds the planonly to the get workflows params
func (o *GetWorkflowsParams) SetPlanonly(planonly *bool) {
	o.Planonly = planonly
}

// WithType adds the typeVar to the get workflows params
func (o *GetWorkflowsParams) WithType(typeVar *string) *GetWorkflowsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get workflows params
func (o *GetWorkflowsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkflowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAtGte != nil {

		// query param created_at_gte
		var qrCreatedAtGte string

		if o.CreatedAtGte != nil {
			qrCreatedAtGte = *o.CreatedAtGte
		}
		qCreatedAtGte := qrCreatedAtGte
		if qCreatedAtGte != "" {

			if err := r.SetQueryParam("created_at_gte", qCreatedAtGte); err != nil {
				return err
			}
		}
	}

	if o.CreatedAtLte != nil {

		// query param created_at_lte
		var qrCreatedAtLte string

		if o.CreatedAtLte != nil {
			qrCreatedAtLte = *o.CreatedAtLte
		}
		qCreatedAtLte := qrCreatedAtLte
		if qCreatedAtLte != "" {

			if err := r.SetQueryParam("created_at_lte", qCreatedAtLte); err != nil {
				return err
			}
		}
	}

	// path param install_id
	if err := r.SetPathParam("install_id", o.InstallID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.Planonly != nil {

		// query param planonly
		var qrPlanonly bool

		if o.Planonly != nil {
			qrPlanonly = *o.Planonly
		}
		qPlanonly := swag.FormatBool(qrPlanonly)
		if qPlanonly != "" {

			if err := r.SetQueryParam("planonly", qPlanonly); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
