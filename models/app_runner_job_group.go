// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerJobGroup app runner job group
//
// swagger:model app.RunnerJobGroup
type AppRunnerJobGroup string

func NewAppRunnerJobGroup(value AppRunnerJobGroup) *AppRunnerJobGroup {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerJobGroup.
func (m AppRunnerJobGroup) Pointer() *AppRunnerJobGroup {
	return &m
}

const (

	// AppRunnerJobGroupHealthDashChecks captures enum value "health-checks"
	AppRunnerJobGroupHealthDashChecks AppRunnerJobGroup = "health-checks"

	// AppRunnerJobGroupSync captures enum value "sync"
	AppRunnerJobGroupSync AppRunnerJobGroup = "sync"

	// AppRunnerJobGroupBuild captures enum value "build"
	AppRunnerJobGroupBuild AppRunnerJobGroup = "build"

	// AppRunnerJobGroupDeploy captures enum value "deploy"
	AppRunnerJobGroupDeploy AppRunnerJobGroup = "deploy"

	// AppRunnerJobGroupSandbox captures enum value "sandbox"
	AppRunnerJobGroupSandbox AppRunnerJobGroup = "sandbox"

	// AppRunnerJobGroupRunner captures enum value "runner"
	AppRunnerJobGroupRunner AppRunnerJobGroup = "runner"

	// AppRunnerJobGroupOperations captures enum value "operations"
	AppRunnerJobGroupOperations AppRunnerJobGroup = "operations"

	// AppRunnerJobGroupUser captures enum value "user"
	AppRunnerJobGroupUser AppRunnerJobGroup = "user"

	// AppRunnerJobGroupEmpty captures enum value ""
	AppRunnerJobGroupEmpty AppRunnerJobGroup = ""

	// AppRunnerJobGroupAny captures enum value "any"
	AppRunnerJobGroupAny AppRunnerJobGroup = "any"
)

// for schema
var appRunnerJobGroupEnum []interface{}

func init() {
	var res []AppRunnerJobGroup
	if err := json.Unmarshal([]byte(`["health-checks","sync","build","deploy","sandbox","runner","operations","user","","any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerJobGroupEnum = append(appRunnerJobGroupEnum, v)
	}
}

func (m AppRunnerJobGroup) validateAppRunnerJobGroupEnum(path, location string, value AppRunnerJobGroup) error {
	if err := validate.EnumCase(path, location, value, appRunnerJobGroupEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner job group
func (m AppRunnerJobGroup) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerJobGroupEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner job group based on context it is used
func (m AppRunnerJobGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
