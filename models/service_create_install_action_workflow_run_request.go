// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateInstallActionWorkflowRunRequest service create install action workflow run request
//
// swagger:model service.CreateInstallActionWorkflowRunRequest
type ServiceCreateInstallActionWorkflowRunRequest struct {

	// action workflow config id
	// Required: true
	ActionWorkflowConfigID *string `json:"action_workflow_config_id"`
}

// Validate validates this service create install action workflow run request
func (m *ServiceCreateInstallActionWorkflowRunRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionWorkflowConfigID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallActionWorkflowRunRequest) validateActionWorkflowConfigID(formats strfmt.Registry) error {

	if err := validate.Required("action_workflow_config_id", "body", m.ActionWorkflowConfigID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service create install action workflow run request based on context it is used
func (m *ServiceCreateInstallActionWorkflowRunRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallActionWorkflowRunRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallActionWorkflowRunRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallActionWorkflowRunRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
