// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerJobExecutionStatus app runner job execution status
//
// swagger:model app.RunnerJobExecutionStatus
type AppRunnerJobExecutionStatus string

func NewAppRunnerJobExecutionStatus(value AppRunnerJobExecutionStatus) *AppRunnerJobExecutionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerJobExecutionStatus.
func (m AppRunnerJobExecutionStatus) Pointer() *AppRunnerJobExecutionStatus {
	return &m
}

const (

	// AppRunnerJobExecutionStatusPending captures enum value "pending"
	AppRunnerJobExecutionStatusPending AppRunnerJobExecutionStatus = "pending"

	// AppRunnerJobExecutionStatusInitializing captures enum value "initializing"
	AppRunnerJobExecutionStatusInitializing AppRunnerJobExecutionStatus = "initializing"

	// AppRunnerJobExecutionStatusInDashProgress captures enum value "in-progress"
	AppRunnerJobExecutionStatusInDashProgress AppRunnerJobExecutionStatus = "in-progress"

	// AppRunnerJobExecutionStatusCleaningDashUp captures enum value "cleaning-up"
	AppRunnerJobExecutionStatusCleaningDashUp AppRunnerJobExecutionStatus = "cleaning-up"

	// AppRunnerJobExecutionStatusFinished captures enum value "finished"
	AppRunnerJobExecutionStatusFinished AppRunnerJobExecutionStatus = "finished"

	// AppRunnerJobExecutionStatusFailed captures enum value "failed"
	AppRunnerJobExecutionStatusFailed AppRunnerJobExecutionStatus = "failed"

	// AppRunnerJobExecutionStatusTimedDashOut captures enum value "timed-out"
	AppRunnerJobExecutionStatusTimedDashOut AppRunnerJobExecutionStatus = "timed-out"

	// AppRunnerJobExecutionStatusNotDashAttempted captures enum value "not-attempted"
	AppRunnerJobExecutionStatusNotDashAttempted AppRunnerJobExecutionStatus = "not-attempted"

	// AppRunnerJobExecutionStatusCancelled captures enum value "cancelled"
	AppRunnerJobExecutionStatusCancelled AppRunnerJobExecutionStatus = "cancelled"

	// AppRunnerJobExecutionStatusUnknown captures enum value "unknown"
	AppRunnerJobExecutionStatusUnknown AppRunnerJobExecutionStatus = "unknown"
)

// for schema
var appRunnerJobExecutionStatusEnum []interface{}

func init() {
	var res []AppRunnerJobExecutionStatus
	if err := json.Unmarshal([]byte(`["pending","initializing","in-progress","cleaning-up","finished","failed","timed-out","not-attempted","cancelled","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerJobExecutionStatusEnum = append(appRunnerJobExecutionStatusEnum, v)
	}
}

func (m AppRunnerJobExecutionStatus) validateAppRunnerJobExecutionStatusEnum(path, location string, value AppRunnerJobExecutionStatus) error {
	if err := validate.EnumCase(path, location, value, appRunnerJobExecutionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner job execution status
func (m AppRunnerJobExecutionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerJobExecutionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner job execution status based on context it is used
func (m AppRunnerJobExecutionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
