// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateInstallV2Request service create install v2 request
//
// swagger:model service.CreateInstallV2Request
type ServiceCreateInstallV2Request struct {

	// app id
	// Required: true
	AppID *string `json:"app_id"`

	// aws account
	AwsAccount *ServiceCreateInstallV2RequestAwsAccount `json:"aws_account,omitempty"`

	// azure account
	AzureAccount *ServiceCreateInstallV2RequestAzureAccount `json:"azure_account,omitempty"`

	// inputs
	Inputs map[string]string `json:"inputs,omitempty"`

	// install config
	InstallConfig *HelpersCreateInstallConfigParams `json:"install_config,omitempty"`

	// metadata
	Metadata *HelpersInstallMetadata `json:"metadata,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this service create install v2 request
func (m *ServiceCreateInstallV2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallV2Request) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) validateAwsAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAccount) { // not required
		return nil
	}

	if m.AwsAccount != nil {
		if err := m.AwsAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_account")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) validateAzureAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureAccount) { // not required
		return nil
	}

	if m.AzureAccount != nil {
		if err := m.AzureAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_account")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) validateInstallConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallConfig) { // not required
		return nil
	}

	if m.InstallConfig != nil {
		if err := m.InstallConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_config")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service create install v2 request based on the context it is used
func (m *ServiceCreateInstallV2Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallV2Request) contextValidateAwsAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAccount != nil {

		if swag.IsZero(m.AwsAccount) { // not required
			return nil
		}

		if err := m.AwsAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_account")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) contextValidateAzureAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureAccount != nil {

		if swag.IsZero(m.AzureAccount) { // not required
			return nil
		}

		if err := m.AzureAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_account")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) contextValidateInstallConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallConfig != nil {

		if swag.IsZero(m.InstallConfig) { // not required
			return nil
		}

		if err := m.InstallConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_config")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallV2Request) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallV2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallV2Request) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallV2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceCreateInstallV2RequestAwsAccount service create install v2 request aws account
//
// swagger:model ServiceCreateInstallV2RequestAwsAccount
type ServiceCreateInstallV2RequestAwsAccount struct {

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this service create install v2 request aws account
func (m *ServiceCreateInstallV2RequestAwsAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service create install v2 request aws account based on context it is used
func (m *ServiceCreateInstallV2RequestAwsAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallV2RequestAwsAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallV2RequestAwsAccount) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallV2RequestAwsAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceCreateInstallV2RequestAzureAccount service create install v2 request azure account
//
// swagger:model ServiceCreateInstallV2RequestAzureAccount
type ServiceCreateInstallV2RequestAzureAccount struct {

	// location
	Location string `json:"location,omitempty"`
}

// Validate validates this service create install v2 request azure account
func (m *ServiceCreateInstallV2RequestAzureAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service create install v2 request azure account based on context it is used
func (m *ServiceCreateInstallV2RequestAzureAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallV2RequestAzureAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallV2RequestAzureAccount) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallV2RequestAzureAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
