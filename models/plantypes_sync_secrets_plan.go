// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesSyncSecretsPlan plantypes sync secrets plan
//
// swagger:model plantypes.SyncSecretsPlan
type PlantypesSyncSecretsPlan struct {

	// aws auth
	AwsAuth *GithubComPowertoolsdevMonoPkgAwsCredentialsConfig `json:"aws_auth,omitempty"`

	// azure auth
	AzureAuth *GithubComPowertoolsdevMonoPkgAzureCredentialsConfig `json:"azure_auth,omitempty"`

	// cluster info
	ClusterInfo *KubeClusterInfo `json:"cluster_info,omitempty"`

	// kubernetes secrets
	KubernetesSecrets []*PlantypesKubernetesSecretSync `json:"kubernetes_secrets"`

	// sandbox mode
	SandboxMode *PlantypesSandboxMode `json:"sandbox_mode,omitempty"`
}

// Validate validates this plantypes sync secrets plan
func (m *PlantypesSyncSecretsPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesSecrets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesSyncSecretsPlan) validateAwsAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAuth) { // not required
		return nil
	}

	if m.AwsAuth != nil {
		if err := m.AwsAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) validateAzureAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureAuth) { // not required
		return nil
	}

	if m.AzureAuth != nil {
		if err := m.AzureAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_info")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) validateKubernetesSecrets(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesSecrets) { // not required
		return nil
	}

	for i := 0; i < len(m.KubernetesSecrets); i++ {
		if swag.IsZero(m.KubernetesSecrets[i]) { // not required
			continue
		}

		if m.KubernetesSecrets[i] != nil {
			if err := m.KubernetesSecrets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetes_secrets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetes_secrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) validateSandboxMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxMode) { // not required
		return nil
	}

	if m.SandboxMode != nil {
		if err := m.SandboxMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes sync secrets plan based on the context it is used
func (m *PlantypesSyncSecretsPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesSyncSecretsPlan) contextValidateAwsAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAuth != nil {

		if swag.IsZero(m.AwsAuth) { // not required
			return nil
		}

		if err := m.AwsAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) contextValidateAzureAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureAuth != nil {

		if swag.IsZero(m.AzureAuth) { // not required
			return nil
		}

		if err := m.AzureAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_info")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) contextValidateKubernetesSecrets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.KubernetesSecrets); i++ {

		if m.KubernetesSecrets[i] != nil {

			if swag.IsZero(m.KubernetesSecrets[i]) { // not required
				return nil
			}

			if err := m.KubernetesSecrets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("kubernetes_secrets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("kubernetes_secrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlantypesSyncSecretsPlan) contextValidateSandboxMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxMode != nil {

		if swag.IsZero(m.SandboxMode) { // not required
			return nil
		}

		if err := m.SandboxMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesSyncSecretsPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesSyncSecretsPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesSyncSecretsPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
