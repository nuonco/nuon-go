// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppAppConfig app app config
//
// swagger:model app.AppConfig
type AppAppConfig struct {

	// action workflow configs
	ActionWorkflowConfigs []*AppActionWorkflowConfig `json:"action_workflow_configs"`

	// app id
	AppID string `json:"app_id,omitempty"`

	// break glass
	BreakGlass *AppAppBreakGlassConfig `json:"break_glass,omitempty"`

	// checksum
	Checksum string `json:"checksum,omitempty"`

	// component config connections
	ComponentConfigConnections []*AppComponentConfigConnection `json:"component_config_connections"`

	// component ids
	ComponentIds []string `json:"component_ids"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// input
	Input *AppAppInputConfig `json:"input,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// permissions
	Permissions *AppAppPermissionsConfig `json:"permissions,omitempty"`

	// policies
	Policies *AppAppPoliciesConfig `json:"policies,omitempty"`

	// readme
	Readme string `json:"readme,omitempty"`

	// runner
	Runner *AppAppRunnerConfig `json:"runner,omitempty"`

	// sandbox
	Sandbox *AppAppSandboxConfig `json:"sandbox,omitempty"`

	// secrets
	Secrets *AppAppSecretsConfig `json:"secrets,omitempty"`

	// stack
	Stack *AppAppStackConfig `json:"stack,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// status
	Status AppAppConfigStatus `json:"status,omitempty"`

	// status description
	StatusDescription string `json:"status_description,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// fields that are filled in via after query or views
	Version int64 `json:"version,omitempty"`
}

// Validate validates this app app config
func (m *AppAppConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionWorkflowConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreakGlass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentConfigConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandbox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecrets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppAppConfig) validateActionWorkflowConfigs(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionWorkflowConfigs) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionWorkflowConfigs); i++ {
		if swag.IsZero(m.ActionWorkflowConfigs[i]) { // not required
			continue
		}

		if m.ActionWorkflowConfigs[i] != nil {
			if err := m.ActionWorkflowConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("action_workflow_configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("action_workflow_configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppAppConfig) validateBreakGlass(formats strfmt.Registry) error {
	if swag.IsZero(m.BreakGlass) { // not required
		return nil
	}

	if m.BreakGlass != nil {
		if err := m.BreakGlass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("break_glass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("break_glass")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateComponentConfigConnections(formats strfmt.Registry) error {
	if swag.IsZero(m.ComponentConfigConnections) { // not required
		return nil
	}

	for i := 0; i < len(m.ComponentConfigConnections); i++ {
		if swag.IsZero(m.ComponentConfigConnections[i]) { // not required
			continue
		}

		if m.ComponentConfigConnections[i] != nil {
			if err := m.ComponentConfigConnections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("component_config_connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("component_config_connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppAppConfig) validateInput(formats strfmt.Registry) error {
	if swag.IsZero(m.Input) { // not required
		return nil
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	if m.Policies != nil {
		if err := m.Policies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateRunner(formats strfmt.Registry) error {
	if swag.IsZero(m.Runner) { // not required
		return nil
	}

	if m.Runner != nil {
		if err := m.Runner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateSandbox(formats strfmt.Registry) error {
	if swag.IsZero(m.Sandbox) { // not required
		return nil
	}

	if m.Sandbox != nil {
		if err := m.Sandbox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateSecrets(formats strfmt.Registry) error {
	if swag.IsZero(m.Secrets) { // not required
		return nil
	}

	if m.Secrets != nil {
		if err := m.Secrets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secrets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secrets")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateStack(formats strfmt.Registry) error {
	if swag.IsZero(m.Stack) { // not required
		return nil
	}

	if m.Stack != nil {
		if err := m.Stack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this app app config based on the context it is used
func (m *AppAppConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionWorkflowConfigs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBreakGlass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComponentConfigConnections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandbox(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecrets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppAppConfig) contextValidateActionWorkflowConfigs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActionWorkflowConfigs); i++ {

		if m.ActionWorkflowConfigs[i] != nil {

			if swag.IsZero(m.ActionWorkflowConfigs[i]) { // not required
				return nil
			}

			if err := m.ActionWorkflowConfigs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("action_workflow_configs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("action_workflow_configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppAppConfig) contextValidateBreakGlass(ctx context.Context, formats strfmt.Registry) error {

	if m.BreakGlass != nil {

		if swag.IsZero(m.BreakGlass) { // not required
			return nil
		}

		if err := m.BreakGlass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("break_glass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("break_glass")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateComponentConfigConnections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ComponentConfigConnections); i++ {

		if m.ComponentConfigConnections[i] != nil {

			if swag.IsZero(m.ComponentConfigConnections[i]) { // not required
				return nil
			}

			if err := m.ComponentConfigConnections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("component_config_connections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("component_config_connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppAppConfig) contextValidateInput(ctx context.Context, formats strfmt.Registry) error {

	if m.Input != nil {

		if swag.IsZero(m.Input) { // not required
			return nil
		}

		if err := m.Input.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {

		if swag.IsZero(m.Permissions) { // not required
			return nil
		}

		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	if m.Policies != nil {

		if swag.IsZero(m.Policies) { // not required
			return nil
		}

		if err := m.Policies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policies")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateRunner(ctx context.Context, formats strfmt.Registry) error {

	if m.Runner != nil {

		if swag.IsZero(m.Runner) { // not required
			return nil
		}

		if err := m.Runner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateSandbox(ctx context.Context, formats strfmt.Registry) error {

	if m.Sandbox != nil {

		if swag.IsZero(m.Sandbox) { // not required
			return nil
		}

		if err := m.Sandbox.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateSecrets(ctx context.Context, formats strfmt.Registry) error {

	if m.Secrets != nil {

		if swag.IsZero(m.Secrets) { // not required
			return nil
		}

		if err := m.Secrets.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secrets")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("secrets")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateStack(ctx context.Context, formats strfmt.Registry) error {

	if m.Stack != nil {

		if swag.IsZero(m.Stack) { // not required
			return nil
		}

		if err := m.Stack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

func (m *AppAppConfig) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppAppConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppAppConfig) UnmarshalBinary(b []byte) error {
	var res AppAppConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
