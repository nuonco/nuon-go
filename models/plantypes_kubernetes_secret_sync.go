// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesKubernetesSecretSync plantypes kubernetes secret sync
//
// swagger:model plantypes.KubernetesSecretSync
type PlantypesKubernetesSecretSync struct {

	// NOTE(jm): this should probably come from the app config, but for now we just use string parsing to avoid
	// updating the runner job and save time.
	Format string `json:"format,omitempty"`

	// key name
	KeyName string `json:"key_name,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// secret arn
	SecretArn string `json:"secret_arn,omitempty"`

	// the name of the secret from the config
	SecretName string `json:"secret_name,omitempty"`
}

// Validate validates this plantypes kubernetes secret sync
func (m *PlantypesKubernetesSecretSync) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this plantypes kubernetes secret sync based on context it is used
func (m *PlantypesKubernetesSecretSync) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesKubernetesSecretSync) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesKubernetesSecretSync) UnmarshalBinary(b []byte) error {
	var res PlantypesKubernetesSecretSync
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
