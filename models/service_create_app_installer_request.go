// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateAppInstallerRequest service create app installer request
//
// swagger:model service.CreateAppInstallerRequest
type ServiceCreateAppInstallerRequest struct {

	// app id
	// Required: true
	AppID *string `json:"app_id"`

	// description
	// Required: true
	Description *string `json:"description"`

	// links
	Links *ServiceCreateAppInstallerRequestLinks `json:"links,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// post install markdown
	PostInstallMarkdown string `json:"post_install_markdown,omitempty"`

	// slug
	// Required: true
	Slug *string `json:"slug"`
}

// Validate validates this service create app installer request
func (m *ServiceCreateAppInstallerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppInstallerRequest) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequest) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequest) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequest) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service create app installer request based on the context it is used
func (m *ServiceCreateAppInstallerRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppInstallerRequest) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {

		if swag.IsZero(m.Links) { // not required
			return nil
		}

		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateAppInstallerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateAppInstallerRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateAppInstallerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceCreateAppInstallerRequestLinks service create app installer request links
//
// swagger:model ServiceCreateAppInstallerRequestLinks
type ServiceCreateAppInstallerRequestLinks struct {

	// community
	// Required: true
	Community *string `json:"community"`

	// demo
	Demo string `json:"demo,omitempty"`

	// documentation
	// Required: true
	Documentation *string `json:"documentation"`

	// github
	// Required: true
	Github *string `json:"github"`

	// homepage
	// Required: true
	Homepage *string `json:"homepage"`

	// logo
	// Required: true
	Logo *string `json:"logo"`
}

// Validate validates this service create app installer request links
func (m *ServiceCreateAppInstallerRequestLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGithub(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHomepage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppInstallerRequestLinks) validateCommunity(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"community", "body", m.Community); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequestLinks) validateDocumentation(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"documentation", "body", m.Documentation); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequestLinks) validateGithub(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"github", "body", m.Github); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequestLinks) validateHomepage(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"homepage", "body", m.Homepage); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppInstallerRequestLinks) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("links"+"."+"logo", "body", m.Logo); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service create app installer request links based on context it is used
func (m *ServiceCreateAppInstallerRequestLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateAppInstallerRequestLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateAppInstallerRequestLinks) UnmarshalBinary(b []byte) error {
	var res ServiceCreateAppInstallerRequestLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
