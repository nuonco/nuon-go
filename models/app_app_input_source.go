// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppAppInputSource app app input source
//
// swagger:model app.AppInputSource
type AppAppInputSource string

func NewAppAppInputSource(value AppAppInputSource) *AppAppInputSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppAppInputSource.
func (m AppAppInputSource) Pointer() *AppAppInputSource {
	return &m
}

const (

	// AppAppInputSourceVendor captures enum value "vendor"
	AppAppInputSourceVendor AppAppInputSource = "vendor"

	// AppAppInputSourceCustomer captures enum value "customer"
	AppAppInputSourceCustomer AppAppInputSource = "customer"
)

// for schema
var appAppInputSourceEnum []interface{}

func init() {
	var res []AppAppInputSource
	if err := json.Unmarshal([]byte(`["vendor","customer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appAppInputSourceEnum = append(appAppInputSourceEnum, v)
	}
}

func (m AppAppInputSource) validateAppAppInputSourceEnum(path, location string, value AppAppInputSource) error {
	if err := validate.EnumCase(path, location, value, appAppInputSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app app input source
func (m AppAppInputSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppAppInputSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app app input source based on context it is used
func (m AppAppInputSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
