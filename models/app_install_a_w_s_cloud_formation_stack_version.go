// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallAWSCloudFormationStackVersion app install a w s cloud formation stack version
//
// swagger:model app.InstallAWSCloudFormationStackVersion
type AppInstallAWSCloudFormationStackVersion struct {

	// app config id
	AppConfigID string `json:"app_config_id,omitempty"`

	// aws bucket key
	AwsBucketKey string `json:"aws_bucket_key,omitempty"`

	// aws bucket name
	AwsBucketName string `json:"aws_bucket_name,omitempty"`

	// checksum
	Checksum string `json:"checksum,omitempty"`

	// composite status
	CompositeStatus *AppCompositeStatus `json:"composite_status,omitempty"`

	// contents
	Contents string `json:"contents,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// install cloudformation stack
	InstallCloudformationStack string `json:"install_cloudformation_stack,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// phone home data
	PhoneHomeData map[string]string `json:"phone_home_data,omitempty"`

	// phone home id
	PhoneHomeID string `json:"phone_home_id,omitempty"`

	// phone home url
	PhoneHomeURL string `json:"phone_home_url,omitempty"`

	// quick link url
	QuickLinkURL string `json:"quick_link_url,omitempty"`

	// template url
	TemplateURL string `json:"template_url,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app install a w s cloud formation stack version
func (m *AppInstallAWSCloudFormationStackVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompositeStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallAWSCloudFormationStackVersion) validateCompositeStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CompositeStatus) { // not required
		return nil
	}

	if m.CompositeStatus != nil {
		if err := m.CompositeStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app install a w s cloud formation stack version based on the context it is used
func (m *AppInstallAWSCloudFormationStackVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompositeStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallAWSCloudFormationStackVersion) contextValidateCompositeStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CompositeStatus != nil {

		if swag.IsZero(m.CompositeStatus) { // not required
			return nil
		}

		if err := m.CompositeStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("composite_status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("composite_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallAWSCloudFormationStackVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallAWSCloudFormationStackVersion) UnmarshalBinary(b []byte) error {
	var res AppInstallAWSCloudFormationStackVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
