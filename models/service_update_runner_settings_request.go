// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceUpdateRunnerSettingsRequest service update runner settings request
//
// swagger:model service.UpdateRunnerSettingsRequest
type ServiceUpdateRunnerSettingsRequest struct {

	// aws max instance lifetime
	// Maximum: 3.1536e+07
	// Minimum: 86400
	AwsMaxInstanceLifetime int64 `json:"aws_max_instance_lifetime,omitempty"`

	// container image tag
	ContainerImageTag string `json:"container_image_tag,omitempty"`

	// container image url
	ContainerImageURL string `json:"container_image_url,omitempty"`

	// org awsiam role arn
	OrgAwsiamRoleArn string `json:"org_awsiam_role_arn,omitempty"`

	// org k8s service account name
	OrgK8sServiceAccountName string `json:"org_k8s_service_account_name,omitempty"`

	// runner api url
	RunnerAPIURL string `json:"runner_api_url,omitempty"`
}

// Validate validates this service update runner settings request
func (m *ServiceUpdateRunnerSettingsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsMaxInstanceLifetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceUpdateRunnerSettingsRequest) validateAwsMaxInstanceLifetime(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsMaxInstanceLifetime) { // not required
		return nil
	}

	if err := validate.MinimumInt("aws_max_instance_lifetime", "body", m.AwsMaxInstanceLifetime, 86400, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("aws_max_instance_lifetime", "body", m.AwsMaxInstanceLifetime, 3.1536e+07, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service update runner settings request based on context it is used
func (m *ServiceUpdateRunnerSettingsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpdateRunnerSettingsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpdateRunnerSettingsRequest) UnmarshalBinary(b []byte) error {
	var res ServiceUpdateRunnerSettingsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
