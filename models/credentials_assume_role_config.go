// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialsAssumeRoleConfig credentials assume role config
//
// swagger:model credentials.AssumeRoleConfig
type CredentialsAssumeRoleConfig struct {

	// role arn
	// Required: true
	RoleArn *string `json:"role_arn"`

	// session duration seconds
	SessionDurationSeconds int64 `json:"session_duration_seconds,omitempty"`

	// session name
	// Required: true
	SessionName *string `json:"session_name"`

	// configuration for two stepping before assuming this role
	TwoStepConfig struct {
		IamTwoStepConfig
	} `json:"two_step_config,omitempty"`

	// use github oidc
	UseGithubOidc bool `json:"use_github_oidc,omitempty"`
}

// Validate validates this credentials assume role config
func (m *CredentialsAssumeRoleConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTwoStepConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsAssumeRoleConfig) validateRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("role_arn", "body", m.RoleArn); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsAssumeRoleConfig) validateSessionName(formats strfmt.Registry) error {

	if err := validate.Required("session_name", "body", m.SessionName); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsAssumeRoleConfig) validateTwoStepConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.TwoStepConfig) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this credentials assume role config based on the context it is used
func (m *CredentialsAssumeRoleConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTwoStepConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsAssumeRoleConfig) contextValidateTwoStepConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsAssumeRoleConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsAssumeRoleConfig) UnmarshalBinary(b []byte) error {
	var res CredentialsAssumeRoleConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
