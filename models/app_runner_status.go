// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerStatus app runner status
//
// swagger:model app.RunnerStatus
type AppRunnerStatus string

func NewAppRunnerStatus(value AppRunnerStatus) *AppRunnerStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerStatus.
func (m AppRunnerStatus) Pointer() *AppRunnerStatus {
	return &m
}

const (

	// AppRunnerStatusError captures enum value "error"
	AppRunnerStatusError AppRunnerStatus = "error"

	// AppRunnerStatusActive captures enum value "active"
	AppRunnerStatusActive AppRunnerStatus = "active"

	// AppRunnerStatusPending captures enum value "pending"
	AppRunnerStatusPending AppRunnerStatus = "pending"

	// AppRunnerStatusProvisioning captures enum value "provisioning"
	AppRunnerStatusProvisioning AppRunnerStatus = "provisioning"

	// AppRunnerStatusDeprovisioning captures enum value "deprovisioning"
	AppRunnerStatusDeprovisioning AppRunnerStatus = "deprovisioning"

	// AppRunnerStatusDeprovisioned captures enum value "deprovisioned"
	AppRunnerStatusDeprovisioned AppRunnerStatus = "deprovisioned"

	// AppRunnerStatusReprovisioning captures enum value "reprovisioning"
	AppRunnerStatusReprovisioning AppRunnerStatus = "reprovisioning"

	// AppRunnerStatusOffline captures enum value "offline"
	AppRunnerStatusOffline AppRunnerStatus = "offline"

	// AppRunnerStatusAwaitingDashInstallDashStackDashRun captures enum value "awaiting-install-stack-run"
	AppRunnerStatusAwaitingDashInstallDashStackDashRun AppRunnerStatus = "awaiting-install-stack-run"

	// AppRunnerStatusUnknown captures enum value "unknown"
	AppRunnerStatusUnknown AppRunnerStatus = "unknown"
)

// for schema
var appRunnerStatusEnum []interface{}

func init() {
	var res []AppRunnerStatus
	if err := json.Unmarshal([]byte(`["error","active","pending","provisioning","deprovisioning","deprovisioned","reprovisioning","offline","awaiting-install-stack-run","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerStatusEnum = append(appRunnerStatusEnum, v)
	}
}

func (m AppRunnerStatus) validateAppRunnerStatusEnum(path, location string, value AppRunnerStatus) error {
	if err := validate.EnumCase(path, location, value, appRunnerStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner status
func (m AppRunnerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner status based on context it is used
func (m AppRunnerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
