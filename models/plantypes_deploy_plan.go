// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlantypesDeployPlan plantypes deploy plan
//
// swagger:model plantypes.DeployPlan
type PlantypesDeployPlan struct {

	// app config id
	AppConfigID string `json:"app_config_id,omitempty"`

	// app id
	AppID string `json:"app_id,omitempty"`

	// The following field is for applying a plan that is already save
	ApplyPlanContents string `json:"apply_plan_contents,omitempty"`

	// This field is for storing a human legible plan or corollary representation
	ApplyPlanDisplay string `json:"apply_plan_display,omitempty"`

	// component id
	ComponentID string `json:"component_id,omitempty"`

	// component name
	ComponentName string `json:"component_name,omitempty"`

	// helm
	Helm *PlantypesHelmDeployPlan `json:"helm,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// kubernetes manifest
	KubernetesManifest *PlantypesKubernetesManifestDeployPlan `json:"kubernetes_manifest,omitempty"`

	// noop
	Noop PlantypesNoopDeployPlan `json:"noop,omitempty"`

	// sandbox mode
	SandboxMode *PlantypesSandboxMode `json:"sandbox_mode,omitempty"`

	// src registry
	// Required: true
	SrcRegistry *ConfigsOCIRegistryRepository `json:"src_registry"`

	// src tag
	// Required: true
	SrcTag *string `json:"src_tag"`

	// terraform
	Terraform *PlantypesTerraformDeployPlan `json:"terraform,omitempty"`
}

// Validate validates this plantypes deploy plan
func (m *PlantypesDeployPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesManifest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerraform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesDeployPlan) validateHelm(formats strfmt.Registry) error {
	if swag.IsZero(m.Helm) { // not required
		return nil
	}

	if m.Helm != nil {
		if err := m.Helm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) validateKubernetesManifest(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesManifest) { // not required
		return nil
	}

	if m.KubernetesManifest != nil {
		if err := m.KubernetesManifest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes_manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes_manifest")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) validateSandboxMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxMode) { // not required
		return nil
	}

	if m.SandboxMode != nil {
		if err := m.SandboxMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) validateSrcRegistry(formats strfmt.Registry) error {

	if err := validate.Required("src_registry", "body", m.SrcRegistry); err != nil {
		return err
	}

	if m.SrcRegistry != nil {
		if err := m.SrcRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("src_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) validateSrcTag(formats strfmt.Registry) error {

	if err := validate.Required("src_tag", "body", m.SrcTag); err != nil {
		return err
	}

	return nil
}

func (m *PlantypesDeployPlan) validateTerraform(formats strfmt.Registry) error {
	if swag.IsZero(m.Terraform) { // not required
		return nil
	}

	if m.Terraform != nil {
		if err := m.Terraform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes deploy plan based on the context it is used
func (m *PlantypesDeployPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHelm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesManifest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSrcRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerraform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesDeployPlan) contextValidateHelm(ctx context.Context, formats strfmt.Registry) error {

	if m.Helm != nil {

		if swag.IsZero(m.Helm) { // not required
			return nil
		}

		if err := m.Helm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) contextValidateKubernetesManifest(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesManifest != nil {

		if swag.IsZero(m.KubernetesManifest) { // not required
			return nil
		}

		if err := m.KubernetesManifest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes_manifest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes_manifest")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) contextValidateSandboxMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxMode != nil {

		if swag.IsZero(m.SandboxMode) { // not required
			return nil
		}

		if err := m.SandboxMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) contextValidateSrcRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.SrcRegistry != nil {

		if err := m.SrcRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("src_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesDeployPlan) contextValidateTerraform(ctx context.Context, formats strfmt.Registry) error {

	if m.Terraform != nil {

		if swag.IsZero(m.Terraform) { // not required
			return nil
		}

		if err := m.Terraform.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesDeployPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesDeployPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesDeployPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
