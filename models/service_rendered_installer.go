// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceRenderedInstaller service rendered installer
//
// swagger:model service.RenderedInstaller
type ServiceRenderedInstaller struct {

	// app
	App *AppApp `json:"app,omitempty"`

	// app inputs
	AppInputs *AppAppInputConfig `json:"app_inputs,omitempty"`

	// app sandbox
	AppSandbox *AppAppSandboxConfig `json:"app_sandbox,omitempty"`

	// metadata
	Metadata *AppAppInstallerMetadata `json:"metadata,omitempty"`

	// sandbox mode
	SandboxMode bool `json:"sandbox_mode,omitempty"`
}

// Validate validates this service rendered installer
func (m *ServiceRenderedInstaller) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppSandbox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRenderedInstaller) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) validateAppInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.AppInputs) { // not required
		return nil
	}

	if m.AppInputs != nil {
		if err := m.AppInputs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_inputs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_inputs")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) validateAppSandbox(formats strfmt.Registry) error {
	if swag.IsZero(m.AppSandbox) { // not required
		return nil
	}

	if m.AppSandbox != nil {
		if err := m.AppSandbox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_sandbox")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service rendered installer based on the context it is used
func (m *ServiceRenderedInstaller) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppSandbox(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRenderedInstaller) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {

		if swag.IsZero(m.App) { // not required
			return nil
		}

		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) contextValidateAppInputs(ctx context.Context, formats strfmt.Registry) error {

	if m.AppInputs != nil {

		if swag.IsZero(m.AppInputs) { // not required
			return nil
		}

		if err := m.AppInputs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_inputs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_inputs")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) contextValidateAppSandbox(ctx context.Context, formats strfmt.Registry) error {

	if m.AppSandbox != nil {

		if swag.IsZero(m.AppSandbox) { // not required
			return nil
		}

		if err := m.AppSandbox.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app_sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app_sandbox")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRenderedInstaller) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceRenderedInstaller) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceRenderedInstaller) UnmarshalBinary(b []byte) error {
	var res ServiceRenderedInstaller
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
