// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlantypesSyncOCIPlan plantypes sync o c i plan
//
// swagger:model plantypes.SyncOCIPlan
type PlantypesSyncOCIPlan struct {

	// dst registry
	// Required: true
	DstRegistry *ConfigsOCIRegistryRepository `json:"dst_registry"`

	// dst tag
	// Required: true
	DstTag *string `json:"dst_tag"`

	// sandbox mode
	SandboxMode *PlantypesSandboxMode `json:"sandbox_mode,omitempty"`

	// src registry
	// Required: true
	SrcRegistry *ConfigsOCIRegistryRepository `json:"src_registry"`

	// src tag
	// Required: true
	SrcTag *string `json:"src_tag"`
}

// Validate validates this plantypes sync o c i plan
func (m *PlantypesSyncOCIPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDstRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDstTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrcTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesSyncOCIPlan) validateDstRegistry(formats strfmt.Registry) error {

	if err := validate.Required("dst_registry", "body", m.DstRegistry); err != nil {
		return err
	}

	if m.DstRegistry != nil {
		if err := m.DstRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dst_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dst_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) validateDstTag(formats strfmt.Registry) error {

	if err := validate.Required("dst_tag", "body", m.DstTag); err != nil {
		return err
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) validateSandboxMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxMode) { // not required
		return nil
	}

	if m.SandboxMode != nil {
		if err := m.SandboxMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) validateSrcRegistry(formats strfmt.Registry) error {

	if err := validate.Required("src_registry", "body", m.SrcRegistry); err != nil {
		return err
	}

	if m.SrcRegistry != nil {
		if err := m.SrcRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("src_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) validateSrcTag(formats strfmt.Registry) error {

	if err := validate.Required("src_tag", "body", m.SrcTag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this plantypes sync o c i plan based on the context it is used
func (m *PlantypesSyncOCIPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDstRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSrcRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesSyncOCIPlan) contextValidateDstRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.DstRegistry != nil {

		if err := m.DstRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dst_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dst_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) contextValidateSandboxMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxMode != nil {

		if swag.IsZero(m.SandboxMode) { // not required
			return nil
		}

		if err := m.SandboxMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesSyncOCIPlan) contextValidateSrcRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.SrcRegistry != nil {

		if err := m.SrcRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("src_registry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesSyncOCIPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesSyncOCIPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesSyncOCIPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
