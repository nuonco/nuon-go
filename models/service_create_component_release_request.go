// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceCreateComponentReleaseRequest service create component release request
//
// swagger:model service.CreateComponentReleaseRequest
type ServiceCreateComponentReleaseRequest struct {

	// build id
	BuildID string `json:"build_id,omitempty"`

	// strategy
	Strategy *ServiceCreateComponentReleaseRequestStrategy `json:"strategy,omitempty"`
}

// Validate validates this service create component release request
func (m *ServiceCreateComponentReleaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateComponentReleaseRequest) validateStrategy(formats strfmt.Registry) error {
	if swag.IsZero(m.Strategy) { // not required
		return nil
	}

	if m.Strategy != nil {
		if err := m.Strategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service create component release request based on the context it is used
func (m *ServiceCreateComponentReleaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStrategy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateComponentReleaseRequest) contextValidateStrategy(ctx context.Context, formats strfmt.Registry) error {

	if m.Strategy != nil {

		if swag.IsZero(m.Strategy) { // not required
			return nil
		}

		if err := m.Strategy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateComponentReleaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateComponentReleaseRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateComponentReleaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceCreateComponentReleaseRequestStrategy service create component release request strategy
//
// swagger:model ServiceCreateComponentReleaseRequestStrategy
type ServiceCreateComponentReleaseRequestStrategy struct {

	// delay
	Delay string `json:"delay,omitempty"`

	// installs per step
	InstallsPerStep int64 `json:"installs_per_step,omitempty"`
}

// Validate validates this service create component release request strategy
func (m *ServiceCreateComponentReleaseRequestStrategy) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this service create component release request strategy based on context it is used
func (m *ServiceCreateComponentReleaseRequestStrategy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateComponentReleaseRequestStrategy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateComponentReleaseRequestStrategy) UnmarshalBinary(b []byte) error {
	var res ServiceCreateComponentReleaseRequestStrategy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
