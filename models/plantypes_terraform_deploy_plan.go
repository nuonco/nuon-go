// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesTerraformDeployPlan plantypes terraform deploy plan
//
// swagger:model plantypes.TerraformDeployPlan
type PlantypesTerraformDeployPlan struct {

	// aws auth
	AwsAuth *GithubComPowertoolsdevMonoPkgAwsCredentialsConfig `json:"aws_auth,omitempty"`

	// azure auth
	AzureAuth *GithubComPowertoolsdevMonoPkgAzureCredentialsConfig `json:"azure_auth,omitempty"`

	// cluster info
	ClusterInfo *KubeClusterInfo `json:"cluster_info,omitempty"`

	// env vars
	EnvVars map[string]string `json:"env_vars,omitempty"`

	// hooks
	Hooks *PlantypesTerraformDeployHooks `json:"hooks,omitempty"`

	// plan json
	PlanJSON []int64 `json:"plan_json"`

	// policies
	Policies map[string]string `json:"policies,omitempty"`

	// state
	State *GithubComPowertoolsdevMonoPkgTypesStateState `json:"state,omitempty"`

	// terraform backend
	TerraformBackend *PlantypesTerraformBackend `json:"terraform_backend,omitempty"`

	// vars
	Vars interface{} `json:"vars,omitempty"`

	// vars files
	VarsFiles []string `json:"vars_files"`
}

// Validate validates this plantypes terraform deploy plan
func (m *PlantypesTerraformDeployPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHooks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerraformBackend(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesTerraformDeployPlan) validateAwsAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAuth) { // not required
		return nil
	}

	if m.AwsAuth != nil {
		if err := m.AwsAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) validateAzureAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureAuth) { // not required
		return nil
	}

	if m.AzureAuth != nil {
		if err := m.AzureAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_info")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) validateHooks(formats strfmt.Registry) error {
	if swag.IsZero(m.Hooks) { // not required
		return nil
	}

	if m.Hooks != nil {
		if err := m.Hooks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hooks")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) validateTerraformBackend(formats strfmt.Registry) error {
	if swag.IsZero(m.TerraformBackend) { // not required
		return nil
	}

	if m.TerraformBackend != nil {
		if err := m.TerraformBackend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_backend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_backend")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes terraform deploy plan based on the context it is used
func (m *PlantypesTerraformDeployPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHooks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerraformBackend(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateAwsAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAuth != nil {

		if swag.IsZero(m.AwsAuth) { // not required
			return nil
		}

		if err := m.AwsAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateAzureAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureAuth != nil {

		if swag.IsZero(m.AzureAuth) { // not required
			return nil
		}

		if err := m.AzureAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {

		if swag.IsZero(m.ClusterInfo) { // not required
			return nil
		}

		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cluster_info")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateHooks(ctx context.Context, formats strfmt.Registry) error {

	if m.Hooks != nil {

		if swag.IsZero(m.Hooks) { // not required
			return nil
		}

		if err := m.Hooks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hooks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hooks")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesTerraformDeployPlan) contextValidateTerraformBackend(ctx context.Context, formats strfmt.Registry) error {

	if m.TerraformBackend != nil {

		if swag.IsZero(m.TerraformBackend) { // not required
			return nil
		}

		if err := m.TerraformBackend.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_backend")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_backend")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesTerraformDeployPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesTerraformDeployPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesTerraformDeployPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
