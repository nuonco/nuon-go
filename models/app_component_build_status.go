// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppComponentBuildStatus app component build status
//
// swagger:model app.ComponentBuildStatus
type AppComponentBuildStatus string

func NewAppComponentBuildStatus(value AppComponentBuildStatus) *AppComponentBuildStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppComponentBuildStatus.
func (m AppComponentBuildStatus) Pointer() *AppComponentBuildStatus {
	return &m
}

const (

	// AppComponentBuildStatusPlanning captures enum value "planning"
	AppComponentBuildStatusPlanning AppComponentBuildStatus = "planning"

	// AppComponentBuildStatusError captures enum value "error"
	AppComponentBuildStatusError AppComponentBuildStatus = "error"

	// AppComponentBuildStatusBuilding captures enum value "building"
	AppComponentBuildStatusBuilding AppComponentBuildStatus = "building"

	// AppComponentBuildStatusActive captures enum value "active"
	AppComponentBuildStatusActive AppComponentBuildStatus = "active"

	// AppComponentBuildStatusDeleting captures enum value "deleting"
	AppComponentBuildStatusDeleting AppComponentBuildStatus = "deleting"
)

// for schema
var appComponentBuildStatusEnum []interface{}

func init() {
	var res []AppComponentBuildStatus
	if err := json.Unmarshal([]byte(`["planning","error","building","active","deleting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appComponentBuildStatusEnum = append(appComponentBuildStatusEnum, v)
	}
}

func (m AppComponentBuildStatus) validateAppComponentBuildStatusEnum(path, location string, value AppComponentBuildStatus) error {
	if err := validate.EnumCase(path, location, value, appComponentBuildStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app component build status
func (m AppComponentBuildStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppComponentBuildStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app component build status based on context it is used
func (m AppComponentBuildStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
