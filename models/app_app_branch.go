// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppAppBranch app app branch
//
// swagger:model app.AppBranch
type AppAppBranch struct {

	// app id
	AppID string `json:"app_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vcs connection branch
	VcsConnectionBranch *AppVCSConnectionBranch `json:"vcs_connection_branch,omitempty"`

	// vcs connection branch id
	VcsConnectionBranchID string `json:"vcs_connection_branch_id,omitempty"`
}

// Validate validates this app app branch
func (m *AppAppBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVcsConnectionBranch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppAppBranch) validateVcsConnectionBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsConnectionBranch) { // not required
		return nil
	}

	if m.VcsConnectionBranch != nil {
		if err := m.VcsConnectionBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_connection_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_connection_branch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app app branch based on the context it is used
func (m *AppAppBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVcsConnectionBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppAppBranch) contextValidateVcsConnectionBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsConnectionBranch != nil {

		if swag.IsZero(m.VcsConnectionBranch) { // not required
			return nil
		}

		if err := m.VcsConnectionBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_connection_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_connection_branch")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppAppBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppAppBranch) UnmarshalBinary(b []byte) error {
	var res AppAppBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
