// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppAppRunnerType app app runner type
//
// swagger:model app.AppRunnerType
type AppAppRunnerType string

func NewAppAppRunnerType(value AppAppRunnerType) *AppAppRunnerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppAppRunnerType.
func (m AppAppRunnerType) Pointer() *AppAppRunnerType {
	return &m
}

const (

	// AppAppRunnerTypeAwsDashEcs captures enum value "aws-ecs"
	AppAppRunnerTypeAwsDashEcs AppAppRunnerType = "aws-ecs"

	// AppAppRunnerTypeAwsDashEks captures enum value "aws-eks"
	AppAppRunnerTypeAwsDashEks AppAppRunnerType = "aws-eks"

	// AppAppRunnerTypeAzureDashAks captures enum value "azure-aks"
	AppAppRunnerTypeAzureDashAks AppAppRunnerType = "azure-aks"

	// AppAppRunnerTypeAzureDashAcs captures enum value "azure-acs"
	AppAppRunnerTypeAzureDashAcs AppAppRunnerType = "azure-acs"

	// AppAppRunnerTypeLocal captures enum value "local"
	AppAppRunnerTypeLocal AppAppRunnerType = "local"

	// AppAppRunnerTypeAws captures enum value "aws"
	AppAppRunnerTypeAws AppAppRunnerType = "aws"
)

// for schema
var appAppRunnerTypeEnum []interface{}

func init() {
	var res []AppAppRunnerType
	if err := json.Unmarshal([]byte(`["aws-ecs","aws-eks","azure-aks","azure-acs","local","aws"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appAppRunnerTypeEnum = append(appAppRunnerTypeEnum, v)
	}
}

func (m AppAppRunnerType) validateAppAppRunnerTypeEnum(path, location string, value AppAppRunnerType) error {
	if err := validate.EnumCase(path, location, value, appAppRunnerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app app runner type
func (m AppAppRunnerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppAppRunnerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app app runner type based on context it is used
func (m AppAppRunnerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
