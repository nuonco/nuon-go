// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerOperationType app runner operation type
//
// swagger:model app.RunnerOperationType
type AppRunnerOperationType string

func NewAppRunnerOperationType(value AppRunnerOperationType) *AppRunnerOperationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerOperationType.
func (m AppRunnerOperationType) Pointer() *AppRunnerOperationType {
	return &m
}

const (

	// AppRunnerOperationTypeProvision captures enum value "provision"
	AppRunnerOperationTypeProvision AppRunnerOperationType = "provision"

	// AppRunnerOperationTypeProvisionServiceAccount captures enum value "provision_service_account"
	AppRunnerOperationTypeProvisionServiceAccount AppRunnerOperationType = "provision_service_account"

	// AppRunnerOperationTypeReprovision captures enum value "reprovision"
	AppRunnerOperationTypeReprovision AppRunnerOperationType = "reprovision"

	// AppRunnerOperationTypeDeprovision captures enum value "deprovision"
	AppRunnerOperationTypeDeprovision AppRunnerOperationType = "deprovision"
)

// for schema
var appRunnerOperationTypeEnum []interface{}

func init() {
	var res []AppRunnerOperationType
	if err := json.Unmarshal([]byte(`["provision","provision_service_account","reprovision","deprovision"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerOperationTypeEnum = append(appRunnerOperationTypeEnum, v)
	}
}

func (m AppRunnerOperationType) validateAppRunnerOperationTypeEnum(path, location string, value AppRunnerOperationType) error {
	if err := validate.EnumCase(path, location, value, appRunnerOperationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner operation type
func (m AppRunnerOperationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerOperationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner operation type based on context it is used
func (m AppRunnerOperationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
