// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigInstall config install
//
// swagger:model config.Install
type ConfigInstall struct {

	// approval option
	ApprovalOption ConfigInstallApprovalOption `json:"approvalOption,omitempty"`

	// awsaccount
	Awsaccount *ConfigAWSAccount `json:"awsaccount,omitempty"`

	// input groups
	InputGroups []ConfigInputGroup `json:"inputGroups"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this config install
func (m *ConfigInstall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalOption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsaccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigInstall) validateApprovalOption(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalOption) { // not required
		return nil
	}

	if err := m.ApprovalOption.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approvalOption")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approvalOption")
		}
		return err
	}

	return nil
}

func (m *ConfigInstall) validateAwsaccount(formats strfmt.Registry) error {
	if swag.IsZero(m.Awsaccount) { // not required
		return nil
	}

	if m.Awsaccount != nil {
		if err := m.Awsaccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsaccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsaccount")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigInstall) validateInputGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.InputGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.InputGroups); i++ {

		if m.InputGroups[i] != nil {
			if err := m.InputGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("inputGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this config install based on the context it is used
func (m *ConfigInstall) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprovalOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsaccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigInstall) contextValidateApprovalOption(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalOption) { // not required
		return nil
	}

	if err := m.ApprovalOption.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approvalOption")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approvalOption")
		}
		return err
	}

	return nil
}

func (m *ConfigInstall) contextValidateAwsaccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Awsaccount != nil {

		if swag.IsZero(m.Awsaccount) { // not required
			return nil
		}

		if err := m.Awsaccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsaccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsaccount")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigInstall) contextValidateInputGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InputGroups); i++ {

		if swag.IsZero(m.InputGroups[i]) { // not required
			return nil
		}

		if err := m.InputGroups[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputGroups" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputGroups" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigInstall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigInstall) UnmarshalBinary(b []byte) error {
	var res ConfigInstall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
