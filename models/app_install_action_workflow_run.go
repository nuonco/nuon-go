// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallActionWorkflowRun app install action workflow run
//
// swagger:model app.InstallActionWorkflowRun
type AppInstallActionWorkflowRun struct {

	// action workflow config id
	ActionWorkflowConfigID string `json:"action_workflow_config_id,omitempty"`

	// config
	Config *AppActionWorkflowConfig `json:"config,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// runner details
	RunnerJob struct {
		AppRunnerJob
	} `json:"runner_job,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status description
	StatusDescription string `json:"status_description,omitempty"`

	// trigger type
	TriggerType AppActionWorkflowTriggerType `json:"trigger_type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app install action workflow run
func (m *AppInstallActionWorkflowRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunnerJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallActionWorkflowRun) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallActionWorkflowRun) validateRunnerJob(formats strfmt.Registry) error {
	if swag.IsZero(m.RunnerJob) { // not required
		return nil
	}

	return nil
}

func (m *AppInstallActionWorkflowRun) validateTriggerType(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerType) { // not required
		return nil
	}

	if err := m.TriggerType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trigger_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trigger_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this app install action workflow run based on the context it is used
func (m *AppInstallActionWorkflowRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunnerJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallActionWorkflowRun) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {

		if swag.IsZero(m.Config) { // not required
			return nil
		}

		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallActionWorkflowRun) contextValidateRunnerJob(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *AppInstallActionWorkflowRun) contextValidateTriggerType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.TriggerType) { // not required
		return nil
	}

	if err := m.TriggerType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trigger_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trigger_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallActionWorkflowRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallActionWorkflowRun) UnmarshalBinary(b []byte) error {
	var res AppInstallActionWorkflowRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
