// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigInstallApprovalOption config install approval option
//
// swagger:model config.InstallApprovalOption
type ConfigInstallApprovalOption string

func NewConfigInstallApprovalOption(value ConfigInstallApprovalOption) *ConfigInstallApprovalOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigInstallApprovalOption.
func (m ConfigInstallApprovalOption) Pointer() *ConfigInstallApprovalOption {
	return &m
}

const (

	// ConfigInstallApprovalOptionApproveDashAll captures enum value "approve-all"
	ConfigInstallApprovalOptionApproveDashAll ConfigInstallApprovalOption = "approve-all"

	// ConfigInstallApprovalOptionPrompt captures enum value "prompt"
	ConfigInstallApprovalOptionPrompt ConfigInstallApprovalOption = "prompt"

	// ConfigInstallApprovalOptionEmpty captures enum value ""
	ConfigInstallApprovalOptionEmpty ConfigInstallApprovalOption = ""
)

// for schema
var configInstallApprovalOptionEnum []interface{}

func init() {
	var res []ConfigInstallApprovalOption
	if err := json.Unmarshal([]byte(`["approve-all","prompt",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configInstallApprovalOptionEnum = append(configInstallApprovalOptionEnum, v)
	}
}

func (m ConfigInstallApprovalOption) validateConfigInstallApprovalOptionEnum(path, location string, value ConfigInstallApprovalOption) error {
	if err := validate.EnumCase(path, location, value, configInstallApprovalOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this config install approval option
func (m ConfigInstallApprovalOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigInstallApprovalOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this config install approval option based on context it is used
func (m ConfigInstallApprovalOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
