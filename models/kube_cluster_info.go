// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KubeClusterInfo kube cluster info
//
// swagger:model kube.ClusterInfo
type KubeClusterInfo struct {

	// If either an AWS auth or Azure auth is passed in, we will automatically use it to resolve credentials and set
	// them in the environment.
	AwsAuth struct {
		GithubComPowertoolsdevMonoPkgAwsCredentialsConfig
	} `json:"aws_auth,omitempty"`

	// azure auth
	AzureAuth *GithubComPowertoolsdevMonoPkgAzureCredentialsConfig `json:"azure_auth,omitempty"`

	// CAData is the base64 encoded public certificate
	CaData string `json:"ca_data,omitempty"`

	// Endpoint is the URL of the k8s api server
	Endpoint string `json:"endpoint,omitempty"`

	// env vars
	EnvVars map[string]string `json:"env_vars,omitempty"`

	// ID is the ID of the EKS cluster
	ID string `json:"id,omitempty"`

	// If this is set, we will _not_ use aws-iam-authenticator, but rather inline create the token
	Inline bool `json:"inline,omitempty"`

	// KubeConfig will override the kube config, and be parsed instead of generating a new one
	KubeConfig string `json:"kube_config,omitempty"`

	// TrustedRoleARN is the arn of the role that should be assumed to interact with the cluster
	// NOTE(JM): we are deprecating this
	TrustedRoleArn string `json:"trusted_role_arn,omitempty"`
}

// Validate validates this kube cluster info
func (m *KubeClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureAuth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeClusterInfo) validateAwsAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAuth) { // not required
		return nil
	}

	return nil
}

func (m *KubeClusterInfo) validateAzureAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureAuth) { // not required
		return nil
	}

	if m.AzureAuth != nil {
		if err := m.AzureAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kube cluster info based on the context it is used
func (m *KubeClusterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KubeClusterInfo) contextValidateAwsAuth(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *KubeClusterInfo) contextValidateAzureAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureAuth != nil {

		if swag.IsZero(m.AzureAuth) { // not required
			return nil
		}

		if err := m.AzureAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure_auth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KubeClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KubeClusterInfo) UnmarshalBinary(b []byte) error {
	var res KubeClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
