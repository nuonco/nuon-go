// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigsOCIRegistryRepository configs o c i registry repository
//
// swagger:model configs.OCIRegistryRepository
type ConfigsOCIRegistryRepository struct {

	// acrauth
	Acrauth *GithubComPowertoolsdevMonoPkgAzureCredentialsConfig `json:"acrauth,omitempty"`

	// ecrauth
	Ecrauth *GithubComPowertoolsdevMonoPkgAwsCredentialsConfig `json:"ecrauth,omitempty"`

	// login server
	LoginServer string `json:"loginServer,omitempty"`

	// ociauth
	Ociauth *ConfigsOCIRegistryAuth `json:"ociauth,omitempty"`

	// plugin
	Plugin string `json:"plugin,omitempty"`

	// region
	Region string `json:"region,omitempty"`

	// registry type
	RegistryType ConfigsOCIRegistryType `json:"registryType,omitempty"`

	// based on the type of access, either the repository (ecr) or login server (acr) will be provided.
	Repository string `json:"repository,omitempty"`
}

// Validate validates this configs o c i registry repository
func (m *ConfigsOCIRegistryRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcrauth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEcrauth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOciauth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigsOCIRegistryRepository) validateAcrauth(formats strfmt.Registry) error {
	if swag.IsZero(m.Acrauth) { // not required
		return nil
	}

	if m.Acrauth != nil {
		if err := m.Acrauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acrauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acrauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) validateEcrauth(formats strfmt.Registry) error {
	if swag.IsZero(m.Ecrauth) { // not required
		return nil
	}

	if m.Ecrauth != nil {
		if err := m.Ecrauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecrauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecrauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) validateOciauth(formats strfmt.Registry) error {
	if swag.IsZero(m.Ociauth) { // not required
		return nil
	}

	if m.Ociauth != nil {
		if err := m.Ociauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ociauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ociauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) validateRegistryType(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryType) { // not required
		return nil
	}

	if err := m.RegistryType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registryType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registryType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this configs o c i registry repository based on the context it is used
func (m *ConfigsOCIRegistryRepository) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcrauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEcrauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOciauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigsOCIRegistryRepository) contextValidateAcrauth(ctx context.Context, formats strfmt.Registry) error {

	if m.Acrauth != nil {

		if swag.IsZero(m.Acrauth) { // not required
			return nil
		}

		if err := m.Acrauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acrauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acrauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) contextValidateEcrauth(ctx context.Context, formats strfmt.Registry) error {

	if m.Ecrauth != nil {

		if swag.IsZero(m.Ecrauth) { // not required
			return nil
		}

		if err := m.Ecrauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ecrauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ecrauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) contextValidateOciauth(ctx context.Context, formats strfmt.Registry) error {

	if m.Ociauth != nil {

		if swag.IsZero(m.Ociauth) { // not required
			return nil
		}

		if err := m.Ociauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ociauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ociauth")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigsOCIRegistryRepository) contextValidateRegistryType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.RegistryType) { // not required
		return nil
	}

	if err := m.RegistryType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registryType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registryType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigsOCIRegistryRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigsOCIRegistryRepository) UnmarshalBinary(b []byte) error {
	var res ConfigsOCIRegistryRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
