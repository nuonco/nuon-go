// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppInstallActionWorkflowRunStepStatus app install action workflow run step status
//
// swagger:model app.InstallActionWorkflowRunStepStatus
type AppInstallActionWorkflowRunStepStatus string

func NewAppInstallActionWorkflowRunStepStatus(value AppInstallActionWorkflowRunStepStatus) *AppInstallActionWorkflowRunStepStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppInstallActionWorkflowRunStepStatus.
func (m AppInstallActionWorkflowRunStepStatus) Pointer() *AppInstallActionWorkflowRunStepStatus {
	return &m
}

const (

	// AppInstallActionWorkflowRunStepStatusFinished captures enum value "finished"
	AppInstallActionWorkflowRunStepStatusFinished AppInstallActionWorkflowRunStepStatus = "finished"

	// AppInstallActionWorkflowRunStepStatusPending captures enum value "pending"
	AppInstallActionWorkflowRunStepStatusPending AppInstallActionWorkflowRunStepStatus = "pending"

	// AppInstallActionWorkflowRunStepStatusInDashProgress captures enum value "in-progress"
	AppInstallActionWorkflowRunStepStatusInDashProgress AppInstallActionWorkflowRunStepStatus = "in-progress"

	// AppInstallActionWorkflowRunStepStatusError captures enum value "error"
	AppInstallActionWorkflowRunStepStatusError AppInstallActionWorkflowRunStepStatus = "error"
)

// for schema
var appInstallActionWorkflowRunStepStatusEnum []interface{}

func init() {
	var res []AppInstallActionWorkflowRunStepStatus
	if err := json.Unmarshal([]byte(`["finished","pending","in-progress","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstallActionWorkflowRunStepStatusEnum = append(appInstallActionWorkflowRunStepStatusEnum, v)
	}
}

func (m AppInstallActionWorkflowRunStepStatus) validateAppInstallActionWorkflowRunStepStatusEnum(path, location string, value AppInstallActionWorkflowRunStepStatus) error {
	if err := validate.EnumCase(path, location, value, appInstallActionWorkflowRunStepStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app install action workflow run step status
func (m AppInstallActionWorkflowRunStepStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppInstallActionWorkflowRunStepStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app install action workflow run step status based on context it is used
func (m AppInstallActionWorkflowRunStepStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
