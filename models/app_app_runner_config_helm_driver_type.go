// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppAppRunnerConfigHelmDriverType app app runner config helm driver type
//
// swagger:model app.AppRunnerConfigHelmDriverType
type AppAppRunnerConfigHelmDriverType string

func NewAppAppRunnerConfigHelmDriverType(value AppAppRunnerConfigHelmDriverType) *AppAppRunnerConfigHelmDriverType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppAppRunnerConfigHelmDriverType.
func (m AppAppRunnerConfigHelmDriverType) Pointer() *AppAppRunnerConfigHelmDriverType {
	return &m
}

const (

	// AppAppRunnerConfigHelmDriverTypeSecret captures enum value "secret"
	AppAppRunnerConfigHelmDriverTypeSecret AppAppRunnerConfigHelmDriverType = "secret"

	// AppAppRunnerConfigHelmDriverTypeConfigmap captures enum value "configmap"
	AppAppRunnerConfigHelmDriverTypeConfigmap AppAppRunnerConfigHelmDriverType = "configmap"

	// AppAppRunnerConfigHelmDriverTypeEmpty captures enum value ""
	AppAppRunnerConfigHelmDriverTypeEmpty AppAppRunnerConfigHelmDriverType = ""
)

// for schema
var appAppRunnerConfigHelmDriverTypeEnum []interface{}

func init() {
	var res []AppAppRunnerConfigHelmDriverType
	if err := json.Unmarshal([]byte(`["secret","configmap",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appAppRunnerConfigHelmDriverTypeEnum = append(appAppRunnerConfigHelmDriverTypeEnum, v)
	}
}

func (m AppAppRunnerConfigHelmDriverType) validateAppAppRunnerConfigHelmDriverTypeEnum(path, location string, value AppAppRunnerConfigHelmDriverType) error {
	if err := validate.EnumCase(path, location, value, appAppRunnerConfigHelmDriverTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app app runner config helm driver type
func (m AppAppRunnerConfigHelmDriverType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppAppRunnerConfigHelmDriverTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app app runner config helm driver type based on context it is used
func (m AppAppRunnerConfigHelmDriverType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
