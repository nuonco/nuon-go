// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IamTwoStepConfig iam two step config
//
// swagger:model iam.TwoStepConfig
type IamTwoStepConfig struct {

	// iam role arn
	IamRoleArn string `json:"iam_role_arn,omitempty"`

	// src iam role arn
	SrcIamRoleArn string `json:"src_iam_role_arn,omitempty"`

	// Root Credentials
	SrcStaticCredentials struct {
		IamStaticCredentials
	} `json:"src_static_credentials,omitempty"`
}

// Validate validates this iam two step config
func (m *IamTwoStepConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSrcStaticCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamTwoStepConfig) validateSrcStaticCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SrcStaticCredentials) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this iam two step config based on the context it is used
func (m *IamTwoStepConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSrcStaticCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IamTwoStepConfig) contextValidateSrcStaticCredentials(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *IamTwoStepConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IamTwoStepConfig) UnmarshalBinary(b []byte) error {
	var res IamTwoStepConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
