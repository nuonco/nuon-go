// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlantypesBuildPlan plantypes build plan
//
// swagger:model plantypes.BuildPlan
type PlantypesBuildPlan struct {

	// component build id
	ComponentBuildID string `json:"component_build_id,omitempty"`

	// component id
	ComponentID string `json:"component_id,omitempty"`

	// container image pull plan
	ContainerImagePullPlan *PlantypesContainerImagePullPlan `json:"container_image_pull_plan,omitempty"`

	// docker build plan
	DockerBuildPlan *PlantypesDockerBuildPlan `json:"docker_build_plan,omitempty"`

	// dst registry
	// Required: true
	DstRegistry *ConfigsOCIRegistryRepository `json:"dst_registry"`

	// dst tag
	// Required: true
	DstTag *string `json:"dst_tag"`

	// git source
	GitSource *PlantypesGitSource `json:"git_source,omitempty"`

	// helm build plan
	HelmBuildPlan *PlantypesHelmBuildPlan `json:"helm_build_plan,omitempty"`

	// sandbox mode
	SandboxMode *PlantypesSandboxMode `json:"sandbox_mode,omitempty"`

	// terraform build plan
	TerraformBuildPlan *PlantypesTerraformBuildPlan `json:"terraform_build_plan,omitempty"`
}

// Validate validates this plantypes build plan
func (m *PlantypesBuildPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerImagePullPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDockerBuildPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDstRegistry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDstTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGitSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelmBuildPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerraformBuildPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesBuildPlan) validateContainerImagePullPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ContainerImagePullPlan) { // not required
		return nil
	}

	if m.ContainerImagePullPlan != nil {
		if err := m.ContainerImagePullPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("container_image_pull_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("container_image_pull_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateDockerBuildPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.DockerBuildPlan) { // not required
		return nil
	}

	if m.DockerBuildPlan != nil {
		if err := m.DockerBuildPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docker_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docker_build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateDstRegistry(formats strfmt.Registry) error {

	if err := validate.Required("dst_registry", "body", m.DstRegistry); err != nil {
		return err
	}

	if m.DstRegistry != nil {
		if err := m.DstRegistry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dst_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dst_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateDstTag(formats strfmt.Registry) error {

	if err := validate.Required("dst_tag", "body", m.DstTag); err != nil {
		return err
	}

	return nil
}

func (m *PlantypesBuildPlan) validateGitSource(formats strfmt.Registry) error {
	if swag.IsZero(m.GitSource) { // not required
		return nil
	}

	if m.GitSource != nil {
		if err := m.GitSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git_source")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateHelmBuildPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.HelmBuildPlan) { // not required
		return nil
	}

	if m.HelmBuildPlan != nil {
		if err := m.HelmBuildPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm_build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateSandboxMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxMode) { // not required
		return nil
	}

	if m.SandboxMode != nil {
		if err := m.SandboxMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) validateTerraformBuildPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.TerraformBuildPlan) { // not required
		return nil
	}

	if m.TerraformBuildPlan != nil {
		if err := m.TerraformBuildPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_build_plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes build plan based on the context it is used
func (m *PlantypesBuildPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainerImagePullPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDockerBuildPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDstRegistry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGitSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHelmBuildPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerraformBuildPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesBuildPlan) contextValidateContainerImagePullPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ContainerImagePullPlan != nil {

		if swag.IsZero(m.ContainerImagePullPlan) { // not required
			return nil
		}

		if err := m.ContainerImagePullPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("container_image_pull_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("container_image_pull_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateDockerBuildPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.DockerBuildPlan != nil {

		if swag.IsZero(m.DockerBuildPlan) { // not required
			return nil
		}

		if err := m.DockerBuildPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("docker_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("docker_build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateDstRegistry(ctx context.Context, formats strfmt.Registry) error {

	if m.DstRegistry != nil {

		if err := m.DstRegistry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dst_registry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dst_registry")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateGitSource(ctx context.Context, formats strfmt.Registry) error {

	if m.GitSource != nil {

		if swag.IsZero(m.GitSource) { // not required
			return nil
		}

		if err := m.GitSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git_source")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateHelmBuildPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.HelmBuildPlan != nil {

		if swag.IsZero(m.HelmBuildPlan) { // not required
			return nil
		}

		if err := m.HelmBuildPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("helm_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("helm_build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateSandboxMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxMode != nil {

		if swag.IsZero(m.SandboxMode) { // not required
			return nil
		}

		if err := m.SandboxMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesBuildPlan) contextValidateTerraformBuildPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.TerraformBuildPlan != nil {

		if swag.IsZero(m.TerraformBuildPlan) { // not required
			return nil
		}

		if err := m.TerraformBuildPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_build_plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesBuildPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesBuildPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesBuildPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
