// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StatsdEventAlertType statsd event alert type
//
// swagger:model statsd.EventAlertType
type StatsdEventAlertType string

func NewStatsdEventAlertType(value StatsdEventAlertType) *StatsdEventAlertType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StatsdEventAlertType.
func (m StatsdEventAlertType) Pointer() *StatsdEventAlertType {
	return &m
}

const (

	// StatsdEventAlertTypeInfo captures enum value "info"
	StatsdEventAlertTypeInfo StatsdEventAlertType = "info"

	// StatsdEventAlertTypeError captures enum value "error"
	StatsdEventAlertTypeError StatsdEventAlertType = "error"

	// StatsdEventAlertTypeWarning captures enum value "warning"
	StatsdEventAlertTypeWarning StatsdEventAlertType = "warning"

	// StatsdEventAlertTypeSuccess captures enum value "success"
	StatsdEventAlertTypeSuccess StatsdEventAlertType = "success"
)

// for schema
var statsdEventAlertTypeEnum []interface{}

func init() {
	var res []StatsdEventAlertType
	if err := json.Unmarshal([]byte(`["info","error","warning","success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statsdEventAlertTypeEnum = append(statsdEventAlertTypeEnum, v)
	}
}

func (m StatsdEventAlertType) validateStatsdEventAlertTypeEnum(path, location string, value StatsdEventAlertType) error {
	if err := validate.EnumCase(path, location, value, statsdEventAlertTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this statsd event alert type
func (m StatsdEventAlertType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStatsdEventAlertTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this statsd event alert type based on context it is used
func (m StatsdEventAlertType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
