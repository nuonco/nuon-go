// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallStackOutputs app install stack outputs
//
// swagger:model app.InstallStackOutputs
type AppInstallStackOutputs struct {

	// aws
	Aws *AppAWSStackOutputs `json:"aws,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// data
	Data map[string]string `json:"data,omitempty"`

	// deprovision iam role arn
	DeprovisionIamRoleArn string `json:"deprovision_iam_role_arn,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// install stack id
	InstallStackID string `json:"install_stack_id,omitempty"`

	// install version run id
	InstallVersionRunID *GenericsNullString `json:"install_version_run_id,omitempty"`

	// maintenance iam role arn
	MaintenanceIamRoleArn string `json:"maintenance_iam_role_arn,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// private subnets
	PrivateSubnets []string `json:"private_subnets"`

	// provision iam role arn
	ProvisionIamRoleArn string `json:"provision_iam_role_arn,omitempty"`

	// public subnets
	PublicSubnets []string `json:"public_subnets"`

	// runner iam role arn
	RunnerIamRoleArn string `json:"runner_iam_role_arn,omitempty"`

	// runner subnet
	RunnerSubnet string `json:"runner_subnet,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vpc id
	VpcID string `json:"vpc_id,omitempty"`
}

// Validate validates this app install stack outputs
func (m *AppInstallStackOutputs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallVersionRunID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallStackOutputs) validateAws(formats strfmt.Registry) error {
	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallStackOutputs) validateInstallVersionRunID(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallVersionRunID) { // not required
		return nil
	}

	if m.InstallVersionRunID != nil {
		if err := m.InstallVersionRunID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_version_run_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_version_run_id")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app install stack outputs based on the context it is used
func (m *AppInstallStackOutputs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAws(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallVersionRunID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallStackOutputs) contextValidateAws(ctx context.Context, formats strfmt.Registry) error {

	if m.Aws != nil {

		if swag.IsZero(m.Aws) { // not required
			return nil
		}

		if err := m.Aws.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallStackOutputs) contextValidateInstallVersionRunID(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallVersionRunID != nil {

		if swag.IsZero(m.InstallVersionRunID) { // not required
			return nil
		}

		if err := m.InstallVersionRunID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_version_run_id")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_version_run_id")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallStackOutputs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallStackOutputs) UnmarshalBinary(b []byte) error {
	var res AppInstallStackOutputs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
