// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppComponentType app component type
//
// swagger:model app.ComponentType
type AppComponentType string

func NewAppComponentType(value AppComponentType) *AppComponentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppComponentType.
func (m AppComponentType) Pointer() *AppComponentType {
	return &m
}

const (

	// AppComponentTypeTerraformModule captures enum value "terraform_module"
	AppComponentTypeTerraformModule AppComponentType = "terraform_module"

	// AppComponentTypeHelmChart captures enum value "helm_chart"
	AppComponentTypeHelmChart AppComponentType = "helm_chart"

	// AppComponentTypeDockerBuild captures enum value "docker_build"
	AppComponentTypeDockerBuild AppComponentType = "docker_build"

	// AppComponentTypeExternalImage captures enum value "external_image"
	AppComponentTypeExternalImage AppComponentType = "external_image"

	// AppComponentTypeJob captures enum value "job"
	AppComponentTypeJob AppComponentType = "job"

	// AppComponentTypeKubernetesManifest captures enum value "kubernetes_manifest"
	AppComponentTypeKubernetesManifest AppComponentType = "kubernetes_manifest"

	// AppComponentTypeUnknown captures enum value "unknown"
	AppComponentTypeUnknown AppComponentType = "unknown"
)

// for schema
var appComponentTypeEnum []interface{}

func init() {
	var res []AppComponentType
	if err := json.Unmarshal([]byte(`["terraform_module","helm_chart","docker_build","external_image","job","kubernetes_manifest","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appComponentTypeEnum = append(appComponentTypeEnum, v)
	}
}

func (m AppComponentType) validateAppComponentTypeEnum(path, location string, value AppComponentType) error {
	if err := validate.EnumCase(path, location, value, appComponentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app component type
func (m AppComponentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppComponentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app component type based on context it is used
func (m AppComponentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
