// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppHelmChart app helm chart
//
// swagger:model app.HelmChart
type AppHelmChart struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// helm releases
	HelmReleases []*AppHelmRelease `json:"helmReleases"`

	// id
	ID string `json:"id,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// owner id
	OwnerID string `json:"owner_id,omitempty"`

	// owner type
	OwnerType string `json:"owner_type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app helm chart
func (m *AppHelmChart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelmReleases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppHelmChart) validateHelmReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.HelmReleases) { // not required
		return nil
	}

	for i := 0; i < len(m.HelmReleases); i++ {
		if swag.IsZero(m.HelmReleases[i]) { // not required
			continue
		}

		if m.HelmReleases[i] != nil {
			if err := m.HelmReleases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("helmReleases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("helmReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this app helm chart based on the context it is used
func (m *AppHelmChart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHelmReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppHelmChart) contextValidateHelmReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HelmReleases); i++ {

		if m.HelmReleases[i] != nil {

			if swag.IsZero(m.HelmReleases[i]) { // not required
				return nil
			}

			if err := m.HelmReleases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("helmReleases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("helmReleases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppHelmChart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppHelmChart) UnmarshalBinary(b []byte) error {
	var res AppHelmChart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
