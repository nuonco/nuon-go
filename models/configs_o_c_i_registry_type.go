// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConfigsOCIRegistryType configs o c i registry type
//
// swagger:model configs.OCIRegistryType
type ConfigsOCIRegistryType string

func NewConfigsOCIRegistryType(value ConfigsOCIRegistryType) *ConfigsOCIRegistryType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConfigsOCIRegistryType.
func (m ConfigsOCIRegistryType) Pointer() *ConfigsOCIRegistryType {
	return &m
}

const (

	// ConfigsOCIRegistryTypeEcr captures enum value "ecr"
	ConfigsOCIRegistryTypeEcr ConfigsOCIRegistryType = "ecr"

	// ConfigsOCIRegistryTypeAcr captures enum value "acr"
	ConfigsOCIRegistryTypeAcr ConfigsOCIRegistryType = "acr"

	// ConfigsOCIRegistryTypePrivateOci captures enum value "private_oci"
	ConfigsOCIRegistryTypePrivateOci ConfigsOCIRegistryType = "private_oci"

	// ConfigsOCIRegistryTypePublicOci captures enum value "public_oci"
	ConfigsOCIRegistryTypePublicOci ConfigsOCIRegistryType = "public_oci"
)

// for schema
var configsOCIRegistryTypeEnum []interface{}

func init() {
	var res []ConfigsOCIRegistryType
	if err := json.Unmarshal([]byte(`["ecr","acr","private_oci","public_oci"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		configsOCIRegistryTypeEnum = append(configsOCIRegistryTypeEnum, v)
	}
}

func (m ConfigsOCIRegistryType) validateConfigsOCIRegistryTypeEnum(path, location string, value ConfigsOCIRegistryType) error {
	if err := validate.EnumCase(path, location, value, configsOCIRegistryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this configs o c i registry type
func (m ConfigsOCIRegistryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConfigsOCIRegistryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this configs o c i registry type based on context it is used
func (m ConfigsOCIRegistryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
