// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesActionWorkflowRunPlan plantypes action workflow run plan
//
// swagger:model plantypes.ActionWorkflowRunPlan
type PlantypesActionWorkflowRunPlan struct {

	// attrs
	Attrs map[string]string `json:"attrs,omitempty"`

	// aws auth
	AwsAuth *GithubComPowertoolsdevMonoPkgAwsCredentialsConfig `json:"aws_auth,omitempty"`

	// builtin env vars
	BuiltinEnvVars map[string]string `json:"builtin_env_vars,omitempty"`

	// optional fields based on the configuration
	ClusterInfo struct {
		KubeClusterInfo
	} `json:"cluster_info,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// override env vars
	OverrideEnvVars map[string]string `json:"override_env_vars,omitempty"`

	// sandbox mode
	SandboxMode *PlantypesSandboxMode `json:"sandbox_mode,omitempty"`

	// steps
	Steps []*PlantypesActionWorkflowRunStepPlan `json:"steps"`
}

// Validate validates this plantypes action workflow run plan
func (m *PlantypesActionWorkflowRunPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesActionWorkflowRunPlan) validateAwsAuth(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAuth) { // not required
		return nil
	}

	if m.AwsAuth != nil {
		if err := m.AwsAuth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) validateSandboxMode(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxMode) { // not required
		return nil
	}

	if m.SandboxMode != nil {
		if err := m.SandboxMode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) validateSteps(formats strfmt.Registry) error {
	if swag.IsZero(m.Steps) { // not required
		return nil
	}

	for i := 0; i < len(m.Steps); i++ {
		if swag.IsZero(m.Steps[i]) { // not required
			continue
		}

		if m.Steps[i] != nil {
			if err := m.Steps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this plantypes action workflow run plan based on the context it is used
func (m *PlantypesActionWorkflowRunPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAuth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSteps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesActionWorkflowRunPlan) contextValidateAwsAuth(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAuth != nil {

		if swag.IsZero(m.AwsAuth) { // not required
			return nil
		}

		if err := m.AwsAuth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_auth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_auth")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) contextValidateSandboxMode(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxMode != nil {

		if swag.IsZero(m.SandboxMode) { // not required
			return nil
		}

		if err := m.SandboxMode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_mode")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesActionWorkflowRunPlan) contextValidateSteps(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Steps); i++ {

		if m.Steps[i] != nil {

			if swag.IsZero(m.Steps[i]) { // not required
				return nil
			}

			if err := m.Steps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("steps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("steps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesActionWorkflowRunPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesActionWorkflowRunPlan) UnmarshalBinary(b []byte) error {
	var res PlantypesActionWorkflowRunPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
