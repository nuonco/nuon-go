// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppAppConfigVersion app app config version
//
// swagger:model app.AppConfigVersion
type AppAppConfigVersion string

func NewAppAppConfigVersion(value AppAppConfigVersion) *AppAppConfigVersion {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppAppConfigVersion.
func (m AppAppConfigVersion) Pointer() *AppAppConfigVersion {
	return &m
}

const (

	// AppAppConfigVersionEmpty captures enum value ""
	AppAppConfigVersionEmpty AppAppConfigVersion = ""

	// AppAppConfigVersionV2 captures enum value "v2"
	AppAppConfigVersionV2 AppAppConfigVersion = "v2"
)

// for schema
var appAppConfigVersionEnum []interface{}

func init() {
	var res []AppAppConfigVersion
	if err := json.Unmarshal([]byte(`["","v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appAppConfigVersionEnum = append(appAppConfigVersionEnum, v)
	}
}

func (m AppAppConfigVersion) validateAppAppConfigVersionEnum(path, location string, value AppAppConfigVersion) error {
	if err := validate.EnumCase(path, location, value, appAppConfigVersionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app app config version
func (m AppAppConfigVersion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppAppConfigVersionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app app config version based on context it is used
func (m AppAppConfigVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
