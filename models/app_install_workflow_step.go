// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallWorkflowStep app install workflow step
//
// swagger:model app.InstallWorkflowStep
type AppInstallWorkflowStep struct {

	// the step approval is built into each step at the runner level.
	Approval struct {
		AppInstallWorkflowStepApproval
	} `json:"approval,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// execution time
	ExecutionTime int64 `json:"execution_time,omitempty"`

	// finished
	Finished bool `json:"finished,omitempty"`

	// finished at
	FinishedAt string `json:"finished_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// idx
	Idx int64 `json:"idx,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// install workflow id
	InstallWorkflowID string `json:"install_workflow_id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// policy validation
	PolicyValidation *AppInstallWorkflowStepPolicyValidation `json:"policy_validation,omitempty"`

	// started at
	StartedAt string `json:"started_at,omitempty"`

	// status
	Status struct {
		AppCompositeStatus
	} `json:"status,omitempty"`

	// the following fields are set _once_ a step is in flight, and are orchestrated via the step's signal.
	//
	// this is a polymorphic gorm relationship to one of the following objects:
	//
	// install_cloudformation_stack
	// install_sandbox_run
	// install_runner_update
	// install_deploy
	// install_action_workflow_run (can be many of these)
	StepTargetID string `json:"step_target_id,omitempty"`

	// step target type
	StepTargetType string `json:"step_target_type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app install workflow step
func (m *AppInstallWorkflowStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApproval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallWorkflowStep) validateApproval(formats strfmt.Registry) error {
	if swag.IsZero(m.Approval) { // not required
		return nil
	}

	return nil
}

func (m *AppInstallWorkflowStep) validatePolicyValidation(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyValidation) { // not required
		return nil
	}

	if m.PolicyValidation != nil {
		if err := m.PolicyValidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_validation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_validation")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStep) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this app install workflow step based on the context it is used
func (m *AppInstallWorkflowStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApproval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyValidation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallWorkflowStep) contextValidateApproval(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *AppInstallWorkflowStep) contextValidatePolicyValidation(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyValidation != nil {

		if swag.IsZero(m.PolicyValidation) { // not required
			return nil
		}

		if err := m.PolicyValidation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_validation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_validation")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStep) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallWorkflowStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallWorkflowStep) UnmarshalBinary(b []byte) error {
	var res AppInstallWorkflowStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
