// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RefsRefType refs ref type
//
// swagger:model refs.RefType
type RefsRefType string

func NewRefsRefType(value RefsRefType) *RefsRefType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RefsRefType.
func (m RefsRefType) Pointer() *RefsRefType {
	return &m
}

const (

	// RefsRefTypeSandbox captures enum value "sandbox"
	RefsRefTypeSandbox RefsRefType = "sandbox"

	// RefsRefTypeInstallStack captures enum value "install_stack"
	RefsRefTypeInstallStack RefsRefType = "install_stack"

	// RefsRefTypeComponent captures enum value "component"
	RefsRefTypeComponent RefsRefType = "component"

	// RefsRefTypeInputs captures enum value "inputs"
	RefsRefTypeInputs RefsRefType = "inputs"

	// RefsRefTypeSecrets captures enum value "secrets"
	RefsRefTypeSecrets RefsRefType = "secrets"

	// RefsRefTypeActions captures enum value "actions"
	RefsRefTypeActions RefsRefType = "actions"
)

// for schema
var refsRefTypeEnum []interface{}

func init() {
	var res []RefsRefType
	if err := json.Unmarshal([]byte(`["sandbox","install_stack","component","inputs","secrets","actions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		refsRefTypeEnum = append(refsRefTypeEnum, v)
	}
}

func (m RefsRefType) validateRefsRefTypeEnum(path, location string, value RefsRefType) error {
	if err := validate.EnumCase(path, location, value, refsRefTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this refs ref type
func (m RefsRefType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRefsRefTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this refs ref type based on context it is used
func (m RefsRefType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
