// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesCompositePlan plantypes composite plan
//
// swagger:model plantypes.CompositePlan
type PlantypesCompositePlan struct {

	// action workflow run plan
	ActionWorkflowRunPlan *PlantypesActionWorkflowRunPlan `json:"action_workflow_run_plan,omitempty"`

	// build plan
	BuildPlan *PlantypesBuildPlan `json:"build_plan,omitempty"`

	// deploy plan
	DeployPlan *PlantypesDeployPlan `json:"deploy_plan,omitempty"`

	// sandbox run plan
	SandboxRunPlan *PlantypesSandboxRunPlan `json:"sandbox_run_plan,omitempty"`

	// sync oci plan
	SyncOciPlan *PlantypesSyncOCIPlan `json:"sync_oci_plan,omitempty"`

	// sync secrets plan
	SyncSecretsPlan *PlantypesSyncSecretsPlan `json:"sync_secrets_plan,omitempty"`
}

// Validate validates this plantypes composite plan
func (m *PlantypesCompositePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionWorkflowRunPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxRunPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncOciPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncSecretsPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesCompositePlan) validateActionWorkflowRunPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionWorkflowRunPlan) { // not required
		return nil
	}

	if m.ActionWorkflowRunPlan != nil {
		if err := m.ActionWorkflowRunPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_workflow_run_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_workflow_run_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateBuildPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildPlan) { // not required
		return nil
	}

	if m.BuildPlan != nil {
		if err := m.BuildPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateDeployPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployPlan) { // not required
		return nil
	}

	if m.DeployPlan != nil {
		if err := m.DeployPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploy_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateSandboxRunPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxRunPlan) { // not required
		return nil
	}

	if m.SandboxRunPlan != nil {
		if err := m.SandboxRunPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_run_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_run_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateSyncOciPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncOciPlan) { // not required
		return nil
	}

	if m.SyncOciPlan != nil {
		if err := m.SyncOciPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_oci_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sync_oci_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateSyncSecretsPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncSecretsPlan) { // not required
		return nil
	}

	if m.SyncSecretsPlan != nil {
		if err := m.SyncSecretsPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_secrets_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sync_secrets_plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes composite plan based on the context it is used
func (m *PlantypesCompositePlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionWorkflowRunPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxRunPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncOciPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncSecretsPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesCompositePlan) contextValidateActionWorkflowRunPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionWorkflowRunPlan != nil {

		if swag.IsZero(m.ActionWorkflowRunPlan) { // not required
			return nil
		}

		if err := m.ActionWorkflowRunPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("action_workflow_run_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("action_workflow_run_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateBuildPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildPlan != nil {

		if swag.IsZero(m.BuildPlan) { // not required
			return nil
		}

		if err := m.BuildPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateDeployPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployPlan != nil {

		if swag.IsZero(m.DeployPlan) { // not required
			return nil
		}

		if err := m.DeployPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deploy_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deploy_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateSandboxRunPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxRunPlan != nil {

		if swag.IsZero(m.SandboxRunPlan) { // not required
			return nil
		}

		if err := m.SandboxRunPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox_run_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox_run_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateSyncOciPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncOciPlan != nil {

		if swag.IsZero(m.SyncOciPlan) { // not required
			return nil
		}

		if err := m.SyncOciPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_oci_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sync_oci_plan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateSyncSecretsPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncSecretsPlan != nil {

		if swag.IsZero(m.SyncSecretsPlan) { // not required
			return nil
		}

		if err := m.SyncSecretsPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sync_secrets_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sync_secrets_plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesCompositePlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesCompositePlan) UnmarshalBinary(b []byte) error {
	var res PlantypesCompositePlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
