// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PlantypesCompositePlan plantypes composite plan
//
// swagger:model plantypes.CompositePlan
type PlantypesCompositePlan struct {

	// action plan
	ActionPlan *PlantypesActionWorkflowRunPlan `json:"actionPlan,omitempty"`

	// build plan
	BuildPlan *PlantypesBuildPlan `json:"buildPlan,omitempty"`

	// deploy plan
	DeployPlan *PlantypesDeployPlan `json:"deployPlan,omitempty"`

	// sandbox plan
	SandboxPlan *PlantypesSandboxRunPlan `json:"sandboxPlan,omitempty"`

	// sync plan
	SyncPlan *PlantypesSyncOCIPlan `json:"syncPlan,omitempty"`
}

// Validate validates this plantypes composite plan
func (m *PlantypesCompositePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeployPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandboxPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesCompositePlan) validateActionPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionPlan) { // not required
		return nil
	}

	if m.ActionPlan != nil {
		if err := m.ActionPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateBuildPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildPlan) { // not required
		return nil
	}

	if m.BuildPlan != nil {
		if err := m.BuildPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateDeployPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.DeployPlan) { // not required
		return nil
	}

	if m.DeployPlan != nil {
		if err := m.DeployPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateSandboxPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.SandboxPlan) { // not required
		return nil
	}

	if m.SandboxPlan != nil {
		if err := m.SandboxPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandboxPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandboxPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) validateSyncPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncPlan) { // not required
		return nil
	}

	if m.SyncPlan != nil {
		if err := m.SyncPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncPlan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this plantypes composite plan based on the context it is used
func (m *PlantypesCompositePlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeployPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandboxPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlantypesCompositePlan) contextValidateActionPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionPlan != nil {

		if swag.IsZero(m.ActionPlan) { // not required
			return nil
		}

		if err := m.ActionPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actionPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actionPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateBuildPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildPlan != nil {

		if swag.IsZero(m.BuildPlan) { // not required
			return nil
		}

		if err := m.BuildPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateDeployPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.DeployPlan != nil {

		if swag.IsZero(m.DeployPlan) { // not required
			return nil
		}

		if err := m.DeployPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deployPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deployPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateSandboxPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SandboxPlan != nil {

		if swag.IsZero(m.SandboxPlan) { // not required
			return nil
		}

		if err := m.SandboxPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandboxPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandboxPlan")
			}
			return err
		}
	}

	return nil
}

func (m *PlantypesCompositePlan) contextValidateSyncPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.SyncPlan != nil {

		if swag.IsZero(m.SyncPlan) { // not required
			return nil
		}

		if err := m.SyncPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("syncPlan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("syncPlan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlantypesCompositePlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlantypesCompositePlan) UnmarshalBinary(b []byte) error {
	var res PlantypesCompositePlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
