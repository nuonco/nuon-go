// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppActionWorkflowTriggerType app action workflow trigger type
//
// swagger:model app.ActionWorkflowTriggerType
type AppActionWorkflowTriggerType string

func NewAppActionWorkflowTriggerType(value AppActionWorkflowTriggerType) *AppActionWorkflowTriggerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppActionWorkflowTriggerType.
func (m AppActionWorkflowTriggerType) Pointer() *AppActionWorkflowTriggerType {
	return &m
}

const (

	// AppActionWorkflowTriggerTypeManual captures enum value "manual"
	AppActionWorkflowTriggerTypeManual AppActionWorkflowTriggerType = "manual"

	// AppActionWorkflowTriggerTypeCron captures enum value "cron"
	AppActionWorkflowTriggerTypeCron AppActionWorkflowTriggerType = "cron"

	// AppActionWorkflowTriggerTypePostInstall captures enum value "post_install"
	AppActionWorkflowTriggerTypePostInstall AppActionWorkflowTriggerType = "post_install"
)

// for schema
var appActionWorkflowTriggerTypeEnum []interface{}

func init() {
	var res []AppActionWorkflowTriggerType
	if err := json.Unmarshal([]byte(`["manual","cron","post_install"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appActionWorkflowTriggerTypeEnum = append(appActionWorkflowTriggerTypeEnum, v)
	}
}

func (m AppActionWorkflowTriggerType) validateAppActionWorkflowTriggerTypeEnum(path, location string, value AppActionWorkflowTriggerType) error {
	if err := validate.EnumCase(path, location, value, appActionWorkflowTriggerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app action workflow trigger type
func (m AppActionWorkflowTriggerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppActionWorkflowTriggerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app action workflow trigger type based on context it is used
func (m AppActionWorkflowTriggerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
