// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateAppRunnerConfigRequest service create app runner config request
//
// swagger:model service.CreateAppRunnerConfigRequest
type ServiceCreateAppRunnerConfigRequest struct {

	// app config id
	AppConfigID string `json:"app_config_id,omitempty"`

	// env vars
	EnvVars map[string]string `json:"env_vars,omitempty"`

	// helm driver
	HelmDriver AppAppRunnerConfigHelmDriverType `json:"helm_driver,omitempty"`

	// type
	// Required: true
	Type *AppAppRunnerType `json:"type"`
}

// Validate validates this service create app runner config request
func (m *ServiceCreateAppRunnerConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHelmDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppRunnerConfigRequest) validateHelmDriver(formats strfmt.Registry) error {
	if swag.IsZero(m.HelmDriver) { // not required
		return nil
	}

	if err := m.HelmDriver.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("helm_driver")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("helm_driver")
		}
		return err
	}

	return nil
}

func (m *ServiceCreateAppRunnerConfigRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service create app runner config request based on the context it is used
func (m *ServiceCreateAppRunnerConfigRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHelmDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppRunnerConfigRequest) contextValidateHelmDriver(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.HelmDriver) { // not required
		return nil
	}

	if err := m.HelmDriver.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("helm_driver")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("helm_driver")
		}
		return err
	}

	return nil
}

func (m *ServiceCreateAppRunnerConfigRequest) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateAppRunnerConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateAppRunnerConfigRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateAppRunnerConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
