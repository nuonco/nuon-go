// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComPowertoolsdevMonoPkgTypesStateState github com powertoolsdev mono pkg types state state
//
// swagger:model github_com_powertoolsdev_mono_pkg_types_state.State
type GithubComPowertoolsdevMonoPkgTypesStateState struct {

	// actions
	Actions *StateActionsState `json:"actions,omitempty"`

	// app
	App *StateAppState `json:"app,omitempty"`

	// cloud account
	CloudAccount *StateCloudAccount `json:"cloud_account,omitempty"`

	// components
	Components map[string]interface{} `json:"components,omitempty"`

	// domain
	Domain *StateDomainState `json:"domain,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// inputs
	Inputs *StateInputsState `json:"inputs,omitempty"`

	// NOTE: for backwards compatibility, these are remaining in place.
	Install struct {
		StateInstallState
	} `json:"install,omitempty"`

	// install stack
	InstallStack *StateInstallStackState `json:"install_stack,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org
	Org *StateOrgState `json:"org,omitempty"`

	// runner
	Runner *StateRunnerState `json:"runner,omitempty"`

	// sandbox
	Sandbox *StateSandboxState `json:"sandbox,omitempty"`
}

// Validate validates this github com powertoolsdev mono pkg types state state
func (m *GithubComPowertoolsdevMonoPkgTypesStateState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSandbox(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateActions(formats strfmt.Registry) error {
	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	if m.Actions != nil {
		if err := m.Actions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateCloudAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudAccount) { // not required
		return nil
	}

	if m.CloudAccount != nil {
		if err := m.CloudAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_account")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	if m.Domain != nil {
		if err := m.Domain.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	if m.Inputs != nil {
		if err := m.Inputs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputs")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateInstall(formats strfmt.Registry) error {
	if swag.IsZero(m.Install) { // not required
		return nil
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateInstallStack(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallStack) { // not required
		return nil
	}

	if m.InstallStack != nil {
		if err := m.InstallStack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_stack")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateOrg(formats strfmt.Registry) error {
	if swag.IsZero(m.Org) { // not required
		return nil
	}

	if m.Org != nil {
		if err := m.Org.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("org")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("org")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateRunner(formats strfmt.Registry) error {
	if swag.IsZero(m.Runner) { // not required
		return nil
	}

	if m.Runner != nil {
		if err := m.Runner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) validateSandbox(formats strfmt.Registry) error {
	if swag.IsZero(m.Sandbox) { // not required
		return nil
	}

	if m.Sandbox != nil {
		if err := m.Sandbox.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this github com powertoolsdev mono pkg types state state based on the context it is used
func (m *GithubComPowertoolsdevMonoPkgTypesStateState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomain(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstall(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallStack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrg(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSandbox(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	if m.Actions != nil {

		if swag.IsZero(m.Actions) { // not required
			return nil
		}

		if err := m.Actions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actions")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {

		if swag.IsZero(m.App) { // not required
			return nil
		}

		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateCloudAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudAccount != nil {

		if swag.IsZero(m.CloudAccount) { // not required
			return nil
		}

		if err := m.CloudAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloud_account")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateDomain(ctx context.Context, formats strfmt.Registry) error {

	if m.Domain != nil {

		if swag.IsZero(m.Domain) { // not required
			return nil
		}

		if err := m.Domain.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domain")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("domain")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateInputs(ctx context.Context, formats strfmt.Registry) error {

	if m.Inputs != nil {

		if swag.IsZero(m.Inputs) { // not required
			return nil
		}

		if err := m.Inputs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inputs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inputs")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateInstall(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateInstallStack(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallStack != nil {

		if swag.IsZero(m.InstallStack) { // not required
			return nil
		}

		if err := m.InstallStack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("install_stack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("install_stack")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateOrg(ctx context.Context, formats strfmt.Registry) error {

	if m.Org != nil {

		if swag.IsZero(m.Org) { // not required
			return nil
		}

		if err := m.Org.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("org")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("org")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateRunner(ctx context.Context, formats strfmt.Registry) error {

	if m.Runner != nil {

		if swag.IsZero(m.Runner) { // not required
			return nil
		}

		if err := m.Runner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner")
			}
			return err
		}
	}

	return nil
}

func (m *GithubComPowertoolsdevMonoPkgTypesStateState) contextValidateSandbox(ctx context.Context, formats strfmt.Registry) error {

	if m.Sandbox != nil {

		if swag.IsZero(m.Sandbox) { // not required
			return nil
		}

		if err := m.Sandbox.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sandbox")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sandbox")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComPowertoolsdevMonoPkgTypesStateState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComPowertoolsdevMonoPkgTypesStateState) UnmarshalBinary(b []byte) error {
	var res GithubComPowertoolsdevMonoPkgTypesStateState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
