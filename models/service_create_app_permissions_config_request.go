// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateAppPermissionsConfigRequest service create app permissions config request
//
// swagger:model service.CreateAppPermissionsConfigRequest
type ServiceCreateAppPermissionsConfigRequest struct {

	// app config id
	// Required: true
	AppConfigID *string `json:"app_config_id"`

	// deprovision role
	// Required: true
	DeprovisionRole *ServiceAppAWSIAMRoleConfig `json:"deprovision_role"`

	// maintenance role
	// Required: true
	MaintenanceRole *ServiceAppAWSIAMRoleConfig `json:"maintenance_role"`

	// provision role
	// Required: true
	ProvisionRole *ServiceAppAWSIAMRoleConfig `json:"provision_role"`
}

// Validate validates this service create app permissions config request
func (m *ServiceCreateAppPermissionsConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppConfigID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprovisionRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) validateAppConfigID(formats strfmt.Registry) error {

	if err := validate.Required("app_config_id", "body", m.AppConfigID); err != nil {
		return err
	}

	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) validateDeprovisionRole(formats strfmt.Registry) error {

	if err := validate.Required("deprovision_role", "body", m.DeprovisionRole); err != nil {
		return err
	}

	if m.DeprovisionRole != nil {
		if err := m.DeprovisionRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprovision_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprovision_role")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) validateMaintenanceRole(formats strfmt.Registry) error {

	if err := validate.Required("maintenance_role", "body", m.MaintenanceRole); err != nil {
		return err
	}

	if m.MaintenanceRole != nil {
		if err := m.MaintenanceRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenance_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenance_role")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) validateProvisionRole(formats strfmt.Registry) error {

	if err := validate.Required("provision_role", "body", m.ProvisionRole); err != nil {
		return err
	}

	if m.ProvisionRole != nil {
		if err := m.ProvisionRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provision_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provision_role")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service create app permissions config request based on the context it is used
func (m *ServiceCreateAppPermissionsConfigRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeprovisionRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaintenanceRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvisionRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) contextValidateDeprovisionRole(ctx context.Context, formats strfmt.Registry) error {

	if m.DeprovisionRole != nil {

		if err := m.DeprovisionRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deprovision_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deprovision_role")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) contextValidateMaintenanceRole(ctx context.Context, formats strfmt.Registry) error {

	if m.MaintenanceRole != nil {

		if err := m.MaintenanceRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenance_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("maintenance_role")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateAppPermissionsConfigRequest) contextValidateProvisionRole(ctx context.Context, formats strfmt.Registry) error {

	if m.ProvisionRole != nil {

		if err := m.ProvisionRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provision_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provision_role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateAppPermissionsConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateAppPermissionsConfigRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateAppPermissionsConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
