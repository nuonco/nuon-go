// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppInstallDeployType app install deploy type
//
// swagger:model app.InstallDeployType
type AppInstallDeployType string

func NewAppInstallDeployType(value AppInstallDeployType) *AppInstallDeployType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppInstallDeployType.
func (m AppInstallDeployType) Pointer() *AppInstallDeployType {
	return &m
}

const (

	// AppInstallDeployTypeRelease captures enum value "release"
	AppInstallDeployTypeRelease AppInstallDeployType = "release"

	// AppInstallDeployTypeInstall captures enum value "install"
	AppInstallDeployTypeInstall AppInstallDeployType = "install"

	// AppInstallDeployTypeTeardown captures enum value "teardown"
	AppInstallDeployTypeTeardown AppInstallDeployType = "teardown"
)

// for schema
var appInstallDeployTypeEnum []interface{}

func init() {
	var res []AppInstallDeployType
	if err := json.Unmarshal([]byte(`["release","install","teardown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstallDeployTypeEnum = append(appInstallDeployTypeEnum, v)
	}
}

func (m AppInstallDeployType) validateAppInstallDeployTypeEnum(path, location string, value AppInstallDeployType) error {
	if err := validate.EnumCase(path, location, value, appInstallDeployTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app install deploy type
func (m AppInstallDeployType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppInstallDeployTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app install deploy type based on context it is used
func (m AppInstallDeployType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
