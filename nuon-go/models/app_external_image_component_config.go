// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppExternalImageComponentConfig app external image component config
//
// swagger:model app.ExternalImageComponentConfig
type AppExternalImageComponentConfig struct {

	// aws ecr image config
	AwsEcrImageConfig *AppAWSECRImageConfig `json:"aws_ecr_image_config,omitempty"`

	// basic deploy config
	BasicDeployConfig *AppBasicDeployConfig `json:"basic_deploy_config,omitempty"`

	// value
	ComponentConfigConnectionID string `json:"component_config_connection_id,omitempty"`

	// connected github vcs config
	ConnectedGithubVcsConfig *AppConnectedGithubVCSConfig `json:"connected_github_vcs_config,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// VCS Config
	PublicGitVcsConfig struct {
		AppPublicGitVCSConfig
	} `json:"public_git_vcs_config,omitempty"`

	// sync only
	SyncOnly bool `json:"sync_only,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app external image component config
func (m *AppExternalImageComponentConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsEcrImageConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicDeployConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedGithubVcsConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicGitVcsConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppExternalImageComponentConfig) validateAwsEcrImageConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsEcrImageConfig) { // not required
		return nil
	}

	if m.AwsEcrImageConfig != nil {
		if err := m.AwsEcrImageConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_ecr_image_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_ecr_image_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) validateBasicDeployConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.BasicDeployConfig) { // not required
		return nil
	}

	if m.BasicDeployConfig != nil {
		if err := m.BasicDeployConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic_deploy_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basic_deploy_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) validateConnectedGithubVcsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectedGithubVcsConfig) { // not required
		return nil
	}

	if m.ConnectedGithubVcsConfig != nil {
		if err := m.ConnectedGithubVcsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connected_github_vcs_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connected_github_vcs_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) validatePublicGitVcsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicGitVcsConfig) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this app external image component config based on the context it is used
func (m *AppExternalImageComponentConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsEcrImageConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasicDeployConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnectedGithubVcsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicGitVcsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppExternalImageComponentConfig) contextValidateAwsEcrImageConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsEcrImageConfig != nil {

		if swag.IsZero(m.AwsEcrImageConfig) { // not required
			return nil
		}

		if err := m.AwsEcrImageConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_ecr_image_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_ecr_image_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) contextValidateBasicDeployConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BasicDeployConfig != nil {

		if swag.IsZero(m.BasicDeployConfig) { // not required
			return nil
		}

		if err := m.BasicDeployConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("basic_deploy_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("basic_deploy_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) contextValidateConnectedGithubVcsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectedGithubVcsConfig != nil {

		if swag.IsZero(m.ConnectedGithubVcsConfig) { // not required
			return nil
		}

		if err := m.ConnectedGithubVcsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connected_github_vcs_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connected_github_vcs_config")
			}
			return err
		}
	}

	return nil
}

func (m *AppExternalImageComponentConfig) contextValidatePublicGitVcsConfig(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *AppExternalImageComponentConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppExternalImageComponentConfig) UnmarshalBinary(b []byte) error {
	var res AppExternalImageComponentConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
