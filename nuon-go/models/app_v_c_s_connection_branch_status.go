// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppVCSConnectionBranchStatus app v c s connection branch status
//
// swagger:model app.VCSConnectionBranchStatus
type AppVCSConnectionBranchStatus string

func NewAppVCSConnectionBranchStatus(value AppVCSConnectionBranchStatus) *AppVCSConnectionBranchStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppVCSConnectionBranchStatus.
func (m AppVCSConnectionBranchStatus) Pointer() *AppVCSConnectionBranchStatus {
	return &m
}

const (

	// AppVCSConnectionBranchStatusActive captures enum value "active"
	AppVCSConnectionBranchStatusActive AppVCSConnectionBranchStatus = "active"

	// AppVCSConnectionBranchStatusDeleted captures enum value "deleted"
	AppVCSConnectionBranchStatusDeleted AppVCSConnectionBranchStatus = "deleted"
)

// for schema
var appVCSConnectionBranchStatusEnum []interface{}

func init() {
	var res []AppVCSConnectionBranchStatus
	if err := json.Unmarshal([]byte(`["active","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appVCSConnectionBranchStatusEnum = append(appVCSConnectionBranchStatusEnum, v)
	}
}

func (m AppVCSConnectionBranchStatus) validateAppVCSConnectionBranchStatusEnum(path, location string, value AppVCSConnectionBranchStatus) error {
	if err := validate.EnumCase(path, location, value, appVCSConnectionBranchStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app v c s connection branch status
func (m AppVCSConnectionBranchStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppVCSConnectionBranchStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app v c s connection branch status based on context it is used
func (m AppVCSConnectionBranchStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
