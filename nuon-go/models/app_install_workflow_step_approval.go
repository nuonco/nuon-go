// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallWorkflowStepApproval app install workflow step approval
//
// swagger:model app.InstallWorkflowStepApproval
type AppInstallWorkflowStepApproval struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// helm plan JSON
	HelmPlanJSON string `json:"helmPlanJSON,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image approval JSON
	ImageApprovalJSON string `json:"imageApprovalJSON,omitempty"`

	// install workflow step
	InstallWorkflowStep *AppInstallWorkflowStep `json:"installWorkflowStep,omitempty"`

	// the step that this approval belongs too
	InstallWorkflowStepID string `json:"installWorkflowStepID,omitempty"`

	// the response object must be created by the user in the UI or CLI
	Response struct {
		AppInstallWorkflowStepApprovalResponse
	} `json:"response,omitempty"`

	// runner job
	RunnerJob *AppRunnerJob `json:"runnerJob,omitempty"`

	// the runner job where this approval was created
	RunnerJobID string `json:"runner_job_id,omitempty"`

	// status
	Status *AppCompositeStatus `json:"status,omitempty"`

	// terraform plan JSON
	TerraformPlanJSON string `json:"terraformPlanJSON,omitempty"`

	// the plan and which type it is here
	Type struct {
		AppInstallWorkflowStepApprovalType
	} `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app install workflow step approval
func (m *AppInstallWorkflowStepApproval) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstallWorkflowStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunnerJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallWorkflowStepApproval) validateInstallWorkflowStep(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallWorkflowStep) { // not required
		return nil
	}

	if m.InstallWorkflowStep != nil {
		if err := m.InstallWorkflowStep.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installWorkflowStep")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("installWorkflowStep")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) validateRunnerJob(formats strfmt.Registry) error {
	if swag.IsZero(m.RunnerJob) { // not required
		return nil
	}

	if m.RunnerJob != nil {
		if err := m.RunnerJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runnerJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runnerJob")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this app install workflow step approval based on the context it is used
func (m *AppInstallWorkflowStepApproval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInstallWorkflowStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunnerJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallWorkflowStepApproval) contextValidateInstallWorkflowStep(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallWorkflowStep != nil {

		if swag.IsZero(m.InstallWorkflowStep) { // not required
			return nil
		}

		if err := m.InstallWorkflowStep.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installWorkflowStep")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("installWorkflowStep")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *AppInstallWorkflowStepApproval) contextValidateRunnerJob(ctx context.Context, formats strfmt.Registry) error {

	if m.RunnerJob != nil {

		if swag.IsZero(m.RunnerJob) { // not required
			return nil
		}

		if err := m.RunnerJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runnerJob")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runnerJob")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *AppInstallWorkflowStepApproval) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallWorkflowStepApproval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallWorkflowStepApproval) UnmarshalBinary(b []byte) error {
	var res AppInstallWorkflowStepApproval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
