// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceCreateInstallRequest service create install request
//
// swagger:model service.CreateInstallRequest
type ServiceCreateInstallRequest struct {

	// aws account
	// Required: true
	AwsAccount *ServiceCreateInstallRequestAwsAccount `json:"aws_account"`

	// inputs
	Inputs map[string]string `json:"inputs,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this service create install request
func (m *ServiceCreateInstallRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallRequest) validateAwsAccount(formats strfmt.Registry) error {

	if err := validate.Required("aws_account", "body", m.AwsAccount); err != nil {
		return err
	}

	if m.AwsAccount != nil {
		if err := m.AwsAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_account")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceCreateInstallRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this service create install request based on the context it is used
func (m *ServiceCreateInstallRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallRequest) contextValidateAwsAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAccount != nil {

		if err := m.AwsAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallRequest) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceCreateInstallRequestAwsAccount service create install request aws account
//
// swagger:model ServiceCreateInstallRequestAwsAccount
type ServiceCreateInstallRequestAwsAccount struct {

	// iam role arn
	// Required: true
	IamRoleArn *string `json:"iam_role_arn"`

	// region
	Region string `json:"region,omitempty"`
}

// Validate validates this service create install request aws account
func (m *ServiceCreateInstallRequestAwsAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIamRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceCreateInstallRequestAwsAccount) validateIamRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("aws_account"+"."+"iam_role_arn", "body", m.IamRoleArn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service create install request aws account based on context it is used
func (m *ServiceCreateInstallRequestAwsAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceCreateInstallRequestAwsAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceCreateInstallRequestAwsAccount) UnmarshalBinary(b []byte) error {
	var res ServiceCreateInstallRequestAwsAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
