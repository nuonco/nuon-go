// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppOrgHealthCheckStatus app org health check status
//
// swagger:model app.OrgHealthCheckStatus
type AppOrgHealthCheckStatus string

func NewAppOrgHealthCheckStatus(value AppOrgHealthCheckStatus) *AppOrgHealthCheckStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppOrgHealthCheckStatus.
func (m AppOrgHealthCheckStatus) Pointer() *AppOrgHealthCheckStatus {
	return &m
}

const (

	// AppOrgHealthCheckStatusOk captures enum value "ok"
	AppOrgHealthCheckStatusOk AppOrgHealthCheckStatus = "ok"

	// AppOrgHealthCheckStatusError captures enum value "error"
	AppOrgHealthCheckStatusError AppOrgHealthCheckStatus = "error"

	// AppOrgHealthCheckStatusInDashProgress captures enum value "in-progress"
	AppOrgHealthCheckStatusInDashProgress AppOrgHealthCheckStatus = "in-progress"

	// AppOrgHealthCheckStatusProvisioning captures enum value "provisioning"
	AppOrgHealthCheckStatusProvisioning AppOrgHealthCheckStatus = "provisioning"

	// AppOrgHealthCheckStatusDeprovisioning captures enum value "deprovisioning"
	AppOrgHealthCheckStatusDeprovisioning AppOrgHealthCheckStatus = "deprovisioning"
)

// for schema
var appOrgHealthCheckStatusEnum []interface{}

func init() {
	var res []AppOrgHealthCheckStatus
	if err := json.Unmarshal([]byte(`["ok","error","in-progress","provisioning","deprovisioning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appOrgHealthCheckStatusEnum = append(appOrgHealthCheckStatusEnum, v)
	}
}

func (m AppOrgHealthCheckStatus) validateAppOrgHealthCheckStatusEnum(path, location string, value AppOrgHealthCheckStatus) error {
	if err := validate.EnumCase(path, location, value, appOrgHealthCheckStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app org health check status
func (m AppOrgHealthCheckStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppOrgHealthCheckStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app org health check status based on context it is used
func (m AppOrgHealthCheckStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
