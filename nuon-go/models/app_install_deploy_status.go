// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppInstallDeployStatus app install deploy status
//
// swagger:model app.InstallDeployStatus
type AppInstallDeployStatus string

func NewAppInstallDeployStatus(value AppInstallDeployStatus) *AppInstallDeployStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppInstallDeployStatus.
func (m AppInstallDeployStatus) Pointer() *AppInstallDeployStatus {
	return &m
}

const (

	// AppInstallDeployStatusActive captures enum value "active"
	AppInstallDeployStatusActive AppInstallDeployStatus = "active"

	// AppInstallDeployStatusInactive captures enum value "inactive"
	AppInstallDeployStatusInactive AppInstallDeployStatus = "inactive"

	// AppInstallDeployStatusError captures enum value "error"
	AppInstallDeployStatusError AppInstallDeployStatus = "error"

	// AppInstallDeployStatusNoop captures enum value "noop"
	AppInstallDeployStatusNoop AppInstallDeployStatus = "noop"

	// AppInstallDeployStatusPlanning captures enum value "planning"
	AppInstallDeployStatusPlanning AppInstallDeployStatus = "planning"

	// AppInstallDeployStatusSyncing captures enum value "syncing"
	AppInstallDeployStatusSyncing AppInstallDeployStatus = "syncing"

	// AppInstallDeployStatusExecuting captures enum value "executing"
	AppInstallDeployStatusExecuting AppInstallDeployStatus = "executing"

	// AppInstallDeployStatusCancelled captures enum value "cancelled"
	AppInstallDeployStatusCancelled AppInstallDeployStatus = "cancelled"

	// AppInstallDeployStatusUnknown captures enum value "unknown"
	AppInstallDeployStatusUnknown AppInstallDeployStatus = "unknown"

	// AppInstallDeployStatusPending captures enum value "pending"
	AppInstallDeployStatusPending AppInstallDeployStatus = "pending"

	// AppInstallDeployStatusQueued captures enum value "queued"
	AppInstallDeployStatusQueued AppInstallDeployStatus = "queued"

	// AppInstallDeployStatusPendingDashApproval captures enum value "pending-approval"
	AppInstallDeployStatusPendingDashApproval AppInstallDeployStatus = "pending-approval"

	// AppInstallDeployStatusApprovalDashDenied captures enum value "approval-denied"
	AppInstallDeployStatusApprovalDashDenied AppInstallDeployStatus = "approval-denied"
)

// for schema
var appInstallDeployStatusEnum []interface{}

func init() {
	var res []AppInstallDeployStatus
	if err := json.Unmarshal([]byte(`["active","inactive","error","noop","planning","syncing","executing","cancelled","unknown","pending","queued","pending-approval","approval-denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstallDeployStatusEnum = append(appInstallDeployStatusEnum, v)
	}
}

func (m AppInstallDeployStatus) validateAppInstallDeployStatusEnum(path, location string, value AppInstallDeployStatus) error {
	if err := validate.EnumCase(path, location, value, appInstallDeployStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app install deploy status
func (m AppInstallDeployStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppInstallDeployStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app install deploy status based on context it is used
func (m AppInstallDeployStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
