// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppVCSConnectionRepoStatus app v c s connection repo status
//
// swagger:model app.VCSConnectionRepoStatus
type AppVCSConnectionRepoStatus string

func NewAppVCSConnectionRepoStatus(value AppVCSConnectionRepoStatus) *AppVCSConnectionRepoStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppVCSConnectionRepoStatus.
func (m AppVCSConnectionRepoStatus) Pointer() *AppVCSConnectionRepoStatus {
	return &m
}

const (

	// AppVCSConnectionRepoStatusActive captures enum value "active"
	AppVCSConnectionRepoStatusActive AppVCSConnectionRepoStatus = "active"

	// AppVCSConnectionRepoStatusDeleted captures enum value "deleted"
	AppVCSConnectionRepoStatusDeleted AppVCSConnectionRepoStatus = "deleted"

	// AppVCSConnectionRepoStatusArchived captures enum value "archived"
	AppVCSConnectionRepoStatusArchived AppVCSConnectionRepoStatus = "archived"
)

// for schema
var appVCSConnectionRepoStatusEnum []interface{}

func init() {
	var res []AppVCSConnectionRepoStatus
	if err := json.Unmarshal([]byte(`["active","deleted","archived"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appVCSConnectionRepoStatusEnum = append(appVCSConnectionRepoStatusEnum, v)
	}
}

func (m AppVCSConnectionRepoStatus) validateAppVCSConnectionRepoStatusEnum(path, location string, value AppVCSConnectionRepoStatus) error {
	if err := validate.EnumCase(path, location, value, appVCSConnectionRepoStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app v c s connection repo status
func (m AppVCSConnectionRepoStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppVCSConnectionRepoStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app v c s connection repo status based on context it is used
func (m AppVCSConnectionRepoStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
