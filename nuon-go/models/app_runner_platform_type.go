// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerPlatformType app runner platform type
//
// swagger:model app.RunnerPlatformType
type AppRunnerPlatformType string

func NewAppRunnerPlatformType(value AppRunnerPlatformType) *AppRunnerPlatformType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerPlatformType.
func (m AppRunnerPlatformType) Pointer() *AppRunnerPlatformType {
	return &m
}

const (

	// AppRunnerPlatformTypeAwsDashEcs captures enum value "aws-ecs"
	AppRunnerPlatformTypeAwsDashEcs AppRunnerPlatformType = "aws-ecs"

	// AppRunnerPlatformTypeAwsDashEks captures enum value "aws-eks"
	AppRunnerPlatformTypeAwsDashEks AppRunnerPlatformType = "aws-eks"

	// AppRunnerPlatformTypeAzureDashAks captures enum value "azure-aks"
	AppRunnerPlatformTypeAzureDashAks AppRunnerPlatformType = "azure-aks"

	// AppRunnerPlatformTypeAzureDashAcs captures enum value "azure-acs"
	AppRunnerPlatformTypeAzureDashAcs AppRunnerPlatformType = "azure-acs"

	// AppRunnerPlatformTypeLocal captures enum value "local"
	AppRunnerPlatformTypeLocal AppRunnerPlatformType = "local"
)

// for schema
var appRunnerPlatformTypeEnum []interface{}

func init() {
	var res []AppRunnerPlatformType
	if err := json.Unmarshal([]byte(`["aws-ecs","aws-eks","azure-aks","azure-acs","local"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerPlatformTypeEnum = append(appRunnerPlatformTypeEnum, v)
	}
}

func (m AppRunnerPlatformType) validateAppRunnerPlatformTypeEnum(path, location string, value AppRunnerPlatformType) error {
	if err := validate.EnumCase(path, location, value, appRunnerPlatformTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner platform type
func (m AppRunnerPlatformType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerPlatformTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner platform type based on context it is used
func (m AppRunnerPlatformType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
