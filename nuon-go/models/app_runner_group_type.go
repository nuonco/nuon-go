// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppRunnerGroupType app runner group type
//
// swagger:model app.RunnerGroupType
type AppRunnerGroupType string

func NewAppRunnerGroupType(value AppRunnerGroupType) *AppRunnerGroupType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppRunnerGroupType.
func (m AppRunnerGroupType) Pointer() *AppRunnerGroupType {
	return &m
}

const (

	// AppRunnerGroupTypeInstall captures enum value "install"
	AppRunnerGroupTypeInstall AppRunnerGroupType = "install"

	// AppRunnerGroupTypeOrg captures enum value "org"
	AppRunnerGroupTypeOrg AppRunnerGroupType = "org"
)

// for schema
var appRunnerGroupTypeEnum []interface{}

func init() {
	var res []AppRunnerGroupType
	if err := json.Unmarshal([]byte(`["install","org"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appRunnerGroupTypeEnum = append(appRunnerGroupTypeEnum, v)
	}
}

func (m AppRunnerGroupType) validateAppRunnerGroupTypeEnum(path, location string, value AppRunnerGroupType) error {
	if err := validate.EnumCase(path, location, value, appRunnerGroupTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app runner group type
func (m AppRunnerGroupType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppRunnerGroupTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app runner group type based on context it is used
func (m AppRunnerGroupType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
