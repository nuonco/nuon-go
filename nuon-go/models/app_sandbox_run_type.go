// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppSandboxRunType app sandbox run type
//
// swagger:model app.SandboxRunType
type AppSandboxRunType string

func NewAppSandboxRunType(value AppSandboxRunType) *AppSandboxRunType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppSandboxRunType.
func (m AppSandboxRunType) Pointer() *AppSandboxRunType {
	return &m
}

const (

	// AppSandboxRunTypeProvision captures enum value "provision"
	AppSandboxRunTypeProvision AppSandboxRunType = "provision"

	// AppSandboxRunTypeReprovision captures enum value "reprovision"
	AppSandboxRunTypeReprovision AppSandboxRunType = "reprovision"

	// AppSandboxRunTypeDeprovision captures enum value "deprovision"
	AppSandboxRunTypeDeprovision AppSandboxRunType = "deprovision"
)

// for schema
var appSandboxRunTypeEnum []interface{}

func init() {
	var res []AppSandboxRunType
	if err := json.Unmarshal([]byte(`["provision","reprovision","deprovision"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appSandboxRunTypeEnum = append(appSandboxRunTypeEnum, v)
	}
}

func (m AppSandboxRunType) validateAppSandboxRunTypeEnum(path, location string, value AppSandboxRunType) error {
	if err := validate.EnumCase(path, location, value, appSandboxRunTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app sandbox run type
func (m AppSandboxRunType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppSandboxRunTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app sandbox run type based on context it is used
func (m AppSandboxRunType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
