// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServicePublishMetricInput service publish metric input
//
// swagger:model service.PublishMetricInput
type ServicePublishMetricInput struct {

	// decr
	Decr *MetricsDecr `json:"decr,omitempty"`

	// event
	Event *MetricsEvent `json:"event,omitempty"`

	// incr
	Incr *MetricsIncr `json:"incr,omitempty"`

	// timing
	Timing *MetricsTiming `json:"timing,omitempty"`
}

// Validate validates this service publish metric input
func (m *ServicePublishMetricInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiming(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePublishMetricInput) validateDecr(formats strfmt.Registry) error {
	if swag.IsZero(m.Decr) { // not required
		return nil
	}

	if m.Decr != nil {
		if err := m.Decr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decr")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) validateEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.Event) { // not required
		return nil
	}

	if m.Event != nil {
		if err := m.Event.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) validateIncr(formats strfmt.Registry) error {
	if swag.IsZero(m.Incr) { // not required
		return nil
	}

	if m.Incr != nil {
		if err := m.Incr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incr")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) validateTiming(formats strfmt.Registry) error {
	if swag.IsZero(m.Timing) { // not required
		return nil
	}

	if m.Timing != nil {
		if err := m.Timing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timing")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service publish metric input based on the context it is used
func (m *ServicePublishMetricInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTiming(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePublishMetricInput) contextValidateDecr(ctx context.Context, formats strfmt.Registry) error {

	if m.Decr != nil {

		if swag.IsZero(m.Decr) { // not required
			return nil
		}

		if err := m.Decr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("decr")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) contextValidateEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.Event != nil {

		if swag.IsZero(m.Event) { // not required
			return nil
		}

		if err := m.Event.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("event")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) contextValidateIncr(ctx context.Context, formats strfmt.Registry) error {

	if m.Incr != nil {

		if swag.IsZero(m.Incr) { // not required
			return nil
		}

		if err := m.Incr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incr")
			}
			return err
		}
	}

	return nil
}

func (m *ServicePublishMetricInput) contextValidateTiming(ctx context.Context, formats strfmt.Registry) error {

	if m.Timing != nil {

		if swag.IsZero(m.Timing) { // not required
			return nil
		}

		if err := m.Timing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timing")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicePublishMetricInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicePublishMetricInput) UnmarshalBinary(b []byte) error {
	var res ServicePublishMetricInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
