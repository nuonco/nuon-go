// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StatsdEvent statsd event
//
// swagger:model statsd.Event
type StatsdEvent struct {

	// AggregationKey groups this event with others of the same key.
	AggregationKey string `json:"aggregationKey,omitempty"`

	// AlertType can be statsd.Info, statsd.Error, statsd.Warning, or statsd.Success.
	// If absent, the default value applied by the dogstatsd server is Info.
	AlertType struct {
		StatsdEventAlertType
	} `json:"alertType,omitempty"`

	// Hostname for the event.
	Hostname string `json:"hostname,omitempty"`

	// Priority of the event.  Can be statsd.Low or statsd.Normal.
	Priority struct {
		StatsdEventPriority
	} `json:"priority,omitempty"`

	// SourceTypeName is a source type for the event.
	SourceTypeName string `json:"sourceTypeName,omitempty"`

	// Tags for the event.
	Tags []string `json:"tags"`

	// Text is the description of the event.
	Text string `json:"text,omitempty"`

	// Timestamp is a timestamp for the event.  If not provided, the dogstatsd
	// server will set this to the current time.
	Timestamp string `json:"timestamp,omitempty"`

	// Title of the event.  Required.
	Title string `json:"title,omitempty"`
}

// Validate validates this statsd event
func (m *StatsdEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatsdEvent) validateAlertType(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	return nil
}

func (m *StatsdEvent) validatePriority(formats strfmt.Registry) error {
	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this statsd event based on the context it is used
func (m *StatsdEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriority(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatsdEvent) contextValidateAlertType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *StatsdEvent) contextValidatePriority(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *StatsdEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsdEvent) UnmarshalBinary(b []byte) error {
	var res StatsdEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
