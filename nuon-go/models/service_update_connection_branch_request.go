// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceUpdateConnectionBranchRequest service update connection branch request
//
// swagger:model service.UpdateConnectionBranchRequest
type ServiceUpdateConnectionBranchRequest struct {

	// head
	// Required: true
	Head *ServiceUpdateConnectionCommitRequest `json:"head"`

	// name
	// Required: true
	Name *string `json:"name"`

	// repo
	// Required: true
	Repo *ServiceUpdateConnectionRepoRequest `json:"repo"`
}

// Validate validates this service update connection branch request
func (m *ServiceUpdateConnectionBranchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceUpdateConnectionBranchRequest) validateHead(formats strfmt.Registry) error {

	if err := validate.Required("head", "body", m.Head); err != nil {
		return err
	}

	if m.Head != nil {
		if err := m.Head.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("head")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceUpdateConnectionBranchRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ServiceUpdateConnectionBranchRequest) validateRepo(formats strfmt.Registry) error {

	if err := validate.Required("repo", "body", m.Repo); err != nil {
		return err
	}

	if m.Repo != nil {
		if err := m.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service update connection branch request based on the context it is used
func (m *ServiceUpdateConnectionBranchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHead(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRepo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceUpdateConnectionBranchRequest) contextValidateHead(ctx context.Context, formats strfmt.Registry) error {

	if m.Head != nil {

		if err := m.Head.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("head")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceUpdateConnectionBranchRequest) contextValidateRepo(ctx context.Context, formats strfmt.Registry) error {

	if m.Repo != nil {

		if err := m.Repo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceUpdateConnectionBranchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceUpdateConnectionBranchRequest) UnmarshalBinary(b []byte) error {
	var res ServiceUpdateConnectionBranchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
