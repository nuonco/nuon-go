// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppTerraformWorkspaceState app terraform workspace state
//
// swagger:model app.TerraformWorkspaceState
type AppTerraformWorkspaceState struct {

	// contents
	Contents []int64 `json:"contents"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// revision
	Revision int64 `json:"revision,omitempty"`

	// runner job
	RunnerJob *AppRunnerJob `json:"runner_job,omitempty"`

	// runner job id
	RunnerJobID string `json:"runner_job_id,omitempty"`

	// terraform workspace
	TerraformWorkspace *AppTerraformWorkspace `json:"terraform_workspace,omitempty"`

	// terraform workspace id
	TerraformWorkspaceID string `json:"terraform_workspace_id,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app terraform workspace state
func (m *AppTerraformWorkspaceState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunnerJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerraformWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppTerraformWorkspaceState) validateRunnerJob(formats strfmt.Registry) error {
	if swag.IsZero(m.RunnerJob) { // not required
		return nil
	}

	if m.RunnerJob != nil {
		if err := m.RunnerJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner_job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner_job")
			}
			return err
		}
	}

	return nil
}

func (m *AppTerraformWorkspaceState) validateTerraformWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.TerraformWorkspace) { // not required
		return nil
	}

	if m.TerraformWorkspace != nil {
		if err := m.TerraformWorkspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app terraform workspace state based on the context it is used
func (m *AppTerraformWorkspaceState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRunnerJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerraformWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppTerraformWorkspaceState) contextValidateRunnerJob(ctx context.Context, formats strfmt.Registry) error {

	if m.RunnerJob != nil {

		if swag.IsZero(m.RunnerJob) { // not required
			return nil
		}

		if err := m.RunnerJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runner_job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runner_job")
			}
			return err
		}
	}

	return nil
}

func (m *AppTerraformWorkspaceState) contextValidateTerraformWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.TerraformWorkspace != nil {

		if swag.IsZero(m.TerraformWorkspace) { // not required
			return nil
		}

		if err := m.TerraformWorkspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraform_workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraform_workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppTerraformWorkspaceState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppTerraformWorkspaceState) UnmarshalBinary(b []byte) error {
	var res AppTerraformWorkspaceState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
