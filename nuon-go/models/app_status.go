// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppStatus app status
//
// swagger:model app.Status
type AppStatus string

func NewAppStatus(value AppStatus) *AppStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppStatus.
func (m AppStatus) Pointer() *AppStatus {
	return &m
}

const (

	// AppStatusError captures enum value "error"
	AppStatusError AppStatus = "error"

	// AppStatusPending captures enum value "pending"
	AppStatusPending AppStatus = "pending"

	// AppStatusInDashProgress captures enum value "in-progress"
	AppStatusInDashProgress AppStatus = "in-progress"

	// AppStatusSuccess captures enum value "success"
	AppStatusSuccess AppStatus = "success"

	// AppStatusNotDashAttempted captures enum value "not-attempted"
	AppStatusNotDashAttempted AppStatus = "not-attempted"

	// AppStatusCancelled captures enum value "cancelled"
	AppStatusCancelled AppStatus = "cancelled"

	// AppStatusDiscarded captures enum value "discarded"
	AppStatusDiscarded AppStatus = "discarded"

	// AppStatusGenerating captures enum value "generating"
	AppStatusGenerating AppStatus = "generating"

	// AppStatusAwaitingDashUserDashRun captures enum value "awaiting-user-run"
	AppStatusAwaitingDashUserDashRun AppStatus = "awaiting-user-run"

	// AppStatusProvisioning captures enum value "provisioning"
	AppStatusProvisioning AppStatus = "provisioning"

	// AppStatusActive captures enum value "active"
	AppStatusActive AppStatus = "active"

	// AppStatusOutdated captures enum value "outdated"
	AppStatusOutdated AppStatus = "outdated"

	// AppStatusExpired captures enum value "expired"
	AppStatusExpired AppStatus = "expired"

	// AppStatusApproved captures enum value "approved"
	AppStatusApproved AppStatus = "approved"

	// AppStatusApprovalDashExpired captures enum value "approval-expired"
	AppStatusApprovalDashExpired AppStatus = "approval-expired"

	// AppStatusApprovalDashDenied captures enum value "approval-denied"
	AppStatusApprovalDashDenied AppStatus = "approval-denied"

	// AppStatusApprovalDashRetry captures enum value "approval-retry"
	AppStatusApprovalDashRetry AppStatus = "approval-retry"

	// AppStatusNoop captures enum value "noop"
	AppStatusNoop AppStatus = "noop"

	// AppStatusApprovalDashAwaiting captures enum value "approval-awaiting"
	AppStatusApprovalDashAwaiting AppStatus = "approval-awaiting"
)

// for schema
var appStatusEnum []interface{}

func init() {
	var res []AppStatus
	if err := json.Unmarshal([]byte(`["error","pending","in-progress","success","not-attempted","cancelled","discarded","generating","awaiting-user-run","provisioning","active","outdated","expired","approved","approval-expired","approval-denied","approval-retry","noop","approval-awaiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appStatusEnum = append(appStatusEnum, v)
	}
}

func (m AppStatus) validateAppStatusEnum(path, location string, value AppStatus) error {
	if err := validate.EnumCase(path, location, value, appStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app status
func (m AppStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app status based on context it is used
func (m AppStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
