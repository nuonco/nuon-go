// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppComponentBuild app component build
//
// swagger:model app.ComponentBuild
type AppComponentBuild struct {

	// component config connection id
	ComponentConfigConnectionID string `json:"component_config_connection_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// git ref
	GitRef string `json:"git_ref,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// releases
	Releases []*AppComponentRelease `json:"releases"`

	// status
	Status string `json:"status,omitempty"`

	// status description
	StatusDescription string `json:"status_description,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// vcs connection commit
	VcsConnectionCommit *AppVCSConnectionCommit `json:"vcs_connection_commit,omitempty"`
}

// Validate validates this app component build
func (m *AppComponentBuild) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsConnectionCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppComponentBuild) validateReleases(formats strfmt.Registry) error {
	if swag.IsZero(m.Releases) { // not required
		return nil
	}

	for i := 0; i < len(m.Releases); i++ {
		if swag.IsZero(m.Releases[i]) { // not required
			continue
		}

		if m.Releases[i] != nil {
			if err := m.Releases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppComponentBuild) validateVcsConnectionCommit(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsConnectionCommit) { // not required
		return nil
	}

	if m.VcsConnectionCommit != nil {
		if err := m.VcsConnectionCommit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_connection_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_connection_commit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app component build based on the context it is used
func (m *AppComponentBuild) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReleases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcsConnectionCommit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppComponentBuild) contextValidateReleases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Releases); i++ {

		if m.Releases[i] != nil {

			if swag.IsZero(m.Releases[i]) { // not required
				return nil
			}

			if err := m.Releases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("releases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("releases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AppComponentBuild) contextValidateVcsConnectionCommit(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsConnectionCommit != nil {

		if swag.IsZero(m.VcsConnectionCommit) { // not required
			return nil
		}

		if err := m.VcsConnectionCommit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_connection_commit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_connection_commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppComponentBuild) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppComponentBuild) UnmarshalBinary(b []byte) error {
	var res AppComponentBuild
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
