// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppWorkflowStepExecutionType app workflow step execution type
//
// swagger:model app.WorkflowStepExecutionType
type AppWorkflowStepExecutionType string

func NewAppWorkflowStepExecutionType(value AppWorkflowStepExecutionType) *AppWorkflowStepExecutionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppWorkflowStepExecutionType.
func (m AppWorkflowStepExecutionType) Pointer() *AppWorkflowStepExecutionType {
	return &m
}

const (

	// AppWorkflowStepExecutionTypeSystem captures enum value "system"
	AppWorkflowStepExecutionTypeSystem AppWorkflowStepExecutionType = "system"

	// AppWorkflowStepExecutionTypeUser captures enum value "user"
	AppWorkflowStepExecutionTypeUser AppWorkflowStepExecutionType = "user"

	// AppWorkflowStepExecutionTypeApproval captures enum value "approval"
	AppWorkflowStepExecutionTypeApproval AppWorkflowStepExecutionType = "approval"

	// AppWorkflowStepExecutionTypeSkipped captures enum value "skipped"
	AppWorkflowStepExecutionTypeSkipped AppWorkflowStepExecutionType = "skipped"
)

// for schema
var appWorkflowStepExecutionTypeEnum []interface{}

func init() {
	var res []AppWorkflowStepExecutionType
	if err := json.Unmarshal([]byte(`["system","user","approval","skipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appWorkflowStepExecutionTypeEnum = append(appWorkflowStepExecutionTypeEnum, v)
	}
}

func (m AppWorkflowStepExecutionType) validateAppWorkflowStepExecutionTypeEnum(path, location string, value AppWorkflowStepExecutionType) error {
	if err := validate.EnumCase(path, location, value, appWorkflowStepExecutionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app workflow step execution type
func (m AppWorkflowStepExecutionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppWorkflowStepExecutionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app workflow step execution type based on context it is used
func (m AppWorkflowStepExecutionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
