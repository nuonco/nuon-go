// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AppInstallApprovalOption app install approval option
//
// swagger:model app.InstallApprovalOption
type AppInstallApprovalOption string

func NewAppInstallApprovalOption(value AppInstallApprovalOption) *AppInstallApprovalOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AppInstallApprovalOption.
func (m AppInstallApprovalOption) Pointer() *AppInstallApprovalOption {
	return &m
}

const (

	// AppInstallApprovalOptionApproveDashAll captures enum value "approve-all"
	AppInstallApprovalOptionApproveDashAll AppInstallApprovalOption = "approve-all"

	// AppInstallApprovalOptionPrompt captures enum value "prompt"
	AppInstallApprovalOptionPrompt AppInstallApprovalOption = "prompt"
)

// for schema
var appInstallApprovalOptionEnum []interface{}

func init() {
	var res []AppInstallApprovalOption
	if err := json.Unmarshal([]byte(`["approve-all","prompt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appInstallApprovalOptionEnum = append(appInstallApprovalOptionEnum, v)
	}
}

func (m AppInstallApprovalOption) validateAppInstallApprovalOptionEnum(path, location string, value AppInstallApprovalOption) error {
	if err := validate.EnumCase(path, location, value, appInstallApprovalOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this app install approval option
func (m AppInstallApprovalOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAppInstallApprovalOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app install approval option based on context it is used
func (m AppInstallApprovalOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
