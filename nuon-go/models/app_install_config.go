// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppInstallConfig app install config
//
// swagger:model app.InstallConfig
type AppInstallConfig struct {

	// approval option
	ApprovalOption AppInstallApprovalOption `json:"approval_option,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// created by id
	CreatedByID string `json:"created_by_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// install id
	InstallID string `json:"install_id,omitempty"`

	// org id
	OrgID string `json:"org_id,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this app install config
func (m *AppInstallConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallConfig) validateApprovalOption(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalOption) { // not required
		return nil
	}

	if err := m.ApprovalOption.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approval_option")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approval_option")
		}
		return err
	}

	return nil
}

// ContextValidate validate this app install config based on the context it is used
func (m *AppInstallConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprovalOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppInstallConfig) contextValidateApprovalOption(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalOption) { // not required
		return nil
	}

	if err := m.ApprovalOption.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approval_option")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approval_option")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppInstallConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppInstallConfig) UnmarshalBinary(b []byte) error {
	var res AppInstallConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
