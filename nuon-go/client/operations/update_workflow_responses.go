// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateWorkflowReader is a Reader for the UpdateWorkflow structure.
type UpdateWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/workflows/{workflow_id}] UpdateWorkflow", response, response.Code())
	}
}

// NewUpdateWorkflowOK creates a UpdateWorkflowOK with default headers values
func NewUpdateWorkflowOK() *UpdateWorkflowOK {
	return &UpdateWorkflowOK{}
}

/*
UpdateWorkflowOK describes a response with status code 200, with default header values.

OK
*/
type UpdateWorkflowOK struct {
	Payload *models.AppWorkflow
}

// IsSuccess returns true when this update workflow o k response has a 2xx status code
func (o *UpdateWorkflowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update workflow o k response has a 3xx status code
func (o *UpdateWorkflowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow o k response has a 4xx status code
func (o *UpdateWorkflowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update workflow o k response has a 5xx status code
func (o *UpdateWorkflowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow o k response a status code equal to that given
func (o *UpdateWorkflowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update workflow o k response
func (o *UpdateWorkflowOK) Code() int {
	return 200
}

func (o *UpdateWorkflowOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowOK  %+v", 200, o.Payload)
}

func (o *UpdateWorkflowOK) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowOK  %+v", 200, o.Payload)
}

func (o *UpdateWorkflowOK) GetPayload() *models.AppWorkflow {
	return o.Payload
}

func (o *UpdateWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppWorkflow)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowBadRequest creates a UpdateWorkflowBadRequest with default headers values
func NewUpdateWorkflowBadRequest() *UpdateWorkflowBadRequest {
	return &UpdateWorkflowBadRequest{}
}

/*
UpdateWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateWorkflowBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update workflow bad request response has a 2xx status code
func (o *UpdateWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow bad request response has a 3xx status code
func (o *UpdateWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow bad request response has a 4xx status code
func (o *UpdateWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow bad request response has a 5xx status code
func (o *UpdateWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow bad request response a status code equal to that given
func (o *UpdateWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update workflow bad request response
func (o *UpdateWorkflowBadRequest) Code() int {
	return 400
}

func (o *UpdateWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWorkflowBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWorkflowBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowUnauthorized creates a UpdateWorkflowUnauthorized with default headers values
func NewUpdateWorkflowUnauthorized() *UpdateWorkflowUnauthorized {
	return &UpdateWorkflowUnauthorized{}
}

/*
UpdateWorkflowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateWorkflowUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update workflow unauthorized response has a 2xx status code
func (o *UpdateWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow unauthorized response has a 3xx status code
func (o *UpdateWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow unauthorized response has a 4xx status code
func (o *UpdateWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow unauthorized response has a 5xx status code
func (o *UpdateWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow unauthorized response a status code equal to that given
func (o *UpdateWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update workflow unauthorized response
func (o *UpdateWorkflowUnauthorized) Code() int {
	return 401
}

func (o *UpdateWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateWorkflowUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowForbidden creates a UpdateWorkflowForbidden with default headers values
func NewUpdateWorkflowForbidden() *UpdateWorkflowForbidden {
	return &UpdateWorkflowForbidden{}
}

/*
UpdateWorkflowForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateWorkflowForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update workflow forbidden response has a 2xx status code
func (o *UpdateWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow forbidden response has a 3xx status code
func (o *UpdateWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow forbidden response has a 4xx status code
func (o *UpdateWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow forbidden response has a 5xx status code
func (o *UpdateWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow forbidden response a status code equal to that given
func (o *UpdateWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update workflow forbidden response
func (o *UpdateWorkflowForbidden) Code() int {
	return 403
}

func (o *UpdateWorkflowForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWorkflowForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWorkflowForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowNotFound creates a UpdateWorkflowNotFound with default headers values
func NewUpdateWorkflowNotFound() *UpdateWorkflowNotFound {
	return &UpdateWorkflowNotFound{}
}

/*
UpdateWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateWorkflowNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update workflow not found response has a 2xx status code
func (o *UpdateWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow not found response has a 3xx status code
func (o *UpdateWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow not found response has a 4xx status code
func (o *UpdateWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update workflow not found response has a 5xx status code
func (o *UpdateWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update workflow not found response a status code equal to that given
func (o *UpdateWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update workflow not found response
func (o *UpdateWorkflowNotFound) Code() int {
	return 404
}

func (o *UpdateWorkflowNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWorkflowNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWorkflowNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowInternalServerError creates a UpdateWorkflowInternalServerError with default headers values
func NewUpdateWorkflowInternalServerError() *UpdateWorkflowInternalServerError {
	return &UpdateWorkflowInternalServerError{}
}

/*
UpdateWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateWorkflowInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update workflow internal server error response has a 2xx status code
func (o *UpdateWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update workflow internal server error response has a 3xx status code
func (o *UpdateWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update workflow internal server error response has a 4xx status code
func (o *UpdateWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update workflow internal server error response has a 5xx status code
func (o *UpdateWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update workflow internal server error response a status code equal to that given
func (o *UpdateWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update workflow internal server error response
func (o *UpdateWorkflowInternalServerError) Code() int {
	return 500
}

func (o *UpdateWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateWorkflowInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/workflows/{workflow_id}][%d] updateWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateWorkflowInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
