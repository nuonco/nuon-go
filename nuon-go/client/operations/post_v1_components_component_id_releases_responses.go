// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// PostV1ComponentsComponentIDReleasesReader is a Reader for the PostV1ComponentsComponentIDReleases structure.
type PostV1ComponentsComponentIDReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1ComponentsComponentIDReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1ComponentsComponentIDReleasesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1ComponentsComponentIDReleasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostV1ComponentsComponentIDReleasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostV1ComponentsComponentIDReleasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostV1ComponentsComponentIDReleasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1ComponentsComponentIDReleasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/components/{component_id}/releases] PostV1ComponentsComponentIDReleases", response, response.Code())
	}
}

// NewPostV1ComponentsComponentIDReleasesCreated creates a PostV1ComponentsComponentIDReleasesCreated with default headers values
func NewPostV1ComponentsComponentIDReleasesCreated() *PostV1ComponentsComponentIDReleasesCreated {
	return &PostV1ComponentsComponentIDReleasesCreated{}
}

/*
PostV1ComponentsComponentIDReleasesCreated describes a response with status code 201, with default header values.

Created
*/
type PostV1ComponentsComponentIDReleasesCreated struct {
	Payload *models.AppComponentRelease
}

// IsSuccess returns true when this post v1 components component Id releases created response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 components component Id releases created response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases created response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 components component Id releases created response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 components component Id releases created response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 components component Id releases created response
func (o *PostV1ComponentsComponentIDReleasesCreated) Code() int {
	return 201
}

func (o *PostV1ComponentsComponentIDReleasesCreated) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesCreated  %+v", 201, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesCreated) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesCreated  %+v", 201, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesCreated) GetPayload() *models.AppComponentRelease {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponentRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ComponentsComponentIDReleasesBadRequest creates a PostV1ComponentsComponentIDReleasesBadRequest with default headers values
func NewPostV1ComponentsComponentIDReleasesBadRequest() *PostV1ComponentsComponentIDReleasesBadRequest {
	return &PostV1ComponentsComponentIDReleasesBadRequest{}
}

/*
PostV1ComponentsComponentIDReleasesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1ComponentsComponentIDReleasesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 components component Id releases bad request response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 components component Id releases bad request response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases bad request response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 components component Id releases bad request response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 components component Id releases bad request response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 components component Id releases bad request response
func (o *PostV1ComponentsComponentIDReleasesBadRequest) Code() int {
	return 400
}

func (o *PostV1ComponentsComponentIDReleasesBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesBadRequest  %+v", 400, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesBadRequest  %+v", 400, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ComponentsComponentIDReleasesUnauthorized creates a PostV1ComponentsComponentIDReleasesUnauthorized with default headers values
func NewPostV1ComponentsComponentIDReleasesUnauthorized() *PostV1ComponentsComponentIDReleasesUnauthorized {
	return &PostV1ComponentsComponentIDReleasesUnauthorized{}
}

/*
PostV1ComponentsComponentIDReleasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostV1ComponentsComponentIDReleasesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 components component Id releases unauthorized response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 components component Id releases unauthorized response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases unauthorized response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 components component Id releases unauthorized response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 components component Id releases unauthorized response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post v1 components component Id releases unauthorized response
func (o *PostV1ComponentsComponentIDReleasesUnauthorized) Code() int {
	return 401
}

func (o *PostV1ComponentsComponentIDReleasesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ComponentsComponentIDReleasesForbidden creates a PostV1ComponentsComponentIDReleasesForbidden with default headers values
func NewPostV1ComponentsComponentIDReleasesForbidden() *PostV1ComponentsComponentIDReleasesForbidden {
	return &PostV1ComponentsComponentIDReleasesForbidden{}
}

/*
PostV1ComponentsComponentIDReleasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostV1ComponentsComponentIDReleasesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 components component Id releases forbidden response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 components component Id releases forbidden response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases forbidden response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 components component Id releases forbidden response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 components component Id releases forbidden response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post v1 components component Id releases forbidden response
func (o *PostV1ComponentsComponentIDReleasesForbidden) Code() int {
	return 403
}

func (o *PostV1ComponentsComponentIDReleasesForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesForbidden  %+v", 403, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesForbidden) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesForbidden  %+v", 403, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ComponentsComponentIDReleasesNotFound creates a PostV1ComponentsComponentIDReleasesNotFound with default headers values
func NewPostV1ComponentsComponentIDReleasesNotFound() *PostV1ComponentsComponentIDReleasesNotFound {
	return &PostV1ComponentsComponentIDReleasesNotFound{}
}

/*
PostV1ComponentsComponentIDReleasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostV1ComponentsComponentIDReleasesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 components component Id releases not found response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 components component Id releases not found response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases not found response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 components component Id releases not found response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 components component Id releases not found response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post v1 components component Id releases not found response
func (o *PostV1ComponentsComponentIDReleasesNotFound) Code() int {
	return 404
}

func (o *PostV1ComponentsComponentIDReleasesNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesNotFound  %+v", 404, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesNotFound) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesNotFound  %+v", 404, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ComponentsComponentIDReleasesInternalServerError creates a PostV1ComponentsComponentIDReleasesInternalServerError with default headers values
func NewPostV1ComponentsComponentIDReleasesInternalServerError() *PostV1ComponentsComponentIDReleasesInternalServerError {
	return &PostV1ComponentsComponentIDReleasesInternalServerError{}
}

/*
PostV1ComponentsComponentIDReleasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1ComponentsComponentIDReleasesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 components component Id releases internal server error response has a 2xx status code
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 components component Id releases internal server error response has a 3xx status code
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 components component Id releases internal server error response has a 4xx status code
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 components component Id releases internal server error response has a 5xx status code
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 components component Id releases internal server error response a status code equal to that given
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 components component Id releases internal server error response
func (o *PostV1ComponentsComponentIDReleasesInternalServerError) Code() int {
	return 500
}

func (o *PostV1ComponentsComponentIDReleasesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/components/{component_id}/releases][%d] postV1ComponentsComponentIdReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostV1ComponentsComponentIDReleasesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ComponentsComponentIDReleasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
