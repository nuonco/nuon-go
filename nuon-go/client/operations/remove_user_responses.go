// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// RemoveUserReader is a Reader for the RemoveUser structure.
type RemoveUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRemoveUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRemoveUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/orgs/current/remove-user] RemoveUser", response, response.Code())
	}
}

// NewRemoveUserCreated creates a RemoveUserCreated with default headers values
func NewRemoveUserCreated() *RemoveUserCreated {
	return &RemoveUserCreated{}
}

/*
RemoveUserCreated describes a response with status code 201, with default header values.

Created
*/
type RemoveUserCreated struct {
	Payload *models.AppAccount
}

// IsSuccess returns true when this remove user created response has a 2xx status code
func (o *RemoveUserCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove user created response has a 3xx status code
func (o *RemoveUserCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user created response has a 4xx status code
func (o *RemoveUserCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove user created response has a 5xx status code
func (o *RemoveUserCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user created response a status code equal to that given
func (o *RemoveUserCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the remove user created response
func (o *RemoveUserCreated) Code() int {
	return 201
}

func (o *RemoveUserCreated) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserCreated  %+v", 201, o.Payload)
}

func (o *RemoveUserCreated) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserCreated  %+v", 201, o.Payload)
}

func (o *RemoveUserCreated) GetPayload() *models.AppAccount {
	return o.Payload
}

func (o *RemoveUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppAccount)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserBadRequest creates a RemoveUserBadRequest with default headers values
func NewRemoveUserBadRequest() *RemoveUserBadRequest {
	return &RemoveUserBadRequest{}
}

/*
RemoveUserBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RemoveUserBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this remove user bad request response has a 2xx status code
func (o *RemoveUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user bad request response has a 3xx status code
func (o *RemoveUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user bad request response has a 4xx status code
func (o *RemoveUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user bad request response has a 5xx status code
func (o *RemoveUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user bad request response a status code equal to that given
func (o *RemoveUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove user bad request response
func (o *RemoveUserBadRequest) Code() int {
	return 400
}

func (o *RemoveUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveUserBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserBadRequest  %+v", 400, o.Payload)
}

func (o *RemoveUserBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RemoveUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserUnauthorized creates a RemoveUserUnauthorized with default headers values
func NewRemoveUserUnauthorized() *RemoveUserUnauthorized {
	return &RemoveUserUnauthorized{}
}

/*
RemoveUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RemoveUserUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this remove user unauthorized response has a 2xx status code
func (o *RemoveUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user unauthorized response has a 3xx status code
func (o *RemoveUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user unauthorized response has a 4xx status code
func (o *RemoveUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user unauthorized response has a 5xx status code
func (o *RemoveUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user unauthorized response a status code equal to that given
func (o *RemoveUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remove user unauthorized response
func (o *RemoveUserUnauthorized) Code() int {
	return 401
}

func (o *RemoveUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RemoveUserUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RemoveUserUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RemoveUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserForbidden creates a RemoveUserForbidden with default headers values
func NewRemoveUserForbidden() *RemoveUserForbidden {
	return &RemoveUserForbidden{}
}

/*
RemoveUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RemoveUserForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this remove user forbidden response has a 2xx status code
func (o *RemoveUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user forbidden response has a 3xx status code
func (o *RemoveUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user forbidden response has a 4xx status code
func (o *RemoveUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user forbidden response has a 5xx status code
func (o *RemoveUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user forbidden response a status code equal to that given
func (o *RemoveUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the remove user forbidden response
func (o *RemoveUserForbidden) Code() int {
	return 403
}

func (o *RemoveUserForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserForbidden  %+v", 403, o.Payload)
}

func (o *RemoveUserForbidden) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserForbidden  %+v", 403, o.Payload)
}

func (o *RemoveUserForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RemoveUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserNotFound creates a RemoveUserNotFound with default headers values
func NewRemoveUserNotFound() *RemoveUserNotFound {
	return &RemoveUserNotFound{}
}

/*
RemoveUserNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RemoveUserNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this remove user not found response has a 2xx status code
func (o *RemoveUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user not found response has a 3xx status code
func (o *RemoveUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user not found response has a 4xx status code
func (o *RemoveUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user not found response has a 5xx status code
func (o *RemoveUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user not found response a status code equal to that given
func (o *RemoveUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove user not found response
func (o *RemoveUserNotFound) Code() int {
	return 404
}

func (o *RemoveUserNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserNotFound  %+v", 404, o.Payload)
}

func (o *RemoveUserNotFound) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserNotFound  %+v", 404, o.Payload)
}

func (o *RemoveUserNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RemoveUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserInternalServerError creates a RemoveUserInternalServerError with default headers values
func NewRemoveUserInternalServerError() *RemoveUserInternalServerError {
	return &RemoveUserInternalServerError{}
}

/*
RemoveUserInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RemoveUserInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this remove user internal server error response has a 2xx status code
func (o *RemoveUserInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user internal server error response has a 3xx status code
func (o *RemoveUserInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user internal server error response has a 4xx status code
func (o *RemoveUserInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove user internal server error response has a 5xx status code
func (o *RemoveUserInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this remove user internal server error response a status code equal to that given
func (o *RemoveUserInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the remove user internal server error response
func (o *RemoveUserInternalServerError) Code() int {
	return 500
}

func (o *RemoveUserInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveUserInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/orgs/current/remove-user][%d] removeUserInternalServerError  %+v", 500, o.Payload)
}

func (o *RemoveUserInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RemoveUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
