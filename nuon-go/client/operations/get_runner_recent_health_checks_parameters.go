// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRunnerRecentHealthChecksParams creates a new GetRunnerRecentHealthChecksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRunnerRecentHealthChecksParams() *GetRunnerRecentHealthChecksParams {
	return &GetRunnerRecentHealthChecksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunnerRecentHealthChecksParamsWithTimeout creates a new GetRunnerRecentHealthChecksParams object
// with the ability to set a timeout on a request.
func NewGetRunnerRecentHealthChecksParamsWithTimeout(timeout time.Duration) *GetRunnerRecentHealthChecksParams {
	return &GetRunnerRecentHealthChecksParams{
		timeout: timeout,
	}
}

// NewGetRunnerRecentHealthChecksParamsWithContext creates a new GetRunnerRecentHealthChecksParams object
// with the ability to set a context for a request.
func NewGetRunnerRecentHealthChecksParamsWithContext(ctx context.Context) *GetRunnerRecentHealthChecksParams {
	return &GetRunnerRecentHealthChecksParams{
		Context: ctx,
	}
}

// NewGetRunnerRecentHealthChecksParamsWithHTTPClient creates a new GetRunnerRecentHealthChecksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRunnerRecentHealthChecksParamsWithHTTPClient(client *http.Client) *GetRunnerRecentHealthChecksParams {
	return &GetRunnerRecentHealthChecksParams{
		HTTPClient: client,
	}
}

/*
GetRunnerRecentHealthChecksParams contains all the parameters to send to the API endpoint

	for the get runner recent health checks operation.

	Typically these are written to a http.Request.
*/
type GetRunnerRecentHealthChecksParams struct {

	/* Limit.

	   limit of results to return

	   Default: 10
	*/
	Limit *int64

	/* Offset.

	   offset of results to return
	*/
	Offset *int64

	/* Page.

	   page number of results to return
	*/
	Page *int64

	/* RunnerID.

	   runner ID
	*/
	RunnerID string

	/* Window.

	   window of health checks to return

	   Default: "1h"
	*/
	Window *string

	/* XNuonPaginationEnabled.

	   Enable pagination
	*/
	XNuonPaginationEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get runner recent health checks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunnerRecentHealthChecksParams) WithDefaults() *GetRunnerRecentHealthChecksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get runner recent health checks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunnerRecentHealthChecksParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)

		pageDefault = int64(0)

		windowDefault = string("1h")
	)

	val := GetRunnerRecentHealthChecksParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
		Page:   &pageDefault,
		Window: &windowDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithTimeout(timeout time.Duration) *GetRunnerRecentHealthChecksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithContext(ctx context.Context) *GetRunnerRecentHealthChecksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithHTTPClient(client *http.Client) *GetRunnerRecentHealthChecksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithLimit(limit *int64) *GetRunnerRecentHealthChecksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithOffset(offset *int64) *GetRunnerRecentHealthChecksParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithPage(page *int64) *GetRunnerRecentHealthChecksParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetPage(page *int64) {
	o.Page = page
}

// WithRunnerID adds the runnerID to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithRunnerID(runnerID string) *GetRunnerRecentHealthChecksParams {
	o.SetRunnerID(runnerID)
	return o
}

// SetRunnerID adds the runnerId to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetRunnerID(runnerID string) {
	o.RunnerID = runnerID
}

// WithWindow adds the window to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithWindow(window *string) *GetRunnerRecentHealthChecksParams {
	o.SetWindow(window)
	return o
}

// SetWindow adds the window to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetWindow(window *string) {
	o.Window = window
}

// WithXNuonPaginationEnabled adds the xNuonPaginationEnabled to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) WithXNuonPaginationEnabled(xNuonPaginationEnabled *bool) *GetRunnerRecentHealthChecksParams {
	o.SetXNuonPaginationEnabled(xNuonPaginationEnabled)
	return o
}

// SetXNuonPaginationEnabled adds the xNuonPaginationEnabled to the get runner recent health checks params
func (o *GetRunnerRecentHealthChecksParams) SetXNuonPaginationEnabled(xNuonPaginationEnabled *bool) {
	o.XNuonPaginationEnabled = xNuonPaginationEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunnerRecentHealthChecksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param runner_id
	if err := r.SetPathParam("runner_id", o.RunnerID); err != nil {
		return err
	}

	if o.Window != nil {

		// query param window
		var qrWindow string

		if o.Window != nil {
			qrWindow = *o.Window
		}
		qWindow := qrWindow
		if qWindow != "" {

			if err := r.SetQueryParam("window", qWindow); err != nil {
				return err
			}
		}
	}

	if o.XNuonPaginationEnabled != nil {

		// header param x-nuon-pagination-enabled
		if err := r.SetHeaderParam("x-nuon-pagination-enabled", swag.FormatBool(*o.XNuonPaginationEnabled)); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
