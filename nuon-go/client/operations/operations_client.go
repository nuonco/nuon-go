// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1AppsAppID(params *DeleteV1AppsAppIDParams, opts ...ClientOption) (*DeleteV1AppsAppIDOK, error)

	DeleteV1ComponentsComponentID(params *DeleteV1ComponentsComponentIDParams, opts ...ClientOption) (*DeleteV1ComponentsComponentIDOK, error)

	DeleteV1InstallsInstallID(params *DeleteV1InstallsInstallIDParams, opts ...ClientOption) (*DeleteV1InstallsInstallIDOK, error)

	DeleteV1OrgsCurrent(params *DeleteV1OrgsCurrentParams, opts ...ClientOption) (*DeleteV1OrgsCurrentOK, error)

	GetV1Apps(params *GetV1AppsParams, opts ...ClientOption) (*GetV1AppsOK, error)

	GetV1AppsAppID(params *GetV1AppsAppIDParams, opts ...ClientOption) (*GetV1AppsAppIDOK, error)

	GetV1AppsAppIDComponents(params *GetV1AppsAppIDComponentsParams, opts ...ClientOption) (*GetV1AppsAppIDComponentsOK, error)

	GetV1AppsAppIDInstalls(params *GetV1AppsAppIDInstallsParams, opts ...ClientOption) (*GetV1AppsAppIDInstallsOK, error)

	GetV1AppsAppIDReleases(params *GetV1AppsAppIDReleasesParams, opts ...ClientOption) (*GetV1AppsAppIDReleasesOK, error)

	GetV1Components(params *GetV1ComponentsParams, opts ...ClientOption) (*GetV1ComponentsOK, error)

	GetV1ComponentsComponentID(params *GetV1ComponentsComponentIDParams, opts ...ClientOption) (*GetV1ComponentsComponentIDOK, error)

	GetV1ComponentsComponentIDBuilds(params *GetV1ComponentsComponentIDBuildsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsOK, error)

	GetV1ComponentsComponentIDBuildsBuildID(params *GetV1ComponentsComponentIDBuildsBuildIDParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsBuildIDOK, error)

	GetV1ComponentsComponentIDBuildsBuildIDLogs(params *GetV1ComponentsComponentIDBuildsBuildIDLogsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsBuildIDLogsOK, error)

	GetV1ComponentsComponentIDBuildsLatest(params *GetV1ComponentsComponentIDBuildsLatestParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsLatestOK, error)

	GetV1ComponentsComponentIDConfigs(params *GetV1ComponentsComponentIDConfigsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDConfigsOK, error)

	GetV1ComponentsComponentIDConfigsLatest(params *GetV1ComponentsComponentIDConfigsLatestParams, opts ...ClientOption) (*GetV1ComponentsComponentIDConfigsLatestOK, error)

	GetV1ComponentsComponentIDReleases(params *GetV1ComponentsComponentIDReleasesParams, opts ...ClientOption) (*GetV1ComponentsComponentIDReleasesOK, error)

	GetV1GeneralCurrentUser(params *GetV1GeneralCurrentUserParams, opts ...ClientOption) (*GetV1GeneralCurrentUserOK, error)

	GetV1Installs(params *GetV1InstallsParams, opts ...ClientOption) (*GetV1InstallsOK, error)

	GetV1InstallsInstallID(params *GetV1InstallsInstallIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDOK, error)

	GetV1InstallsInstallIDComponentComponentID(params *GetV1InstallsInstallIDComponentComponentIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentComponentIDOK, error)

	GetV1InstallsInstallIDComponents(params *GetV1InstallsInstallIDComponentsParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsOK, error)

	GetV1InstallsInstallIDComponentsComponentIDDeploys(params *GetV1InstallsInstallIDComponentsComponentIDDeploysParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsComponentIDDeploysOK, error)

	GetV1InstallsInstallIDComponentsComponentIDDeploysLatest(params *GetV1InstallsInstallIDComponentsComponentIDDeploysLatestParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsComponentIDDeploysLatestOK, error)

	GetV1InstallsInstallIDDeploys(params *GetV1InstallsInstallIDDeploysParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysOK, error)

	GetV1InstallsInstallIDDeploysDeployID(params *GetV1InstallsInstallIDDeploysDeployIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysDeployIDOK, error)

	GetV1InstallsInstallIDDeploysDeployIDLogs(params *GetV1InstallsInstallIDDeploysDeployIDLogsParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysDeployIDLogsOK, error)

	GetV1InstallsInstallIDDeploysLatest(params *GetV1InstallsInstallIDDeploysLatestParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysLatestOK, error)

	GetV1Orgs(params *GetV1OrgsParams, opts ...ClientOption) (*GetV1OrgsOK, error)

	GetV1OrgsCurrent(params *GetV1OrgsCurrentParams, opts ...ClientOption) (*GetV1OrgsCurrentOK, error)

	GetV1Releases(params *GetV1ReleasesParams, opts ...ClientOption) (*GetV1ReleasesOK, error)

	GetV1ReleasesReleaseID(params *GetV1ReleasesReleaseIDParams, opts ...ClientOption) (*GetV1ReleasesReleaseIDOK, error)

	GetV1ReleasesReleaseIDSteps(params *GetV1ReleasesReleaseIDStepsParams, opts ...ClientOption) (*GetV1ReleasesReleaseIDStepsOK, error)

	GetV1Sandboxes(params *GetV1SandboxesParams, opts ...ClientOption) (*GetV1SandboxesOK, error)

	GetV1SandboxesSandboxID(params *GetV1SandboxesSandboxIDParams, opts ...ClientOption) (*GetV1SandboxesSandboxIDOK, error)

	GetV1SandboxesSandboxIDReleases(params *GetV1SandboxesSandboxIDReleasesParams, opts ...ClientOption) (*GetV1SandboxesSandboxIDReleasesOK, error)

	GetV1VcsConnectedRepos(params *GetV1VcsConnectedReposParams, opts ...ClientOption) (*GetV1VcsConnectedReposOK, error)

	GetV1VcsConnections(params *GetV1VcsConnectionsParams, opts ...ClientOption) (*GetV1VcsConnectionsOK, error)

	GetV1VcsConnectionsConnectionID(params *GetV1VcsConnectionsConnectionIDParams, opts ...ClientOption) (*GetV1VcsConnectionsConnectionIDOK, error)

	PatchV1AppsAppID(params *PatchV1AppsAppIDParams, opts ...ClientOption) (*PatchV1AppsAppIDOK, error)

	PatchV1ComponentsComponentID(params *PatchV1ComponentsComponentIDParams, opts ...ClientOption) (*PatchV1ComponentsComponentIDOK, error)

	PatchV1InstallsInstallID(params *PatchV1InstallsInstallIDParams, opts ...ClientOption) (*PatchV1InstallsInstallIDOK, error)

	PatchV1OrgsCurrent(params *PatchV1OrgsCurrentParams, opts ...ClientOption) (*PatchV1OrgsCurrentOK, error)

	PostV1Apps(params *PostV1AppsParams, opts ...ClientOption) (*PostV1AppsCreated, error)

	PostV1AppsAppIDComponents(params *PostV1AppsAppIDComponentsParams, opts ...ClientOption) (*PostV1AppsAppIDComponentsCreated, error)

	PostV1AppsAppIDInstalls(params *PostV1AppsAppIDInstallsParams, opts ...ClientOption) (*PostV1AppsAppIDInstallsCreated, error)

	PostV1ComponentsComponentIDBuilds(params *PostV1ComponentsComponentIDBuildsParams, opts ...ClientOption) (*PostV1ComponentsComponentIDBuildsCreated, error)

	PostV1ComponentsComponentIDConfigsDockerBuild(params *PostV1ComponentsComponentIDConfigsDockerBuildParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsDockerBuildCreated, error)

	PostV1ComponentsComponentIDConfigsExternalImage(params *PostV1ComponentsComponentIDConfigsExternalImageParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsExternalImageCreated, error)

	PostV1ComponentsComponentIDConfigsHelm(params *PostV1ComponentsComponentIDConfigsHelmParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsHelmCreated, error)

	PostV1ComponentsComponentIDConfigsTerraformModule(params *PostV1ComponentsComponentIDConfigsTerraformModuleParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsTerraformModuleCreated, error)

	PostV1ComponentsComponentIDReleases(params *PostV1ComponentsComponentIDReleasesParams, opts ...ClientOption) (*PostV1ComponentsComponentIDReleasesCreated, error)

	PostV1GeneralMetrics(params *PostV1GeneralMetricsParams, opts ...ClientOption) (*PostV1GeneralMetricsOK, error)

	PostV1InstallsInstallIDDeploys(params *PostV1InstallsInstallIDDeploysParams, opts ...ClientOption) (*PostV1InstallsInstallIDDeploysCreated, error)

	PostV1Orgs(params *PostV1OrgsParams, opts ...ClientOption) (*PostV1OrgsCreated, error)

	PostV1OrgsCurrentUser(params *PostV1OrgsCurrentUserParams, opts ...ClientOption) (*PostV1OrgsCurrentUserCreated, error)

	PostV1OrgsOrgIDSupportUsers(params *PostV1OrgsOrgIDSupportUsersParams, opts ...ClientOption) (*PostV1OrgsOrgIDSupportUsersCreated, error)

	PostV1Sandboxes(params *PostV1SandboxesParams, opts ...ClientOption) (*PostV1SandboxesCreated, error)

	PostV1SandboxesSandboxIDRelease(params *PostV1SandboxesSandboxIDReleaseParams, opts ...ClientOption) (*PostV1SandboxesSandboxIDReleaseCreated, error)

	PostV1VcsConnections(params *PostV1VcsConnectionsParams, opts ...ClientOption) (*PostV1VcsConnectionsCreated, error)

	PutV1AppsAppIDSandbox(params *PutV1AppsAppIDSandboxParams, opts ...ClientOption) (*PutV1AppsAppIDSandboxOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1AppsAppID deletes an app

delete an app
*/
func (a *Client) DeleteV1AppsAppID(params *DeleteV1AppsAppIDParams, opts ...ClientOption) (*DeleteV1AppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1AppsAppIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1AppsAppID",
		Method:             "DELETE",
		PathPattern:        "/v1/apps/{app_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1AppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1AppsAppIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1AppsAppID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1ComponentsComponentID deletes an component

delete an component
*/
func (a *Client) DeleteV1ComponentsComponentID(params *DeleteV1ComponentsComponentIDParams, opts ...ClientOption) (*DeleteV1ComponentsComponentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ComponentsComponentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1ComponentsComponentID",
		Method:             "DELETE",
		PathPattern:        "/v1/components/{component_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1ComponentsComponentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ComponentsComponentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1ComponentsComponentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1InstallsInstallID deletes an install

delete an install
*/
func (a *Client) DeleteV1InstallsInstallID(params *DeleteV1InstallsInstallIDParams, opts ...ClientOption) (*DeleteV1InstallsInstallIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1InstallsInstallIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1InstallsInstallID",
		Method:             "DELETE",
		PathPattern:        "/v1/installs/{install_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1InstallsInstallIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1InstallsInstallIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1InstallsInstallID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteV1OrgsCurrent deletes an org

create a new org
*/
func (a *Client) DeleteV1OrgsCurrent(params *DeleteV1OrgsCurrentParams, opts ...ClientOption) (*DeleteV1OrgsCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1OrgsCurrentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1OrgsCurrent",
		Method:             "DELETE",
		PathPattern:        "/v1/orgs/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1OrgsCurrentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1OrgsCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1OrgsCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Apps gets all apps for the current org

get an app
*/
func (a *Client) GetV1Apps(params *GetV1AppsParams, opts ...ClientOption) (*GetV1AppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Apps",
		Method:             "GET",
		PathPattern:        "/v1/apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Apps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AppsAppID gets an app

get an app
*/
func (a *Client) GetV1AppsAppID(params *GetV1AppsAppIDParams, opts ...ClientOption) (*GetV1AppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AppsAppIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AppsAppID",
		Method:             "GET",
		PathPattern:        "/v1/apps/{app_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AppsAppIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AppsAppID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AppsAppIDComponents gets all components for an app

get all components for an org
*/
func (a *Client) GetV1AppsAppIDComponents(params *GetV1AppsAppIDComponentsParams, opts ...ClientOption) (*GetV1AppsAppIDComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AppsAppIDComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AppsAppIDComponents",
		Method:             "GET",
		PathPattern:        "/v1/apps/{app_id}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AppsAppIDComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AppsAppIDComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AppsAppIDComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AppsAppIDInstalls gets all installs for an app

get all installs for an org
*/
func (a *Client) GetV1AppsAppIDInstalls(params *GetV1AppsAppIDInstallsParams, opts ...ClientOption) (*GetV1AppsAppIDInstallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AppsAppIDInstallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AppsAppIDInstalls",
		Method:             "GET",
		PathPattern:        "/v1/apps/{app_id}/installs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AppsAppIDInstallsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AppsAppIDInstallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AppsAppIDInstalls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1AppsAppIDReleases gets all releases for an app

get all release for an app
*/
func (a *Client) GetV1AppsAppIDReleases(params *GetV1AppsAppIDReleasesParams, opts ...ClientOption) (*GetV1AppsAppIDReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1AppsAppIDReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1AppsAppIDReleases",
		Method:             "GET",
		PathPattern:        "/v1/apps/{app_id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1AppsAppIDReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1AppsAppIDReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1AppsAppIDReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Components gets all components for an org

get all components for an org
*/
func (a *Client) GetV1Components(params *GetV1ComponentsParams, opts ...ClientOption) (*GetV1ComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Components",
		Method:             "GET",
		PathPattern:        "/v1/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Components: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentID gets a component

get a component
*/
func (a *Client) GetV1ComponentsComponentID(params *GetV1ComponentsComponentIDParams, opts ...ClientOption) (*GetV1ComponentsComponentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentID",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDBuilds gets all builds for a component

get all builds for a component
*/
func (a *Client) GetV1ComponentsComponentIDBuilds(params *GetV1ComponentsComponentIDBuildsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDBuilds",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDBuildsBuildID gets a build for a component

get a build for a component
*/
func (a *Client) GetV1ComponentsComponentIDBuildsBuildID(params *GetV1ComponentsComponentIDBuildsBuildIDParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsBuildIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDBuildsBuildIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDBuildsBuildID",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/builds/{build_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDBuildsBuildIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDBuildsBuildIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDBuildsBuildID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDBuildsBuildIDLogs gets install build logs

get install build logs
*/
func (a *Client) GetV1ComponentsComponentIDBuildsBuildIDLogs(params *GetV1ComponentsComponentIDBuildsBuildIDLogsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsBuildIDLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDBuildsBuildIDLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDBuildsBuildIDLogs",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/builds/{build_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDBuildsBuildIDLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDBuildsBuildIDLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDBuildsBuildIDLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDBuildsLatest gets latest build for a component

get latest build for a component
*/
func (a *Client) GetV1ComponentsComponentIDBuildsLatest(params *GetV1ComponentsComponentIDBuildsLatestParams, opts ...ClientOption) (*GetV1ComponentsComponentIDBuildsLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDBuildsLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDBuildsLatest",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/builds/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDBuildsLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDBuildsLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDBuildsLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDConfigs gets all configs for a component

get all configs for a component
*/
func (a *Client) GetV1ComponentsComponentIDConfigs(params *GetV1ComponentsComponentIDConfigsParams, opts ...ClientOption) (*GetV1ComponentsComponentIDConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDConfigs",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDConfigs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDConfigsLatest gets latest config for a component

get latest config for a component
*/
func (a *Client) GetV1ComponentsComponentIDConfigsLatest(params *GetV1ComponentsComponentIDConfigsLatestParams, opts ...ClientOption) (*GetV1ComponentsComponentIDConfigsLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDConfigsLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDConfigsLatest",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/configs/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDConfigsLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDConfigsLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDConfigsLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ComponentsComponentIDReleases gets all releases for a component

get all releases for a component
*/
func (a *Client) GetV1ComponentsComponentIDReleases(params *GetV1ComponentsComponentIDReleasesParams, opts ...ClientOption) (*GetV1ComponentsComponentIDReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ComponentsComponentIDReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ComponentsComponentIDReleases",
		Method:             "GET",
		PathPattern:        "/v1/components/{component_id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ComponentsComponentIDReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ComponentsComponentIDReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ComponentsComponentIDReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1GeneralCurrentUser gets current user

get current user
*/
func (a *Client) GetV1GeneralCurrentUser(params *GetV1GeneralCurrentUserParams, opts ...ClientOption) (*GetV1GeneralCurrentUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1GeneralCurrentUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1GeneralCurrentUser",
		Method:             "GET",
		PathPattern:        "/v1/general/current-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1GeneralCurrentUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1GeneralCurrentUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1GeneralCurrentUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Installs gets all installs for an org

get all installs for an org
*/
func (a *Client) GetV1Installs(params *GetV1InstallsParams, opts ...ClientOption) (*GetV1InstallsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Installs",
		Method:             "GET",
		PathPattern:        "/v1/installs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Installs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallID gets an install

get an install
*/
func (a *Client) GetV1InstallsInstallID(params *GetV1InstallsInstallIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallID",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDComponentComponentID gets an install component

get an install
*/
func (a *Client) GetV1InstallsInstallIDComponentComponentID(params *GetV1InstallsInstallIDComponentComponentIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentComponentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDComponentComponentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDComponentComponentID",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/component/{component_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDComponentComponentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDComponentComponentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDComponentComponentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDComponents gets an installs components

get all components for an install
*/
func (a *Client) GetV1InstallsInstallIDComponents(params *GetV1InstallsInstallIDComponentsParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDComponents",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDComponentsComponentIDDeploys gets an install components deploys

get all deploys for an install
*/
func (a *Client) GetV1InstallsInstallIDComponentsComponentIDDeploys(params *GetV1InstallsInstallIDComponentsComponentIDDeploysParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsComponentIDDeploysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDComponentsComponentIDDeploysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDComponentsComponentIDDeploys",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/components/{component_id}/deploys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDComponentsComponentIDDeploysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDComponentsComponentIDDeploysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDComponentsComponentIDDeploys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDComponentsComponentIDDeploysLatest gets the latest deploy for an install component

get latest deploy for an install component
*/
func (a *Client) GetV1InstallsInstallIDComponentsComponentIDDeploysLatest(params *GetV1InstallsInstallIDComponentsComponentIDDeploysLatestParams, opts ...ClientOption) (*GetV1InstallsInstallIDComponentsComponentIDDeploysLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDComponentsComponentIDDeploysLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDComponentsComponentIDDeploysLatest",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/components/{component_id}/deploys/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDComponentsComponentIDDeploysLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDComponentsComponentIDDeploysLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDComponentsComponentIDDeploysLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDDeploys gets an installs deploys

get all deploys for an install
*/
func (a *Client) GetV1InstallsInstallIDDeploys(params *GetV1InstallsInstallIDDeploysParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDDeploysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDDeploys",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/deploys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDDeploysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDDeploysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDDeploys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDDeploysDeployID gets an install deploy

get an install deploy
*/
func (a *Client) GetV1InstallsInstallIDDeploysDeployID(params *GetV1InstallsInstallIDDeploysDeployIDParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysDeployIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDDeploysDeployIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDDeploysDeployID",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/deploys/{deploy_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDDeploysDeployIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDDeploysDeployIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDDeploysDeployID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDDeploysDeployIDLogs gets install deploy logs

get install deploy logs
*/
func (a *Client) GetV1InstallsInstallIDDeploysDeployIDLogs(params *GetV1InstallsInstallIDDeploysDeployIDLogsParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysDeployIDLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDDeploysDeployIDLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDDeploysDeployIDLogs",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/deploys/{deploy_id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDDeploysDeployIDLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDDeploysDeployIDLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDDeploysDeployIDLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1InstallsInstallIDDeploysLatest gets an install deploy

get an install deploy
*/
func (a *Client) GetV1InstallsInstallIDDeploysLatest(params *GetV1InstallsInstallIDDeploysLatestParams, opts ...ClientOption) (*GetV1InstallsInstallIDDeploysLatestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1InstallsInstallIDDeploysLatestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1InstallsInstallIDDeploysLatest",
		Method:             "GET",
		PathPattern:        "/v1/installs/{install_id}/deploys/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1InstallsInstallIDDeploysLatestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1InstallsInstallIDDeploysLatestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1InstallsInstallIDDeploysLatest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Orgs returns current user s orgs

return current user's orgs
*/
func (a *Client) GetV1Orgs(params *GetV1OrgsParams, opts ...ClientOption) (*GetV1OrgsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1OrgsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Orgs",
		Method:             "GET",
		PathPattern:        "/v1/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1OrgsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1OrgsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Orgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1OrgsCurrent gets an org

get an org
*/
func (a *Client) GetV1OrgsCurrent(params *GetV1OrgsCurrentParams, opts ...ClientOption) (*GetV1OrgsCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1OrgsCurrentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1OrgsCurrent",
		Method:             "GET",
		PathPattern:        "/v1/orgs/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1OrgsCurrentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1OrgsCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1OrgsCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Releases gets all releases for all orgs

get all installs
*/
func (a *Client) GetV1Releases(params *GetV1ReleasesParams, opts ...ClientOption) (*GetV1ReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Releases",
		Method:             "GET",
		PathPattern:        "/v1/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Releases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ReleasesReleaseID gets a release

get a release
*/
func (a *Client) GetV1ReleasesReleaseID(params *GetV1ReleasesReleaseIDParams, opts ...ClientOption) (*GetV1ReleasesReleaseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ReleasesReleaseIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ReleasesReleaseID",
		Method:             "GET",
		PathPattern:        "/v1/releases/{release_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ReleasesReleaseIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ReleasesReleaseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ReleasesReleaseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ReleasesReleaseIDSteps gets a release

get a release
*/
func (a *Client) GetV1ReleasesReleaseIDSteps(params *GetV1ReleasesReleaseIDStepsParams, opts ...ClientOption) (*GetV1ReleasesReleaseIDStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ReleasesReleaseIDStepsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1ReleasesReleaseIDSteps",
		Method:             "GET",
		PathPattern:        "/v1/releases/{release_id}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1ReleasesReleaseIDStepsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ReleasesReleaseIDStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1ReleasesReleaseIDSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Sandboxes gets all sandboxes

get all sandboxes
*/
func (a *Client) GetV1Sandboxes(params *GetV1SandboxesParams, opts ...ClientOption) (*GetV1SandboxesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SandboxesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1Sandboxes",
		Method:             "GET",
		PathPattern:        "/v1/sandboxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SandboxesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SandboxesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1Sandboxes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SandboxesSandboxID gets a sandbox

get a sandbox
*/
func (a *Client) GetV1SandboxesSandboxID(params *GetV1SandboxesSandboxIDParams, opts ...ClientOption) (*GetV1SandboxesSandboxIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SandboxesSandboxIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SandboxesSandboxID",
		Method:             "GET",
		PathPattern:        "/v1/sandboxes/{sandbox_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SandboxesSandboxIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SandboxesSandboxIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SandboxesSandboxID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1SandboxesSandboxIDReleases gets sandbox releases

get sandbox releases
*/
func (a *Client) GetV1SandboxesSandboxIDReleases(params *GetV1SandboxesSandboxIDReleasesParams, opts ...ClientOption) (*GetV1SandboxesSandboxIDReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1SandboxesSandboxIDReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1SandboxesSandboxIDReleases",
		Method:             "GET",
		PathPattern:        "/v1/sandboxes/{sandbox_id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1SandboxesSandboxIDReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1SandboxesSandboxIDReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1SandboxesSandboxIDReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1VcsConnectedRepos gets all vcs connected repos for an org

return all vcs connected repos for an org
*/
func (a *Client) GetV1VcsConnectedRepos(params *GetV1VcsConnectedReposParams, opts ...ClientOption) (*GetV1VcsConnectedReposOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1VcsConnectedReposParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1VcsConnectedRepos",
		Method:             "GET",
		PathPattern:        "/v1/vcs/connected-repos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1VcsConnectedReposReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1VcsConnectedReposOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1VcsConnectedRepos: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1VcsConnections gets vcs connection for an org

get vcs connections
*/
func (a *Client) GetV1VcsConnections(params *GetV1VcsConnectionsParams, opts ...ClientOption) (*GetV1VcsConnectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1VcsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1VcsConnections",
		Method:             "GET",
		PathPattern:        "/v1/vcs/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1VcsConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1VcsConnectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1VcsConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1VcsConnectionsConnectionID returns a vcs connection for an org

get vcs connection
*/
func (a *Client) GetV1VcsConnectionsConnectionID(params *GetV1VcsConnectionsConnectionIDParams, opts ...ClientOption) (*GetV1VcsConnectionsConnectionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1VcsConnectionsConnectionIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1VcsConnectionsConnectionID",
		Method:             "GET",
		PathPattern:        "/v1/vcs/connections/{connection_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1VcsConnectionsConnectionIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1VcsConnectionsConnectionIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1VcsConnectionsConnectionID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1AppsAppID updates an app

update an app
*/
func (a *Client) PatchV1AppsAppID(params *PatchV1AppsAppIDParams, opts ...ClientOption) (*PatchV1AppsAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1AppsAppIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1AppsAppID",
		Method:             "PATCH",
		PathPattern:        "/v1/apps/{app_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1AppsAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1AppsAppIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1AppsAppID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ComponentsComponentID updates a component

update a component
*/
func (a *Client) PatchV1ComponentsComponentID(params *PatchV1ComponentsComponentIDParams, opts ...ClientOption) (*PatchV1ComponentsComponentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ComponentsComponentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1ComponentsComponentID",
		Method:             "PATCH",
		PathPattern:        "/v1/components/{component_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1ComponentsComponentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ComponentsComponentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1ComponentsComponentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1InstallsInstallID updates an install

update an install
*/
func (a *Client) PatchV1InstallsInstallID(params *PatchV1InstallsInstallIDParams, opts ...ClientOption) (*PatchV1InstallsInstallIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1InstallsInstallIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1InstallsInstallID",
		Method:             "PATCH",
		PathPattern:        "/v1/installs/{install_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1InstallsInstallIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1InstallsInstallIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1InstallsInstallID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1OrgsCurrent updates current org

Update current org
*/
func (a *Client) PatchV1OrgsCurrent(params *PatchV1OrgsCurrentParams, opts ...ClientOption) (*PatchV1OrgsCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1OrgsCurrentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1OrgsCurrent",
		Method:             "PATCH",
		PathPattern:        "/v1/orgs/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1OrgsCurrentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1OrgsCurrentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1OrgsCurrent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Apps creates an app

get an app
*/
func (a *Client) PostV1Apps(params *PostV1AppsParams, opts ...ClientOption) (*PostV1AppsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Apps",
		Method:             "POST",
		PathPattern:        "/v1/apps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1AppsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AppsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Apps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AppsAppIDComponents creates an app component

create an app component
*/
func (a *Client) PostV1AppsAppIDComponents(params *PostV1AppsAppIDComponentsParams, opts ...ClientOption) (*PostV1AppsAppIDComponentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AppsAppIDComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AppsAppIDComponents",
		Method:             "POST",
		PathPattern:        "/v1/apps/{app_id}/components/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1AppsAppIDComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AppsAppIDComponentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AppsAppIDComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1AppsAppIDInstalls creates an app install

create an app install
*/
func (a *Client) PostV1AppsAppIDInstalls(params *PostV1AppsAppIDInstallsParams, opts ...ClientOption) (*PostV1AppsAppIDInstallsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1AppsAppIDInstallsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1AppsAppIDInstalls",
		Method:             "POST",
		PathPattern:        "/v1/apps/{app_id}/installs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1AppsAppIDInstallsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1AppsAppIDInstallsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1AppsAppIDInstalls: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDBuilds creates component build

create component build
*/
func (a *Client) PostV1ComponentsComponentIDBuilds(params *PostV1ComponentsComponentIDBuildsParams, opts ...ClientOption) (*PostV1ComponentsComponentIDBuildsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDBuilds",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDBuildsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDConfigsDockerBuild creates a docker build component config

create a docker build component config.
*/
func (a *Client) PostV1ComponentsComponentIDConfigsDockerBuild(params *PostV1ComponentsComponentIDConfigsDockerBuildParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsDockerBuildCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDConfigsDockerBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDConfigsDockerBuild",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/configs/docker-build",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDConfigsDockerBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDConfigsDockerBuildCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDConfigsDockerBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDConfigsExternalImage creates an external image component config

create an external image component config.
*/
func (a *Client) PostV1ComponentsComponentIDConfigsExternalImage(params *PostV1ComponentsComponentIDConfigsExternalImageParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsExternalImageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDConfigsExternalImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDConfigsExternalImage",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/configs/external-image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDConfigsExternalImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDConfigsExternalImageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDConfigsExternalImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDConfigsHelm creates a helm component config

create a helm component config.
*/
func (a *Client) PostV1ComponentsComponentIDConfigsHelm(params *PostV1ComponentsComponentIDConfigsHelmParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsHelmCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDConfigsHelmParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDConfigsHelm",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/configs/helm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDConfigsHelmReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDConfigsHelmCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDConfigsHelm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDConfigsTerraformModule creates a terraform component config

create a terraform component config.
*/
func (a *Client) PostV1ComponentsComponentIDConfigsTerraformModule(params *PostV1ComponentsComponentIDConfigsTerraformModuleParams, opts ...ClientOption) (*PostV1ComponentsComponentIDConfigsTerraformModuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDConfigsTerraformModuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDConfigsTerraformModule",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/configs/terraform-module",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDConfigsTerraformModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDConfigsTerraformModuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDConfigsTerraformModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ComponentsComponentIDReleases creates a release

create a release for a component
*/
func (a *Client) PostV1ComponentsComponentIDReleases(params *PostV1ComponentsComponentIDReleasesParams, opts ...ClientOption) (*PostV1ComponentsComponentIDReleasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ComponentsComponentIDReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1ComponentsComponentIDReleases",
		Method:             "POST",
		PathPattern:        "/v1/components/{component_id}/releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1ComponentsComponentIDReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ComponentsComponentIDReleasesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1ComponentsComponentIDReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1GeneralMetrics publishes a metric from different nuon clients for telemetry purposes

Both the terraform provider and CLI write metrics back home
*/
func (a *Client) PostV1GeneralMetrics(params *PostV1GeneralMetricsParams, opts ...ClientOption) (*PostV1GeneralMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1GeneralMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1GeneralMetrics",
		Method:             "POST",
		PathPattern:        "/v1/general/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1GeneralMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1GeneralMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1GeneralMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1InstallsInstallIDDeploys deploys a build to an install

deploy a build to an install
*/
func (a *Client) PostV1InstallsInstallIDDeploys(params *PostV1InstallsInstallIDDeploysParams, opts ...ClientOption) (*PostV1InstallsInstallIDDeploysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1InstallsInstallIDDeploysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1InstallsInstallIDDeploys",
		Method:             "POST",
		PathPattern:        "/v1/installs/{install_id}/deploys/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1InstallsInstallIDDeploysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1InstallsInstallIDDeploysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1InstallsInstallIDDeploys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Orgs creates a new org

create a new org
*/
func (a *Client) PostV1Orgs(params *PostV1OrgsParams, opts ...ClientOption) (*PostV1OrgsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1OrgsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Orgs",
		Method:             "POST",
		PathPattern:        "/v1/orgs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1OrgsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1OrgsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Orgs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1OrgsCurrentUser adds a user to the current org

add a user to the current org
*/
func (a *Client) PostV1OrgsCurrentUser(params *PostV1OrgsCurrentUserParams, opts ...ClientOption) (*PostV1OrgsCurrentUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1OrgsCurrentUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1OrgsCurrentUser",
		Method:             "POST",
		PathPattern:        "/v1/orgs/current/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1OrgsCurrentUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1OrgsCurrentUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1OrgsCurrentUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1OrgsOrgIDSupportUsers adds nuon users as support members

create a new org
*/
func (a *Client) PostV1OrgsOrgIDSupportUsers(params *PostV1OrgsOrgIDSupportUsersParams, opts ...ClientOption) (*PostV1OrgsOrgIDSupportUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1OrgsOrgIDSupportUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1OrgsOrgIDSupportUsers",
		Method:             "POST",
		PathPattern:        "/v1/orgs/{org_id}/support-users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1OrgsOrgIDSupportUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1OrgsOrgIDSupportUsersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1OrgsOrgIDSupportUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Sandboxes creates a new sandbox

create a new sandbox
*/
func (a *Client) PostV1Sandboxes(params *PostV1SandboxesParams, opts ...ClientOption) (*PostV1SandboxesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SandboxesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1Sandboxes",
		Method:             "POST",
		PathPattern:        "/v1/sandboxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1SandboxesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SandboxesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1Sandboxes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1SandboxesSandboxIDRelease creates a new sandbox

create a new sandbox
*/
func (a *Client) PostV1SandboxesSandboxIDRelease(params *PostV1SandboxesSandboxIDReleaseParams, opts ...ClientOption) (*PostV1SandboxesSandboxIDReleaseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1SandboxesSandboxIDReleaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1SandboxesSandboxIDRelease",
		Method:             "POST",
		PathPattern:        "/v1/sandboxes/{sandbox_id}/release",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1SandboxesSandboxIDReleaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1SandboxesSandboxIDReleaseCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1SandboxesSandboxIDRelease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1VcsConnections creates a vcs connection for github

create a vcs connection
*/
func (a *Client) PostV1VcsConnections(params *PostV1VcsConnectionsParams, opts ...ClientOption) (*PostV1VcsConnectionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1VcsConnectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1VcsConnections",
		Method:             "POST",
		PathPattern:        "/v1/vcs/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1VcsConnectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1VcsConnectionsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1VcsConnections: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutV1AppsAppIDSandbox updates an app sandbox release

update an app sandbox release
*/
func (a *Client) PutV1AppsAppIDSandbox(params *PutV1AppsAppIDSandboxParams, opts ...ClientOption) (*PutV1AppsAppIDSandboxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutV1AppsAppIDSandboxParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutV1AppsAppIDSandbox",
		Method:             "PUT",
		PathPattern:        "/v1/apps/{app_id}/sandbox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutV1AppsAppIDSandboxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutV1AppsAppIDSandboxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutV1AppsAppIDSandbox: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
