// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateInstallConfigReader is a Reader for the UpdateInstallConfig structure.
type UpdateInstallConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstallConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateInstallConfigCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInstallConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInstallConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInstallConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInstallConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInstallConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/installs/{install_id}/configs/{config_id}] UpdateInstallConfig", response, response.Code())
	}
}

// NewUpdateInstallConfigCreated creates a UpdateInstallConfigCreated with default headers values
func NewUpdateInstallConfigCreated() *UpdateInstallConfigCreated {
	return &UpdateInstallConfigCreated{}
}

/*
UpdateInstallConfigCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateInstallConfigCreated struct {
	Payload *models.AppInstallConfig
}

// IsSuccess returns true when this update install config created response has a 2xx status code
func (o *UpdateInstallConfigCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update install config created response has a 3xx status code
func (o *UpdateInstallConfigCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config created response has a 4xx status code
func (o *UpdateInstallConfigCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install config created response has a 5xx status code
func (o *UpdateInstallConfigCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update install config created response a status code equal to that given
func (o *UpdateInstallConfigCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update install config created response
func (o *UpdateInstallConfigCreated) Code() int {
	return 201
}

func (o *UpdateInstallConfigCreated) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigCreated  %+v", 201, o.Payload)
}

func (o *UpdateInstallConfigCreated) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigCreated  %+v", 201, o.Payload)
}

func (o *UpdateInstallConfigCreated) GetPayload() *models.AppInstallConfig {
	return o.Payload
}

func (o *UpdateInstallConfigCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstallConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallConfigBadRequest creates a UpdateInstallConfigBadRequest with default headers values
func NewUpdateInstallConfigBadRequest() *UpdateInstallConfigBadRequest {
	return &UpdateInstallConfigBadRequest{}
}

/*
UpdateInstallConfigBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateInstallConfigBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install config bad request response has a 2xx status code
func (o *UpdateInstallConfigBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install config bad request response has a 3xx status code
func (o *UpdateInstallConfigBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config bad request response has a 4xx status code
func (o *UpdateInstallConfigBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install config bad request response has a 5xx status code
func (o *UpdateInstallConfigBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update install config bad request response a status code equal to that given
func (o *UpdateInstallConfigBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update install config bad request response
func (o *UpdateInstallConfigBadRequest) Code() int {
	return 400
}

func (o *UpdateInstallConfigBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallConfigBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallConfigBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallConfigUnauthorized creates a UpdateInstallConfigUnauthorized with default headers values
func NewUpdateInstallConfigUnauthorized() *UpdateInstallConfigUnauthorized {
	return &UpdateInstallConfigUnauthorized{}
}

/*
UpdateInstallConfigUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateInstallConfigUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install config unauthorized response has a 2xx status code
func (o *UpdateInstallConfigUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install config unauthorized response has a 3xx status code
func (o *UpdateInstallConfigUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config unauthorized response has a 4xx status code
func (o *UpdateInstallConfigUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install config unauthorized response has a 5xx status code
func (o *UpdateInstallConfigUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update install config unauthorized response a status code equal to that given
func (o *UpdateInstallConfigUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update install config unauthorized response
func (o *UpdateInstallConfigUnauthorized) Code() int {
	return 401
}

func (o *UpdateInstallConfigUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallConfigUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallConfigUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallConfigForbidden creates a UpdateInstallConfigForbidden with default headers values
func NewUpdateInstallConfigForbidden() *UpdateInstallConfigForbidden {
	return &UpdateInstallConfigForbidden{}
}

/*
UpdateInstallConfigForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateInstallConfigForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install config forbidden response has a 2xx status code
func (o *UpdateInstallConfigForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install config forbidden response has a 3xx status code
func (o *UpdateInstallConfigForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config forbidden response has a 4xx status code
func (o *UpdateInstallConfigForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install config forbidden response has a 5xx status code
func (o *UpdateInstallConfigForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update install config forbidden response a status code equal to that given
func (o *UpdateInstallConfigForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update install config forbidden response
func (o *UpdateInstallConfigForbidden) Code() int {
	return 403
}

func (o *UpdateInstallConfigForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallConfigForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallConfigForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallConfigNotFound creates a UpdateInstallConfigNotFound with default headers values
func NewUpdateInstallConfigNotFound() *UpdateInstallConfigNotFound {
	return &UpdateInstallConfigNotFound{}
}

/*
UpdateInstallConfigNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateInstallConfigNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install config not found response has a 2xx status code
func (o *UpdateInstallConfigNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install config not found response has a 3xx status code
func (o *UpdateInstallConfigNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config not found response has a 4xx status code
func (o *UpdateInstallConfigNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install config not found response has a 5xx status code
func (o *UpdateInstallConfigNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update install config not found response a status code equal to that given
func (o *UpdateInstallConfigNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update install config not found response
func (o *UpdateInstallConfigNotFound) Code() int {
	return 404
}

func (o *UpdateInstallConfigNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallConfigNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallConfigNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallConfigInternalServerError creates a UpdateInstallConfigInternalServerError with default headers values
func NewUpdateInstallConfigInternalServerError() *UpdateInstallConfigInternalServerError {
	return &UpdateInstallConfigInternalServerError{}
}

/*
UpdateInstallConfigInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateInstallConfigInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install config internal server error response has a 2xx status code
func (o *UpdateInstallConfigInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install config internal server error response has a 3xx status code
func (o *UpdateInstallConfigInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install config internal server error response has a 4xx status code
func (o *UpdateInstallConfigInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install config internal server error response has a 5xx status code
func (o *UpdateInstallConfigInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update install config internal server error response a status code equal to that given
func (o *UpdateInstallConfigInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update install config internal server error response
func (o *UpdateInstallConfigInternalServerError) Code() int {
	return 500
}

func (o *UpdateInstallConfigInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallConfigInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}/configs/{config_id}][%d] updateInstallConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallConfigInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
