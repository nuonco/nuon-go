// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetAllVCSConnectedReposReader is a Reader for the GetAllVCSConnectedRepos structure.
type GetAllVCSConnectedReposReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllVCSConnectedReposReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllVCSConnectedReposOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllVCSConnectedReposBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllVCSConnectedReposUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllVCSConnectedReposForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllVCSConnectedReposNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllVCSConnectedReposInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/vcs/connected-repos] GetAllVCSConnectedRepos", response, response.Code())
	}
}

// NewGetAllVCSConnectedReposOK creates a GetAllVCSConnectedReposOK with default headers values
func NewGetAllVCSConnectedReposOK() *GetAllVCSConnectedReposOK {
	return &GetAllVCSConnectedReposOK{}
}

/*
GetAllVCSConnectedReposOK describes a response with status code 200, with default header values.

OK
*/
type GetAllVCSConnectedReposOK struct {
	Payload []*models.ServiceRepository
}

// IsSuccess returns true when this get all v c s connected repos o k response has a 2xx status code
func (o *GetAllVCSConnectedReposOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all v c s connected repos o k response has a 3xx status code
func (o *GetAllVCSConnectedReposOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos o k response has a 4xx status code
func (o *GetAllVCSConnectedReposOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all v c s connected repos o k response has a 5xx status code
func (o *GetAllVCSConnectedReposOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s connected repos o k response a status code equal to that given
func (o *GetAllVCSConnectedReposOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all v c s connected repos o k response
func (o *GetAllVCSConnectedReposOK) Code() int {
	return 200
}

func (o *GetAllVCSConnectedReposOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposOK %s", 200, payload)
}

func (o *GetAllVCSConnectedReposOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposOK %s", 200, payload)
}

func (o *GetAllVCSConnectedReposOK) GetPayload() []*models.ServiceRepository {
	return o.Payload
}

func (o *GetAllVCSConnectedReposOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSConnectedReposBadRequest creates a GetAllVCSConnectedReposBadRequest with default headers values
func NewGetAllVCSConnectedReposBadRequest() *GetAllVCSConnectedReposBadRequest {
	return &GetAllVCSConnectedReposBadRequest{}
}

/*
GetAllVCSConnectedReposBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllVCSConnectedReposBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get all v c s connected repos bad request response has a 2xx status code
func (o *GetAllVCSConnectedReposBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s connected repos bad request response has a 3xx status code
func (o *GetAllVCSConnectedReposBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos bad request response has a 4xx status code
func (o *GetAllVCSConnectedReposBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s connected repos bad request response has a 5xx status code
func (o *GetAllVCSConnectedReposBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s connected repos bad request response a status code equal to that given
func (o *GetAllVCSConnectedReposBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all v c s connected repos bad request response
func (o *GetAllVCSConnectedReposBadRequest) Code() int {
	return 400
}

func (o *GetAllVCSConnectedReposBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposBadRequest %s", 400, payload)
}

func (o *GetAllVCSConnectedReposBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposBadRequest %s", 400, payload)
}

func (o *GetAllVCSConnectedReposBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAllVCSConnectedReposBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSConnectedReposUnauthorized creates a GetAllVCSConnectedReposUnauthorized with default headers values
func NewGetAllVCSConnectedReposUnauthorized() *GetAllVCSConnectedReposUnauthorized {
	return &GetAllVCSConnectedReposUnauthorized{}
}

/*
GetAllVCSConnectedReposUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllVCSConnectedReposUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get all v c s connected repos unauthorized response has a 2xx status code
func (o *GetAllVCSConnectedReposUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s connected repos unauthorized response has a 3xx status code
func (o *GetAllVCSConnectedReposUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos unauthorized response has a 4xx status code
func (o *GetAllVCSConnectedReposUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s connected repos unauthorized response has a 5xx status code
func (o *GetAllVCSConnectedReposUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s connected repos unauthorized response a status code equal to that given
func (o *GetAllVCSConnectedReposUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all v c s connected repos unauthorized response
func (o *GetAllVCSConnectedReposUnauthorized) Code() int {
	return 401
}

func (o *GetAllVCSConnectedReposUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposUnauthorized %s", 401, payload)
}

func (o *GetAllVCSConnectedReposUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposUnauthorized %s", 401, payload)
}

func (o *GetAllVCSConnectedReposUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAllVCSConnectedReposUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSConnectedReposForbidden creates a GetAllVCSConnectedReposForbidden with default headers values
func NewGetAllVCSConnectedReposForbidden() *GetAllVCSConnectedReposForbidden {
	return &GetAllVCSConnectedReposForbidden{}
}

/*
GetAllVCSConnectedReposForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllVCSConnectedReposForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get all v c s connected repos forbidden response has a 2xx status code
func (o *GetAllVCSConnectedReposForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s connected repos forbidden response has a 3xx status code
func (o *GetAllVCSConnectedReposForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos forbidden response has a 4xx status code
func (o *GetAllVCSConnectedReposForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s connected repos forbidden response has a 5xx status code
func (o *GetAllVCSConnectedReposForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s connected repos forbidden response a status code equal to that given
func (o *GetAllVCSConnectedReposForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all v c s connected repos forbidden response
func (o *GetAllVCSConnectedReposForbidden) Code() int {
	return 403
}

func (o *GetAllVCSConnectedReposForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposForbidden %s", 403, payload)
}

func (o *GetAllVCSConnectedReposForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposForbidden %s", 403, payload)
}

func (o *GetAllVCSConnectedReposForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAllVCSConnectedReposForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSConnectedReposNotFound creates a GetAllVCSConnectedReposNotFound with default headers values
func NewGetAllVCSConnectedReposNotFound() *GetAllVCSConnectedReposNotFound {
	return &GetAllVCSConnectedReposNotFound{}
}

/*
GetAllVCSConnectedReposNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllVCSConnectedReposNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get all v c s connected repos not found response has a 2xx status code
func (o *GetAllVCSConnectedReposNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s connected repos not found response has a 3xx status code
func (o *GetAllVCSConnectedReposNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos not found response has a 4xx status code
func (o *GetAllVCSConnectedReposNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all v c s connected repos not found response has a 5xx status code
func (o *GetAllVCSConnectedReposNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all v c s connected repos not found response a status code equal to that given
func (o *GetAllVCSConnectedReposNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all v c s connected repos not found response
func (o *GetAllVCSConnectedReposNotFound) Code() int {
	return 404
}

func (o *GetAllVCSConnectedReposNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposNotFound %s", 404, payload)
}

func (o *GetAllVCSConnectedReposNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposNotFound %s", 404, payload)
}

func (o *GetAllVCSConnectedReposNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAllVCSConnectedReposNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllVCSConnectedReposInternalServerError creates a GetAllVCSConnectedReposInternalServerError with default headers values
func NewGetAllVCSConnectedReposInternalServerError() *GetAllVCSConnectedReposInternalServerError {
	return &GetAllVCSConnectedReposInternalServerError{}
}

/*
GetAllVCSConnectedReposInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAllVCSConnectedReposInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get all v c s connected repos internal server error response has a 2xx status code
func (o *GetAllVCSConnectedReposInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all v c s connected repos internal server error response has a 3xx status code
func (o *GetAllVCSConnectedReposInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all v c s connected repos internal server error response has a 4xx status code
func (o *GetAllVCSConnectedReposInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all v c s connected repos internal server error response has a 5xx status code
func (o *GetAllVCSConnectedReposInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all v c s connected repos internal server error response a status code equal to that given
func (o *GetAllVCSConnectedReposInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all v c s connected repos internal server error response
func (o *GetAllVCSConnectedReposInternalServerError) Code() int {
	return 500
}

func (o *GetAllVCSConnectedReposInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposInternalServerError %s", 500, payload)
}

func (o *GetAllVCSConnectedReposInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/vcs/connected-repos][%d] getAllVCSConnectedReposInternalServerError %s", 500, payload)
}

func (o *GetAllVCSConnectedReposInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAllVCSConnectedReposInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
