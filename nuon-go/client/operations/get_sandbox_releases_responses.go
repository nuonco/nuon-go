// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetSandboxReleasesReader is a Reader for the GetSandboxReleases structure.
type GetSandboxReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSandboxReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSandboxReleasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSandboxReleasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSandboxReleasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSandboxReleasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSandboxReleasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSandboxReleasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/sandboxes/{sandbox_id}/releases] GetSandboxReleases", response, response.Code())
	}
}

// NewGetSandboxReleasesOK creates a GetSandboxReleasesOK with default headers values
func NewGetSandboxReleasesOK() *GetSandboxReleasesOK {
	return &GetSandboxReleasesOK{}
}

/*
GetSandboxReleasesOK describes a response with status code 200, with default header values.

OK
*/
type GetSandboxReleasesOK struct {
	Payload []*models.AppSandboxRelease
}

// IsSuccess returns true when this get sandbox releases o k response has a 2xx status code
func (o *GetSandboxReleasesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get sandbox releases o k response has a 3xx status code
func (o *GetSandboxReleasesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases o k response has a 4xx status code
func (o *GetSandboxReleasesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sandbox releases o k response has a 5xx status code
func (o *GetSandboxReleasesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get sandbox releases o k response a status code equal to that given
func (o *GetSandboxReleasesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get sandbox releases o k response
func (o *GetSandboxReleasesOK) Code() int {
	return 200
}

func (o *GetSandboxReleasesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesOK %s", 200, payload)
}

func (o *GetSandboxReleasesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesOK %s", 200, payload)
}

func (o *GetSandboxReleasesOK) GetPayload() []*models.AppSandboxRelease {
	return o.Payload
}

func (o *GetSandboxReleasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSandboxReleasesBadRequest creates a GetSandboxReleasesBadRequest with default headers values
func NewGetSandboxReleasesBadRequest() *GetSandboxReleasesBadRequest {
	return &GetSandboxReleasesBadRequest{}
}

/*
GetSandboxReleasesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetSandboxReleasesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get sandbox releases bad request response has a 2xx status code
func (o *GetSandboxReleasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sandbox releases bad request response has a 3xx status code
func (o *GetSandboxReleasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases bad request response has a 4xx status code
func (o *GetSandboxReleasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sandbox releases bad request response has a 5xx status code
func (o *GetSandboxReleasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get sandbox releases bad request response a status code equal to that given
func (o *GetSandboxReleasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get sandbox releases bad request response
func (o *GetSandboxReleasesBadRequest) Code() int {
	return 400
}

func (o *GetSandboxReleasesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesBadRequest %s", 400, payload)
}

func (o *GetSandboxReleasesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesBadRequest %s", 400, payload)
}

func (o *GetSandboxReleasesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetSandboxReleasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSandboxReleasesUnauthorized creates a GetSandboxReleasesUnauthorized with default headers values
func NewGetSandboxReleasesUnauthorized() *GetSandboxReleasesUnauthorized {
	return &GetSandboxReleasesUnauthorized{}
}

/*
GetSandboxReleasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetSandboxReleasesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get sandbox releases unauthorized response has a 2xx status code
func (o *GetSandboxReleasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sandbox releases unauthorized response has a 3xx status code
func (o *GetSandboxReleasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases unauthorized response has a 4xx status code
func (o *GetSandboxReleasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sandbox releases unauthorized response has a 5xx status code
func (o *GetSandboxReleasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get sandbox releases unauthorized response a status code equal to that given
func (o *GetSandboxReleasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get sandbox releases unauthorized response
func (o *GetSandboxReleasesUnauthorized) Code() int {
	return 401
}

func (o *GetSandboxReleasesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesUnauthorized %s", 401, payload)
}

func (o *GetSandboxReleasesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesUnauthorized %s", 401, payload)
}

func (o *GetSandboxReleasesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetSandboxReleasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSandboxReleasesForbidden creates a GetSandboxReleasesForbidden with default headers values
func NewGetSandboxReleasesForbidden() *GetSandboxReleasesForbidden {
	return &GetSandboxReleasesForbidden{}
}

/*
GetSandboxReleasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetSandboxReleasesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get sandbox releases forbidden response has a 2xx status code
func (o *GetSandboxReleasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sandbox releases forbidden response has a 3xx status code
func (o *GetSandboxReleasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases forbidden response has a 4xx status code
func (o *GetSandboxReleasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sandbox releases forbidden response has a 5xx status code
func (o *GetSandboxReleasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get sandbox releases forbidden response a status code equal to that given
func (o *GetSandboxReleasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get sandbox releases forbidden response
func (o *GetSandboxReleasesForbidden) Code() int {
	return 403
}

func (o *GetSandboxReleasesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesForbidden %s", 403, payload)
}

func (o *GetSandboxReleasesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesForbidden %s", 403, payload)
}

func (o *GetSandboxReleasesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetSandboxReleasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSandboxReleasesNotFound creates a GetSandboxReleasesNotFound with default headers values
func NewGetSandboxReleasesNotFound() *GetSandboxReleasesNotFound {
	return &GetSandboxReleasesNotFound{}
}

/*
GetSandboxReleasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetSandboxReleasesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get sandbox releases not found response has a 2xx status code
func (o *GetSandboxReleasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sandbox releases not found response has a 3xx status code
func (o *GetSandboxReleasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases not found response has a 4xx status code
func (o *GetSandboxReleasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get sandbox releases not found response has a 5xx status code
func (o *GetSandboxReleasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get sandbox releases not found response a status code equal to that given
func (o *GetSandboxReleasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get sandbox releases not found response
func (o *GetSandboxReleasesNotFound) Code() int {
	return 404
}

func (o *GetSandboxReleasesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesNotFound %s", 404, payload)
}

func (o *GetSandboxReleasesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesNotFound %s", 404, payload)
}

func (o *GetSandboxReleasesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetSandboxReleasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSandboxReleasesInternalServerError creates a GetSandboxReleasesInternalServerError with default headers values
func NewGetSandboxReleasesInternalServerError() *GetSandboxReleasesInternalServerError {
	return &GetSandboxReleasesInternalServerError{}
}

/*
GetSandboxReleasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetSandboxReleasesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get sandbox releases internal server error response has a 2xx status code
func (o *GetSandboxReleasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get sandbox releases internal server error response has a 3xx status code
func (o *GetSandboxReleasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get sandbox releases internal server error response has a 4xx status code
func (o *GetSandboxReleasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get sandbox releases internal server error response has a 5xx status code
func (o *GetSandboxReleasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get sandbox releases internal server error response a status code equal to that given
func (o *GetSandboxReleasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get sandbox releases internal server error response
func (o *GetSandboxReleasesInternalServerError) Code() int {
	return 500
}

func (o *GetSandboxReleasesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesInternalServerError %s", 500, payload)
}

func (o *GetSandboxReleasesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/sandboxes/{sandbox_id}/releases][%d] getSandboxReleasesInternalServerError %s", 500, payload)
}

func (o *GetSandboxReleasesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetSandboxReleasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
