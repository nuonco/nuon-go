// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// RetryWorkflowReader is a Reader for the RetryWorkflow structure.
type RetryWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRetryWorkflowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetryWorkflowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRetryWorkflowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetryWorkflowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetryWorkflowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetryWorkflowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/installs/{install_id}/retry-workflow] RetryWorkflow", response, response.Code())
	}
}

// NewRetryWorkflowCreated creates a RetryWorkflowCreated with default headers values
func NewRetryWorkflowCreated() *RetryWorkflowCreated {
	return &RetryWorkflowCreated{}
}

/*
RetryWorkflowCreated describes a response with status code 201, with default header values.

Created
*/
type RetryWorkflowCreated struct {
	Payload *models.ServiceRetryWorkflowResponse
}

// IsSuccess returns true when this retry workflow created response has a 2xx status code
func (o *RetryWorkflowCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry workflow created response has a 3xx status code
func (o *RetryWorkflowCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow created response has a 4xx status code
func (o *RetryWorkflowCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry workflow created response has a 5xx status code
func (o *RetryWorkflowCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow created response a status code equal to that given
func (o *RetryWorkflowCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the retry workflow created response
func (o *RetryWorkflowCreated) Code() int {
	return 201
}

func (o *RetryWorkflowCreated) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowCreated  %+v", 201, o.Payload)
}

func (o *RetryWorkflowCreated) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowCreated  %+v", 201, o.Payload)
}

func (o *RetryWorkflowCreated) GetPayload() *models.ServiceRetryWorkflowResponse {
	return o.Payload
}

func (o *RetryWorkflowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceRetryWorkflowResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowBadRequest creates a RetryWorkflowBadRequest with default headers values
func NewRetryWorkflowBadRequest() *RetryWorkflowBadRequest {
	return &RetryWorkflowBadRequest{}
}

/*
RetryWorkflowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type RetryWorkflowBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow bad request response has a 2xx status code
func (o *RetryWorkflowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow bad request response has a 3xx status code
func (o *RetryWorkflowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow bad request response has a 4xx status code
func (o *RetryWorkflowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow bad request response has a 5xx status code
func (o *RetryWorkflowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow bad request response a status code equal to that given
func (o *RetryWorkflowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the retry workflow bad request response
func (o *RetryWorkflowBadRequest) Code() int {
	return 400
}

func (o *RetryWorkflowBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *RetryWorkflowBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowBadRequest  %+v", 400, o.Payload)
}

func (o *RetryWorkflowBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowUnauthorized creates a RetryWorkflowUnauthorized with default headers values
func NewRetryWorkflowUnauthorized() *RetryWorkflowUnauthorized {
	return &RetryWorkflowUnauthorized{}
}

/*
RetryWorkflowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RetryWorkflowUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow unauthorized response has a 2xx status code
func (o *RetryWorkflowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow unauthorized response has a 3xx status code
func (o *RetryWorkflowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow unauthorized response has a 4xx status code
func (o *RetryWorkflowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow unauthorized response has a 5xx status code
func (o *RetryWorkflowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow unauthorized response a status code equal to that given
func (o *RetryWorkflowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the retry workflow unauthorized response
func (o *RetryWorkflowUnauthorized) Code() int {
	return 401
}

func (o *RetryWorkflowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryWorkflowUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowUnauthorized  %+v", 401, o.Payload)
}

func (o *RetryWorkflowUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowForbidden creates a RetryWorkflowForbidden with default headers values
func NewRetryWorkflowForbidden() *RetryWorkflowForbidden {
	return &RetryWorkflowForbidden{}
}

/*
RetryWorkflowForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RetryWorkflowForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow forbidden response has a 2xx status code
func (o *RetryWorkflowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow forbidden response has a 3xx status code
func (o *RetryWorkflowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow forbidden response has a 4xx status code
func (o *RetryWorkflowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow forbidden response has a 5xx status code
func (o *RetryWorkflowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow forbidden response a status code equal to that given
func (o *RetryWorkflowForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retry workflow forbidden response
func (o *RetryWorkflowForbidden) Code() int {
	return 403
}

func (o *RetryWorkflowForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *RetryWorkflowForbidden) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowForbidden  %+v", 403, o.Payload)
}

func (o *RetryWorkflowForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowNotFound creates a RetryWorkflowNotFound with default headers values
func NewRetryWorkflowNotFound() *RetryWorkflowNotFound {
	return &RetryWorkflowNotFound{}
}

/*
RetryWorkflowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type RetryWorkflowNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow not found response has a 2xx status code
func (o *RetryWorkflowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow not found response has a 3xx status code
func (o *RetryWorkflowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow not found response has a 4xx status code
func (o *RetryWorkflowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry workflow not found response has a 5xx status code
func (o *RetryWorkflowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry workflow not found response a status code equal to that given
func (o *RetryWorkflowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry workflow not found response
func (o *RetryWorkflowNotFound) Code() int {
	return 404
}

func (o *RetryWorkflowNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *RetryWorkflowNotFound) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowNotFound  %+v", 404, o.Payload)
}

func (o *RetryWorkflowNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryWorkflowInternalServerError creates a RetryWorkflowInternalServerError with default headers values
func NewRetryWorkflowInternalServerError() *RetryWorkflowInternalServerError {
	return &RetryWorkflowInternalServerError{}
}

/*
RetryWorkflowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type RetryWorkflowInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this retry workflow internal server error response has a 2xx status code
func (o *RetryWorkflowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry workflow internal server error response has a 3xx status code
func (o *RetryWorkflowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry workflow internal server error response has a 4xx status code
func (o *RetryWorkflowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry workflow internal server error response has a 5xx status code
func (o *RetryWorkflowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retry workflow internal server error response a status code equal to that given
func (o *RetryWorkflowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the retry workflow internal server error response
func (o *RetryWorkflowInternalServerError) Code() int {
	return 500
}

func (o *RetryWorkflowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryWorkflowInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/retry-workflow][%d] retryWorkflowInternalServerError  %+v", 500, o.Payload)
}

func (o *RetryWorkflowInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *RetryWorkflowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
