// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// PublishMetricsReader is a Reader for the PublishMetrics structure.
type PublishMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PublishMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPublishMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPublishMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPublishMetricsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPublishMetricsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPublishMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPublishMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/general/metrics] PublishMetrics", response, response.Code())
	}
}

// NewPublishMetricsOK creates a PublishMetricsOK with default headers values
func NewPublishMetricsOK() *PublishMetricsOK {
	return &PublishMetricsOK{}
}

/*
PublishMetricsOK describes a response with status code 200, with default header values.

OK
*/
type PublishMetricsOK struct {
	Payload string
}

// IsSuccess returns true when this publish metrics o k response has a 2xx status code
func (o *PublishMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this publish metrics o k response has a 3xx status code
func (o *PublishMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics o k response has a 4xx status code
func (o *PublishMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this publish metrics o k response has a 5xx status code
func (o *PublishMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this publish metrics o k response a status code equal to that given
func (o *PublishMetricsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the publish metrics o k response
func (o *PublishMetricsOK) Code() int {
	return 200
}

func (o *PublishMetricsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsOK %s", 200, payload)
}

func (o *PublishMetricsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsOK %s", 200, payload)
}

func (o *PublishMetricsOK) GetPayload() string {
	return o.Payload
}

func (o *PublishMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublishMetricsBadRequest creates a PublishMetricsBadRequest with default headers values
func NewPublishMetricsBadRequest() *PublishMetricsBadRequest {
	return &PublishMetricsBadRequest{}
}

/*
PublishMetricsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PublishMetricsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this publish metrics bad request response has a 2xx status code
func (o *PublishMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this publish metrics bad request response has a 3xx status code
func (o *PublishMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics bad request response has a 4xx status code
func (o *PublishMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this publish metrics bad request response has a 5xx status code
func (o *PublishMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this publish metrics bad request response a status code equal to that given
func (o *PublishMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the publish metrics bad request response
func (o *PublishMetricsBadRequest) Code() int {
	return 400
}

func (o *PublishMetricsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsBadRequest %s", 400, payload)
}

func (o *PublishMetricsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsBadRequest %s", 400, payload)
}

func (o *PublishMetricsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PublishMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublishMetricsUnauthorized creates a PublishMetricsUnauthorized with default headers values
func NewPublishMetricsUnauthorized() *PublishMetricsUnauthorized {
	return &PublishMetricsUnauthorized{}
}

/*
PublishMetricsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PublishMetricsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this publish metrics unauthorized response has a 2xx status code
func (o *PublishMetricsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this publish metrics unauthorized response has a 3xx status code
func (o *PublishMetricsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics unauthorized response has a 4xx status code
func (o *PublishMetricsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this publish metrics unauthorized response has a 5xx status code
func (o *PublishMetricsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this publish metrics unauthorized response a status code equal to that given
func (o *PublishMetricsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the publish metrics unauthorized response
func (o *PublishMetricsUnauthorized) Code() int {
	return 401
}

func (o *PublishMetricsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsUnauthorized %s", 401, payload)
}

func (o *PublishMetricsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsUnauthorized %s", 401, payload)
}

func (o *PublishMetricsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PublishMetricsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublishMetricsForbidden creates a PublishMetricsForbidden with default headers values
func NewPublishMetricsForbidden() *PublishMetricsForbidden {
	return &PublishMetricsForbidden{}
}

/*
PublishMetricsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PublishMetricsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this publish metrics forbidden response has a 2xx status code
func (o *PublishMetricsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this publish metrics forbidden response has a 3xx status code
func (o *PublishMetricsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics forbidden response has a 4xx status code
func (o *PublishMetricsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this publish metrics forbidden response has a 5xx status code
func (o *PublishMetricsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this publish metrics forbidden response a status code equal to that given
func (o *PublishMetricsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the publish metrics forbidden response
func (o *PublishMetricsForbidden) Code() int {
	return 403
}

func (o *PublishMetricsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsForbidden %s", 403, payload)
}

func (o *PublishMetricsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsForbidden %s", 403, payload)
}

func (o *PublishMetricsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PublishMetricsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublishMetricsNotFound creates a PublishMetricsNotFound with default headers values
func NewPublishMetricsNotFound() *PublishMetricsNotFound {
	return &PublishMetricsNotFound{}
}

/*
PublishMetricsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PublishMetricsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this publish metrics not found response has a 2xx status code
func (o *PublishMetricsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this publish metrics not found response has a 3xx status code
func (o *PublishMetricsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics not found response has a 4xx status code
func (o *PublishMetricsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this publish metrics not found response has a 5xx status code
func (o *PublishMetricsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this publish metrics not found response a status code equal to that given
func (o *PublishMetricsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the publish metrics not found response
func (o *PublishMetricsNotFound) Code() int {
	return 404
}

func (o *PublishMetricsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsNotFound %s", 404, payload)
}

func (o *PublishMetricsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsNotFound %s", 404, payload)
}

func (o *PublishMetricsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PublishMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPublishMetricsInternalServerError creates a PublishMetricsInternalServerError with default headers values
func NewPublishMetricsInternalServerError() *PublishMetricsInternalServerError {
	return &PublishMetricsInternalServerError{}
}

/*
PublishMetricsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PublishMetricsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this publish metrics internal server error response has a 2xx status code
func (o *PublishMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this publish metrics internal server error response has a 3xx status code
func (o *PublishMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this publish metrics internal server error response has a 4xx status code
func (o *PublishMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this publish metrics internal server error response has a 5xx status code
func (o *PublishMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this publish metrics internal server error response a status code equal to that given
func (o *PublishMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the publish metrics internal server error response
func (o *PublishMetricsInternalServerError) Code() int {
	return 500
}

func (o *PublishMetricsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsInternalServerError %s", 500, payload)
}

func (o *PublishMetricsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/general/metrics][%d] publishMetricsInternalServerError %s", 500, payload)
}

func (o *PublishMetricsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PublishMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
