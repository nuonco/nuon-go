// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetComponentReleasesReader is a Reader for the GetComponentReleases structure.
type GetComponentReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetComponentReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetComponentReleasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetComponentReleasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetComponentReleasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetComponentReleasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetComponentReleasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetComponentReleasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/components/{component_id}/releases] GetComponentReleases", response, response.Code())
	}
}

// NewGetComponentReleasesOK creates a GetComponentReleasesOK with default headers values
func NewGetComponentReleasesOK() *GetComponentReleasesOK {
	return &GetComponentReleasesOK{}
}

/*
GetComponentReleasesOK describes a response with status code 200, with default header values.

OK
*/
type GetComponentReleasesOK struct {
	Payload []*models.AppComponentRelease
}

// IsSuccess returns true when this get component releases o k response has a 2xx status code
func (o *GetComponentReleasesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get component releases o k response has a 3xx status code
func (o *GetComponentReleasesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases o k response has a 4xx status code
func (o *GetComponentReleasesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component releases o k response has a 5xx status code
func (o *GetComponentReleasesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get component releases o k response a status code equal to that given
func (o *GetComponentReleasesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get component releases o k response
func (o *GetComponentReleasesOK) Code() int {
	return 200
}

func (o *GetComponentReleasesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesOK %s", 200, payload)
}

func (o *GetComponentReleasesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesOK %s", 200, payload)
}

func (o *GetComponentReleasesOK) GetPayload() []*models.AppComponentRelease {
	return o.Payload
}

func (o *GetComponentReleasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentReleasesBadRequest creates a GetComponentReleasesBadRequest with default headers values
func NewGetComponentReleasesBadRequest() *GetComponentReleasesBadRequest {
	return &GetComponentReleasesBadRequest{}
}

/*
GetComponentReleasesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetComponentReleasesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component releases bad request response has a 2xx status code
func (o *GetComponentReleasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component releases bad request response has a 3xx status code
func (o *GetComponentReleasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases bad request response has a 4xx status code
func (o *GetComponentReleasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component releases bad request response has a 5xx status code
func (o *GetComponentReleasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get component releases bad request response a status code equal to that given
func (o *GetComponentReleasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get component releases bad request response
func (o *GetComponentReleasesBadRequest) Code() int {
	return 400
}

func (o *GetComponentReleasesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesBadRequest %s", 400, payload)
}

func (o *GetComponentReleasesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesBadRequest %s", 400, payload)
}

func (o *GetComponentReleasesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentReleasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentReleasesUnauthorized creates a GetComponentReleasesUnauthorized with default headers values
func NewGetComponentReleasesUnauthorized() *GetComponentReleasesUnauthorized {
	return &GetComponentReleasesUnauthorized{}
}

/*
GetComponentReleasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetComponentReleasesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component releases unauthorized response has a 2xx status code
func (o *GetComponentReleasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component releases unauthorized response has a 3xx status code
func (o *GetComponentReleasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases unauthorized response has a 4xx status code
func (o *GetComponentReleasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component releases unauthorized response has a 5xx status code
func (o *GetComponentReleasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get component releases unauthorized response a status code equal to that given
func (o *GetComponentReleasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get component releases unauthorized response
func (o *GetComponentReleasesUnauthorized) Code() int {
	return 401
}

func (o *GetComponentReleasesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesUnauthorized %s", 401, payload)
}

func (o *GetComponentReleasesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesUnauthorized %s", 401, payload)
}

func (o *GetComponentReleasesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentReleasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentReleasesForbidden creates a GetComponentReleasesForbidden with default headers values
func NewGetComponentReleasesForbidden() *GetComponentReleasesForbidden {
	return &GetComponentReleasesForbidden{}
}

/*
GetComponentReleasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetComponentReleasesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component releases forbidden response has a 2xx status code
func (o *GetComponentReleasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component releases forbidden response has a 3xx status code
func (o *GetComponentReleasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases forbidden response has a 4xx status code
func (o *GetComponentReleasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component releases forbidden response has a 5xx status code
func (o *GetComponentReleasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get component releases forbidden response a status code equal to that given
func (o *GetComponentReleasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get component releases forbidden response
func (o *GetComponentReleasesForbidden) Code() int {
	return 403
}

func (o *GetComponentReleasesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesForbidden %s", 403, payload)
}

func (o *GetComponentReleasesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesForbidden %s", 403, payload)
}

func (o *GetComponentReleasesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentReleasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentReleasesNotFound creates a GetComponentReleasesNotFound with default headers values
func NewGetComponentReleasesNotFound() *GetComponentReleasesNotFound {
	return &GetComponentReleasesNotFound{}
}

/*
GetComponentReleasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetComponentReleasesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component releases not found response has a 2xx status code
func (o *GetComponentReleasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component releases not found response has a 3xx status code
func (o *GetComponentReleasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases not found response has a 4xx status code
func (o *GetComponentReleasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get component releases not found response has a 5xx status code
func (o *GetComponentReleasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get component releases not found response a status code equal to that given
func (o *GetComponentReleasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get component releases not found response
func (o *GetComponentReleasesNotFound) Code() int {
	return 404
}

func (o *GetComponentReleasesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesNotFound %s", 404, payload)
}

func (o *GetComponentReleasesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesNotFound %s", 404, payload)
}

func (o *GetComponentReleasesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentReleasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetComponentReleasesInternalServerError creates a GetComponentReleasesInternalServerError with default headers values
func NewGetComponentReleasesInternalServerError() *GetComponentReleasesInternalServerError {
	return &GetComponentReleasesInternalServerError{}
}

/*
GetComponentReleasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetComponentReleasesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get component releases internal server error response has a 2xx status code
func (o *GetComponentReleasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get component releases internal server error response has a 3xx status code
func (o *GetComponentReleasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get component releases internal server error response has a 4xx status code
func (o *GetComponentReleasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get component releases internal server error response has a 5xx status code
func (o *GetComponentReleasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get component releases internal server error response a status code equal to that given
func (o *GetComponentReleasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get component releases internal server error response
func (o *GetComponentReleasesInternalServerError) Code() int {
	return 500
}

func (o *GetComponentReleasesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesInternalServerError %s", 500, payload)
}

func (o *GetComponentReleasesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/components/{component_id}/releases][%d] getComponentReleasesInternalServerError %s", 500, payload)
}

func (o *GetComponentReleasesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetComponentReleasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
