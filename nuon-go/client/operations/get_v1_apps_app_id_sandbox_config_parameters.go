// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetV1AppsAppIDSandboxConfigParams creates a new GetV1AppsAppIDSandboxConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1AppsAppIDSandboxConfigParams() *GetV1AppsAppIDSandboxConfigParams {
	return &GetV1AppsAppIDSandboxConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1AppsAppIDSandboxConfigParamsWithTimeout creates a new GetV1AppsAppIDSandboxConfigParams object
// with the ability to set a timeout on a request.
func NewGetV1AppsAppIDSandboxConfigParamsWithTimeout(timeout time.Duration) *GetV1AppsAppIDSandboxConfigParams {
	return &GetV1AppsAppIDSandboxConfigParams{
		timeout: timeout,
	}
}

// NewGetV1AppsAppIDSandboxConfigParamsWithContext creates a new GetV1AppsAppIDSandboxConfigParams object
// with the ability to set a context for a request.
func NewGetV1AppsAppIDSandboxConfigParamsWithContext(ctx context.Context) *GetV1AppsAppIDSandboxConfigParams {
	return &GetV1AppsAppIDSandboxConfigParams{
		Context: ctx,
	}
}

// NewGetV1AppsAppIDSandboxConfigParamsWithHTTPClient creates a new GetV1AppsAppIDSandboxConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1AppsAppIDSandboxConfigParamsWithHTTPClient(client *http.Client) *GetV1AppsAppIDSandboxConfigParams {
	return &GetV1AppsAppIDSandboxConfigParams{
		HTTPClient: client,
	}
}

/*
GetV1AppsAppIDSandboxConfigParams contains all the parameters to send to the API endpoint

	for the get v1 apps app ID sandbox config operation.

	Typically these are written to a http.Request.
*/
type GetV1AppsAppIDSandboxConfigParams struct {

	/* Authorization.

	   bearer auth token
	*/
	Authorization string

	/* XNuonOrgID.

	   org ID
	*/
	XNuonOrgID string

	/* AppID.

	   app ID
	*/
	AppID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 apps app ID sandbox config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1AppsAppIDSandboxConfigParams) WithDefaults() *GetV1AppsAppIDSandboxConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 apps app ID sandbox config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1AppsAppIDSandboxConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithTimeout(timeout time.Duration) *GetV1AppsAppIDSandboxConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithContext(ctx context.Context) *GetV1AppsAppIDSandboxConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithHTTPClient(client *http.Client) *GetV1AppsAppIDSandboxConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithAuthorization(authorization string) *GetV1AppsAppIDSandboxConfigParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithXNuonOrgID adds the xNuonOrgID to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithXNuonOrgID(xNuonOrgID string) *GetV1AppsAppIDSandboxConfigParams {
	o.SetXNuonOrgID(xNuonOrgID)
	return o
}

// SetXNuonOrgID adds the xNuonOrgId to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetXNuonOrgID(xNuonOrgID string) {
	o.XNuonOrgID = xNuonOrgID
}

// WithAppID adds the appID to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) WithAppID(appID string) *GetV1AppsAppIDSandboxConfigParams {
	o.SetAppID(appID)
	return o
}

// SetAppID adds the appId to the get v1 apps app ID sandbox config params
func (o *GetV1AppsAppIDSandboxConfigParams) SetAppID(appID string) {
	o.AppID = appID
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1AppsAppIDSandboxConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// header param X-Nuon-Org-ID
	if err := r.SetHeaderParam("X-Nuon-Org-ID", o.XNuonOrgID); err != nil {
		return err
	}

	// path param app_id
	if err := r.SetPathParam("app_id", o.AppID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
