// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetVCSBranchesReader is a Reader for the GetVCSBranches structure.
type GetVCSBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVCSBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVCSBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVCSBranchesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetVCSBranchesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVCSBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVCSBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVCSBranchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/vcs/branches] GetVCSBranches", response, response.Code())
	}
}

// NewGetVCSBranchesOK creates a GetVCSBranchesOK with default headers values
func NewGetVCSBranchesOK() *GetVCSBranchesOK {
	return &GetVCSBranchesOK{}
}

/*
GetVCSBranchesOK describes a response with status code 200, with default header values.

OK
*/
type GetVCSBranchesOK struct {
	Payload []*models.AppVCSConnectionBranch
}

// IsSuccess returns true when this get v c s branches o k response has a 2xx status code
func (o *GetVCSBranchesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get v c s branches o k response has a 3xx status code
func (o *GetVCSBranchesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches o k response has a 4xx status code
func (o *GetVCSBranchesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v c s branches o k response has a 5xx status code
func (o *GetVCSBranchesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s branches o k response a status code equal to that given
func (o *GetVCSBranchesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get v c s branches o k response
func (o *GetVCSBranchesOK) Code() int {
	return 200
}

func (o *GetVCSBranchesOK) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesOK  %+v", 200, o.Payload)
}

func (o *GetVCSBranchesOK) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesOK  %+v", 200, o.Payload)
}

func (o *GetVCSBranchesOK) GetPayload() []*models.AppVCSConnectionBranch {
	return o.Payload
}

func (o *GetVCSBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSBranchesBadRequest creates a GetVCSBranchesBadRequest with default headers values
func NewGetVCSBranchesBadRequest() *GetVCSBranchesBadRequest {
	return &GetVCSBranchesBadRequest{}
}

/*
GetVCSBranchesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetVCSBranchesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get v c s branches bad request response has a 2xx status code
func (o *GetVCSBranchesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s branches bad request response has a 3xx status code
func (o *GetVCSBranchesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches bad request response has a 4xx status code
func (o *GetVCSBranchesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s branches bad request response has a 5xx status code
func (o *GetVCSBranchesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s branches bad request response a status code equal to that given
func (o *GetVCSBranchesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get v c s branches bad request response
func (o *GetVCSBranchesBadRequest) Code() int {
	return 400
}

func (o *GetVCSBranchesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesBadRequest  %+v", 400, o.Payload)
}

func (o *GetVCSBranchesBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesBadRequest  %+v", 400, o.Payload)
}

func (o *GetVCSBranchesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetVCSBranchesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSBranchesUnauthorized creates a GetVCSBranchesUnauthorized with default headers values
func NewGetVCSBranchesUnauthorized() *GetVCSBranchesUnauthorized {
	return &GetVCSBranchesUnauthorized{}
}

/*
GetVCSBranchesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVCSBranchesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get v c s branches unauthorized response has a 2xx status code
func (o *GetVCSBranchesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s branches unauthorized response has a 3xx status code
func (o *GetVCSBranchesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches unauthorized response has a 4xx status code
func (o *GetVCSBranchesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s branches unauthorized response has a 5xx status code
func (o *GetVCSBranchesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s branches unauthorized response a status code equal to that given
func (o *GetVCSBranchesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get v c s branches unauthorized response
func (o *GetVCSBranchesUnauthorized) Code() int {
	return 401
}

func (o *GetVCSBranchesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVCSBranchesUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVCSBranchesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetVCSBranchesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSBranchesForbidden creates a GetVCSBranchesForbidden with default headers values
func NewGetVCSBranchesForbidden() *GetVCSBranchesForbidden {
	return &GetVCSBranchesForbidden{}
}

/*
GetVCSBranchesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVCSBranchesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get v c s branches forbidden response has a 2xx status code
func (o *GetVCSBranchesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s branches forbidden response has a 3xx status code
func (o *GetVCSBranchesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches forbidden response has a 4xx status code
func (o *GetVCSBranchesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s branches forbidden response has a 5xx status code
func (o *GetVCSBranchesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s branches forbidden response a status code equal to that given
func (o *GetVCSBranchesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get v c s branches forbidden response
func (o *GetVCSBranchesForbidden) Code() int {
	return 403
}

func (o *GetVCSBranchesForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesForbidden  %+v", 403, o.Payload)
}

func (o *GetVCSBranchesForbidden) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesForbidden  %+v", 403, o.Payload)
}

func (o *GetVCSBranchesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetVCSBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSBranchesNotFound creates a GetVCSBranchesNotFound with default headers values
func NewGetVCSBranchesNotFound() *GetVCSBranchesNotFound {
	return &GetVCSBranchesNotFound{}
}

/*
GetVCSBranchesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVCSBranchesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get v c s branches not found response has a 2xx status code
func (o *GetVCSBranchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s branches not found response has a 3xx status code
func (o *GetVCSBranchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches not found response has a 4xx status code
func (o *GetVCSBranchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get v c s branches not found response has a 5xx status code
func (o *GetVCSBranchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get v c s branches not found response a status code equal to that given
func (o *GetVCSBranchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get v c s branches not found response
func (o *GetVCSBranchesNotFound) Code() int {
	return 404
}

func (o *GetVCSBranchesNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesNotFound  %+v", 404, o.Payload)
}

func (o *GetVCSBranchesNotFound) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesNotFound  %+v", 404, o.Payload)
}

func (o *GetVCSBranchesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetVCSBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVCSBranchesInternalServerError creates a GetVCSBranchesInternalServerError with default headers values
func NewGetVCSBranchesInternalServerError() *GetVCSBranchesInternalServerError {
	return &GetVCSBranchesInternalServerError{}
}

/*
GetVCSBranchesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetVCSBranchesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get v c s branches internal server error response has a 2xx status code
func (o *GetVCSBranchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get v c s branches internal server error response has a 3xx status code
func (o *GetVCSBranchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get v c s branches internal server error response has a 4xx status code
func (o *GetVCSBranchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get v c s branches internal server error response has a 5xx status code
func (o *GetVCSBranchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get v c s branches internal server error response a status code equal to that given
func (o *GetVCSBranchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get v c s branches internal server error response
func (o *GetVCSBranchesInternalServerError) Code() int {
	return 500
}

func (o *GetVCSBranchesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVCSBranchesInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/vcs/branches][%d] getVCSBranchesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVCSBranchesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetVCSBranchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
