// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateRunnerSettingsReader is a Reader for the UpdateRunnerSettings structure.
type UpdateRunnerSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRunnerSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRunnerSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRunnerSettingsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRunnerSettingsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRunnerSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRunnerSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRunnerSettingsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/runners/{runner_id}/settings] UpdateRunnerSettings", response, response.Code())
	}
}

// NewUpdateRunnerSettingsOK creates a UpdateRunnerSettingsOK with default headers values
func NewUpdateRunnerSettingsOK() *UpdateRunnerSettingsOK {
	return &UpdateRunnerSettingsOK{}
}

/*
UpdateRunnerSettingsOK describes a response with status code 200, with default header values.

OK
*/
type UpdateRunnerSettingsOK struct {
	Payload *models.AppRunnerJobExecution
}

// IsSuccess returns true when this update runner settings o k response has a 2xx status code
func (o *UpdateRunnerSettingsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update runner settings o k response has a 3xx status code
func (o *UpdateRunnerSettingsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings o k response has a 4xx status code
func (o *UpdateRunnerSettingsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner settings o k response has a 5xx status code
func (o *UpdateRunnerSettingsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner settings o k response a status code equal to that given
func (o *UpdateRunnerSettingsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update runner settings o k response
func (o *UpdateRunnerSettingsOK) Code() int {
	return 200
}

func (o *UpdateRunnerSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateRunnerSettingsOK) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsOK  %+v", 200, o.Payload)
}

func (o *UpdateRunnerSettingsOK) GetPayload() *models.AppRunnerJobExecution {
	return o.Payload
}

func (o *UpdateRunnerSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppRunnerJobExecution)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerSettingsBadRequest creates a UpdateRunnerSettingsBadRequest with default headers values
func NewUpdateRunnerSettingsBadRequest() *UpdateRunnerSettingsBadRequest {
	return &UpdateRunnerSettingsBadRequest{}
}

/*
UpdateRunnerSettingsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRunnerSettingsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner settings bad request response has a 2xx status code
func (o *UpdateRunnerSettingsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner settings bad request response has a 3xx status code
func (o *UpdateRunnerSettingsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings bad request response has a 4xx status code
func (o *UpdateRunnerSettingsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner settings bad request response has a 5xx status code
func (o *UpdateRunnerSettingsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner settings bad request response a status code equal to that given
func (o *UpdateRunnerSettingsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update runner settings bad request response
func (o *UpdateRunnerSettingsBadRequest) Code() int {
	return 400
}

func (o *UpdateRunnerSettingsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRunnerSettingsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRunnerSettingsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerSettingsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerSettingsUnauthorized creates a UpdateRunnerSettingsUnauthorized with default headers values
func NewUpdateRunnerSettingsUnauthorized() *UpdateRunnerSettingsUnauthorized {
	return &UpdateRunnerSettingsUnauthorized{}
}

/*
UpdateRunnerSettingsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRunnerSettingsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner settings unauthorized response has a 2xx status code
func (o *UpdateRunnerSettingsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner settings unauthorized response has a 3xx status code
func (o *UpdateRunnerSettingsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings unauthorized response has a 4xx status code
func (o *UpdateRunnerSettingsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner settings unauthorized response has a 5xx status code
func (o *UpdateRunnerSettingsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner settings unauthorized response a status code equal to that given
func (o *UpdateRunnerSettingsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update runner settings unauthorized response
func (o *UpdateRunnerSettingsUnauthorized) Code() int {
	return 401
}

func (o *UpdateRunnerSettingsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRunnerSettingsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRunnerSettingsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerSettingsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerSettingsForbidden creates a UpdateRunnerSettingsForbidden with default headers values
func NewUpdateRunnerSettingsForbidden() *UpdateRunnerSettingsForbidden {
	return &UpdateRunnerSettingsForbidden{}
}

/*
UpdateRunnerSettingsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRunnerSettingsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner settings forbidden response has a 2xx status code
func (o *UpdateRunnerSettingsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner settings forbidden response has a 3xx status code
func (o *UpdateRunnerSettingsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings forbidden response has a 4xx status code
func (o *UpdateRunnerSettingsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner settings forbidden response has a 5xx status code
func (o *UpdateRunnerSettingsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner settings forbidden response a status code equal to that given
func (o *UpdateRunnerSettingsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update runner settings forbidden response
func (o *UpdateRunnerSettingsForbidden) Code() int {
	return 403
}

func (o *UpdateRunnerSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRunnerSettingsForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateRunnerSettingsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerSettingsNotFound creates a UpdateRunnerSettingsNotFound with default headers values
func NewUpdateRunnerSettingsNotFound() *UpdateRunnerSettingsNotFound {
	return &UpdateRunnerSettingsNotFound{}
}

/*
UpdateRunnerSettingsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRunnerSettingsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner settings not found response has a 2xx status code
func (o *UpdateRunnerSettingsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner settings not found response has a 3xx status code
func (o *UpdateRunnerSettingsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings not found response has a 4xx status code
func (o *UpdateRunnerSettingsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update runner settings not found response has a 5xx status code
func (o *UpdateRunnerSettingsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update runner settings not found response a status code equal to that given
func (o *UpdateRunnerSettingsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update runner settings not found response
func (o *UpdateRunnerSettingsNotFound) Code() int {
	return 404
}

func (o *UpdateRunnerSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRunnerSettingsNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRunnerSettingsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRunnerSettingsInternalServerError creates a UpdateRunnerSettingsInternalServerError with default headers values
func NewUpdateRunnerSettingsInternalServerError() *UpdateRunnerSettingsInternalServerError {
	return &UpdateRunnerSettingsInternalServerError{}
}

/*
UpdateRunnerSettingsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateRunnerSettingsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update runner settings internal server error response has a 2xx status code
func (o *UpdateRunnerSettingsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update runner settings internal server error response has a 3xx status code
func (o *UpdateRunnerSettingsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update runner settings internal server error response has a 4xx status code
func (o *UpdateRunnerSettingsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update runner settings internal server error response has a 5xx status code
func (o *UpdateRunnerSettingsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update runner settings internal server error response a status code equal to that given
func (o *UpdateRunnerSettingsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update runner settings internal server error response
func (o *UpdateRunnerSettingsInternalServerError) Code() int {
	return 500
}

func (o *UpdateRunnerSettingsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRunnerSettingsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/runners/{runner_id}/settings][%d] updateRunnerSettingsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRunnerSettingsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateRunnerSettingsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
