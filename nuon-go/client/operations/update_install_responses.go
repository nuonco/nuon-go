// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateInstallReader is a Reader for the UpdateInstall structure.
type UpdateInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInstallBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInstallUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInstallForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInstallNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/installs/{install_id}] UpdateInstall", response, response.Code())
	}
}

// NewUpdateInstallOK creates a UpdateInstallOK with default headers values
func NewUpdateInstallOK() *UpdateInstallOK {
	return &UpdateInstallOK{}
}

/*
UpdateInstallOK describes a response with status code 200, with default header values.

OK
*/
type UpdateInstallOK struct {
	Payload *models.AppInstall
}

// IsSuccess returns true when this update install o k response has a 2xx status code
func (o *UpdateInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update install o k response has a 3xx status code
func (o *UpdateInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install o k response has a 4xx status code
func (o *UpdateInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install o k response has a 5xx status code
func (o *UpdateInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update install o k response a status code equal to that given
func (o *UpdateInstallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update install o k response
func (o *UpdateInstallOK) Code() int {
	return 200
}

func (o *UpdateInstallOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallOK  %+v", 200, o.Payload)
}

func (o *UpdateInstallOK) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallOK  %+v", 200, o.Payload)
}

func (o *UpdateInstallOK) GetPayload() *models.AppInstall {
	return o.Payload
}

func (o *UpdateInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppInstall)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallBadRequest creates a UpdateInstallBadRequest with default headers values
func NewUpdateInstallBadRequest() *UpdateInstallBadRequest {
	return &UpdateInstallBadRequest{}
}

/*
UpdateInstallBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateInstallBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install bad request response has a 2xx status code
func (o *UpdateInstallBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install bad request response has a 3xx status code
func (o *UpdateInstallBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install bad request response has a 4xx status code
func (o *UpdateInstallBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install bad request response has a 5xx status code
func (o *UpdateInstallBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update install bad request response a status code equal to that given
func (o *UpdateInstallBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update install bad request response
func (o *UpdateInstallBadRequest) Code() int {
	return 400
}

func (o *UpdateInstallBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInstallBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallUnauthorized creates a UpdateInstallUnauthorized with default headers values
func NewUpdateInstallUnauthorized() *UpdateInstallUnauthorized {
	return &UpdateInstallUnauthorized{}
}

/*
UpdateInstallUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateInstallUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install unauthorized response has a 2xx status code
func (o *UpdateInstallUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install unauthorized response has a 3xx status code
func (o *UpdateInstallUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install unauthorized response has a 4xx status code
func (o *UpdateInstallUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install unauthorized response has a 5xx status code
func (o *UpdateInstallUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update install unauthorized response a status code equal to that given
func (o *UpdateInstallUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update install unauthorized response
func (o *UpdateInstallUnauthorized) Code() int {
	return 401
}

func (o *UpdateInstallUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateInstallUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallForbidden creates a UpdateInstallForbidden with default headers values
func NewUpdateInstallForbidden() *UpdateInstallForbidden {
	return &UpdateInstallForbidden{}
}

/*
UpdateInstallForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateInstallForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install forbidden response has a 2xx status code
func (o *UpdateInstallForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install forbidden response has a 3xx status code
func (o *UpdateInstallForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install forbidden response has a 4xx status code
func (o *UpdateInstallForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install forbidden response has a 5xx status code
func (o *UpdateInstallForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update install forbidden response a status code equal to that given
func (o *UpdateInstallForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update install forbidden response
func (o *UpdateInstallForbidden) Code() int {
	return 403
}

func (o *UpdateInstallForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInstallForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallNotFound creates a UpdateInstallNotFound with default headers values
func NewUpdateInstallNotFound() *UpdateInstallNotFound {
	return &UpdateInstallNotFound{}
}

/*
UpdateInstallNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateInstallNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install not found response has a 2xx status code
func (o *UpdateInstallNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install not found response has a 3xx status code
func (o *UpdateInstallNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install not found response has a 4xx status code
func (o *UpdateInstallNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update install not found response has a 5xx status code
func (o *UpdateInstallNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update install not found response a status code equal to that given
func (o *UpdateInstallNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update install not found response
func (o *UpdateInstallNotFound) Code() int {
	return 404
}

func (o *UpdateInstallNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInstallNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstallInternalServerError creates a UpdateInstallInternalServerError with default headers values
func NewUpdateInstallInternalServerError() *UpdateInstallInternalServerError {
	return &UpdateInstallInternalServerError{}
}

/*
UpdateInstallInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateInstallInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update install internal server error response has a 2xx status code
func (o *UpdateInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update install internal server error response has a 3xx status code
func (o *UpdateInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update install internal server error response has a 4xx status code
func (o *UpdateInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update install internal server error response has a 5xx status code
func (o *UpdateInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update install internal server error response a status code equal to that given
func (o *UpdateInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update install internal server error response
func (o *UpdateInstallInternalServerError) Code() int {
	return 500
}

func (o *UpdateInstallInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/installs/{install_id}][%d] updateInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInstallInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
