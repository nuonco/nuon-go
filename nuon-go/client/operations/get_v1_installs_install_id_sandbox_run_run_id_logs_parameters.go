// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetV1InstallsInstallIDSandboxRunRunIDLogsParams creates a new GetV1InstallsInstallIDSandboxRunRunIDLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetV1InstallsInstallIDSandboxRunRunIDLogsParams() *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	return &GetV1InstallsInstallIDSandboxRunRunIDLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithTimeout creates a new GetV1InstallsInstallIDSandboxRunRunIDLogsParams object
// with the ability to set a timeout on a request.
func NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithTimeout(timeout time.Duration) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	return &GetV1InstallsInstallIDSandboxRunRunIDLogsParams{
		timeout: timeout,
	}
}

// NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithContext creates a new GetV1InstallsInstallIDSandboxRunRunIDLogsParams object
// with the ability to set a context for a request.
func NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithContext(ctx context.Context) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	return &GetV1InstallsInstallIDSandboxRunRunIDLogsParams{
		Context: ctx,
	}
}

// NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithHTTPClient creates a new GetV1InstallsInstallIDSandboxRunRunIDLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetV1InstallsInstallIDSandboxRunRunIDLogsParamsWithHTTPClient(client *http.Client) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	return &GetV1InstallsInstallIDSandboxRunRunIDLogsParams{
		HTTPClient: client,
	}
}

/*
GetV1InstallsInstallIDSandboxRunRunIDLogsParams contains all the parameters to send to the API endpoint

	for the get v1 installs install ID sandbox run run ID logs operation.

	Typically these are written to a http.Request.
*/
type GetV1InstallsInstallIDSandboxRunRunIDLogsParams struct {

	/* Authorization.

	   bearer auth token
	*/
	Authorization string

	/* XNuonOrgID.

	   org ID
	*/
	XNuonOrgID string

	/* InstallID.

	   install ID
	*/
	InstallID string

	/* RunID.

	   run ID
	*/
	RunID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get v1 installs install ID sandbox run run ID logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithDefaults() *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get v1 installs install ID sandbox run run ID logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithTimeout(timeout time.Duration) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithContext(ctx context.Context) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithHTTPClient(client *http.Client) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithAuthorization(authorization string) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithXNuonOrgID adds the xNuonOrgID to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithXNuonOrgID(xNuonOrgID string) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetXNuonOrgID(xNuonOrgID)
	return o
}

// SetXNuonOrgID adds the xNuonOrgId to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetXNuonOrgID(xNuonOrgID string) {
	o.XNuonOrgID = xNuonOrgID
}

// WithInstallID adds the installID to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithInstallID(installID string) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetInstallID(installID)
	return o
}

// SetInstallID adds the installId to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetInstallID(installID string) {
	o.InstallID = installID
}

// WithRunID adds the runID to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WithRunID(runID string) *GetV1InstallsInstallIDSandboxRunRunIDLogsParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get v1 installs install ID sandbox run run ID logs params
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) SetRunID(runID string) {
	o.RunID = runID
}

// WriteToRequest writes these params to a swagger request
func (o *GetV1InstallsInstallIDSandboxRunRunIDLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// header param X-Nuon-Org-ID
	if err := r.SetHeaderParam("X-Nuon-Org-ID", o.XNuonOrgID); err != nil {
		return err
	}

	// path param install_id
	if err := r.SetPathParam("install_id", o.InstallID); err != nil {
		return err
	}

	// path param run_id
	if err := r.SetPathParam("run_id", o.RunID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
