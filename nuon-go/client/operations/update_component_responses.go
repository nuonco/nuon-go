// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// UpdateComponentReader is a Reader for the UpdateComponent structure.
type UpdateComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateComponentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /v1/components/{component_id}] UpdateComponent", response, response.Code())
	}
}

// NewUpdateComponentOK creates a UpdateComponentOK with default headers values
func NewUpdateComponentOK() *UpdateComponentOK {
	return &UpdateComponentOK{}
}

/*
UpdateComponentOK describes a response with status code 200, with default header values.

OK
*/
type UpdateComponentOK struct {
	Payload *models.AppComponent
}

// IsSuccess returns true when this update component o k response has a 2xx status code
func (o *UpdateComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update component o k response has a 3xx status code
func (o *UpdateComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component o k response has a 4xx status code
func (o *UpdateComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update component o k response has a 5xx status code
func (o *UpdateComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update component o k response a status code equal to that given
func (o *UpdateComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update component o k response
func (o *UpdateComponentOK) Code() int {
	return 200
}

func (o *UpdateComponentOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentOK  %+v", 200, o.Payload)
}

func (o *UpdateComponentOK) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentOK  %+v", 200, o.Payload)
}

func (o *UpdateComponentOK) GetPayload() *models.AppComponent {
	return o.Payload
}

func (o *UpdateComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentBadRequest creates a UpdateComponentBadRequest with default headers values
func NewUpdateComponentBadRequest() *UpdateComponentBadRequest {
	return &UpdateComponentBadRequest{}
}

/*
UpdateComponentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateComponentBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update component bad request response has a 2xx status code
func (o *UpdateComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component bad request response has a 3xx status code
func (o *UpdateComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component bad request response has a 4xx status code
func (o *UpdateComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component bad request response has a 5xx status code
func (o *UpdateComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update component bad request response a status code equal to that given
func (o *UpdateComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update component bad request response
func (o *UpdateComponentBadRequest) Code() int {
	return 400
}

func (o *UpdateComponentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComponentBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateComponentBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentUnauthorized creates a UpdateComponentUnauthorized with default headers values
func NewUpdateComponentUnauthorized() *UpdateComponentUnauthorized {
	return &UpdateComponentUnauthorized{}
}

/*
UpdateComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateComponentUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update component unauthorized response has a 2xx status code
func (o *UpdateComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component unauthorized response has a 3xx status code
func (o *UpdateComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component unauthorized response has a 4xx status code
func (o *UpdateComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component unauthorized response has a 5xx status code
func (o *UpdateComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update component unauthorized response a status code equal to that given
func (o *UpdateComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update component unauthorized response
func (o *UpdateComponentUnauthorized) Code() int {
	return 401
}

func (o *UpdateComponentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateComponentUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateComponentUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentForbidden creates a UpdateComponentForbidden with default headers values
func NewUpdateComponentForbidden() *UpdateComponentForbidden {
	return &UpdateComponentForbidden{}
}

/*
UpdateComponentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateComponentForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update component forbidden response has a 2xx status code
func (o *UpdateComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component forbidden response has a 3xx status code
func (o *UpdateComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component forbidden response has a 4xx status code
func (o *UpdateComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component forbidden response has a 5xx status code
func (o *UpdateComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update component forbidden response a status code equal to that given
func (o *UpdateComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update component forbidden response
func (o *UpdateComponentForbidden) Code() int {
	return 403
}

func (o *UpdateComponentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComponentForbidden) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateComponentForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentNotFound creates a UpdateComponentNotFound with default headers values
func NewUpdateComponentNotFound() *UpdateComponentNotFound {
	return &UpdateComponentNotFound{}
}

/*
UpdateComponentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateComponentNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update component not found response has a 2xx status code
func (o *UpdateComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component not found response has a 3xx status code
func (o *UpdateComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component not found response has a 4xx status code
func (o *UpdateComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component not found response has a 5xx status code
func (o *UpdateComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update component not found response a status code equal to that given
func (o *UpdateComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update component not found response
func (o *UpdateComponentNotFound) Code() int {
	return 404
}

func (o *UpdateComponentNotFound) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComponentNotFound) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateComponentNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentInternalServerError creates a UpdateComponentInternalServerError with default headers values
func NewUpdateComponentInternalServerError() *UpdateComponentInternalServerError {
	return &UpdateComponentInternalServerError{}
}

/*
UpdateComponentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UpdateComponentInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this update component internal server error response has a 2xx status code
func (o *UpdateComponentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component internal server error response has a 3xx status code
func (o *UpdateComponentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component internal server error response has a 4xx status code
func (o *UpdateComponentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update component internal server error response has a 5xx status code
func (o *UpdateComponentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update component internal server error response a status code equal to that given
func (o *UpdateComponentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update component internal server error response
func (o *UpdateComponentInternalServerError) Code() int {
	return 500
}

func (o *UpdateComponentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComponentInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /v1/components/{component_id}][%d] updateComponentInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateComponentInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *UpdateComponentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
