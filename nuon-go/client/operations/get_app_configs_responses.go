// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetAppConfigsReader is a Reader for the GetAppConfigs structure.
type GetAppConfigsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppConfigsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppConfigsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppConfigsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAppConfigsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppConfigsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppConfigsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAppConfigsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/apps/{app_id}/configs] GetAppConfigs", response, response.Code())
	}
}

// NewGetAppConfigsOK creates a GetAppConfigsOK with default headers values
func NewGetAppConfigsOK() *GetAppConfigsOK {
	return &GetAppConfigsOK{}
}

/*
GetAppConfigsOK describes a response with status code 200, with default header values.

OK
*/
type GetAppConfigsOK struct {
	Payload []*models.AppAppConfig
}

// IsSuccess returns true when this get app configs o k response has a 2xx status code
func (o *GetAppConfigsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get app configs o k response has a 3xx status code
func (o *GetAppConfigsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs o k response has a 4xx status code
func (o *GetAppConfigsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app configs o k response has a 5xx status code
func (o *GetAppConfigsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get app configs o k response a status code equal to that given
func (o *GetAppConfigsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get app configs o k response
func (o *GetAppConfigsOK) Code() int {
	return 200
}

func (o *GetAppConfigsOK) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsOK  %+v", 200, o.Payload)
}

func (o *GetAppConfigsOK) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsOK  %+v", 200, o.Payload)
}

func (o *GetAppConfigsOK) GetPayload() []*models.AppAppConfig {
	return o.Payload
}

func (o *GetAppConfigsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppConfigsBadRequest creates a GetAppConfigsBadRequest with default headers values
func NewGetAppConfigsBadRequest() *GetAppConfigsBadRequest {
	return &GetAppConfigsBadRequest{}
}

/*
GetAppConfigsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAppConfigsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app configs bad request response has a 2xx status code
func (o *GetAppConfigsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app configs bad request response has a 3xx status code
func (o *GetAppConfigsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs bad request response has a 4xx status code
func (o *GetAppConfigsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app configs bad request response has a 5xx status code
func (o *GetAppConfigsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get app configs bad request response a status code equal to that given
func (o *GetAppConfigsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get app configs bad request response
func (o *GetAppConfigsBadRequest) Code() int {
	return 400
}

func (o *GetAppConfigsBadRequest) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppConfigsBadRequest) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppConfigsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppConfigsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppConfigsUnauthorized creates a GetAppConfigsUnauthorized with default headers values
func NewGetAppConfigsUnauthorized() *GetAppConfigsUnauthorized {
	return &GetAppConfigsUnauthorized{}
}

/*
GetAppConfigsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAppConfigsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app configs unauthorized response has a 2xx status code
func (o *GetAppConfigsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app configs unauthorized response has a 3xx status code
func (o *GetAppConfigsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs unauthorized response has a 4xx status code
func (o *GetAppConfigsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app configs unauthorized response has a 5xx status code
func (o *GetAppConfigsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get app configs unauthorized response a status code equal to that given
func (o *GetAppConfigsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get app configs unauthorized response
func (o *GetAppConfigsUnauthorized) Code() int {
	return 401
}

func (o *GetAppConfigsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppConfigsUnauthorized) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAppConfigsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppConfigsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppConfigsForbidden creates a GetAppConfigsForbidden with default headers values
func NewGetAppConfigsForbidden() *GetAppConfigsForbidden {
	return &GetAppConfigsForbidden{}
}

/*
GetAppConfigsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAppConfigsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app configs forbidden response has a 2xx status code
func (o *GetAppConfigsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app configs forbidden response has a 3xx status code
func (o *GetAppConfigsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs forbidden response has a 4xx status code
func (o *GetAppConfigsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app configs forbidden response has a 5xx status code
func (o *GetAppConfigsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get app configs forbidden response a status code equal to that given
func (o *GetAppConfigsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get app configs forbidden response
func (o *GetAppConfigsForbidden) Code() int {
	return 403
}

func (o *GetAppConfigsForbidden) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsForbidden  %+v", 403, o.Payload)
}

func (o *GetAppConfigsForbidden) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsForbidden  %+v", 403, o.Payload)
}

func (o *GetAppConfigsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppConfigsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppConfigsNotFound creates a GetAppConfigsNotFound with default headers values
func NewGetAppConfigsNotFound() *GetAppConfigsNotFound {
	return &GetAppConfigsNotFound{}
}

/*
GetAppConfigsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAppConfigsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app configs not found response has a 2xx status code
func (o *GetAppConfigsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app configs not found response has a 3xx status code
func (o *GetAppConfigsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs not found response has a 4xx status code
func (o *GetAppConfigsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get app configs not found response has a 5xx status code
func (o *GetAppConfigsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get app configs not found response a status code equal to that given
func (o *GetAppConfigsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get app configs not found response
func (o *GetAppConfigsNotFound) Code() int {
	return 404
}

func (o *GetAppConfigsNotFound) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsNotFound  %+v", 404, o.Payload)
}

func (o *GetAppConfigsNotFound) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsNotFound  %+v", 404, o.Payload)
}

func (o *GetAppConfigsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppConfigsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppConfigsInternalServerError creates a GetAppConfigsInternalServerError with default headers values
func NewGetAppConfigsInternalServerError() *GetAppConfigsInternalServerError {
	return &GetAppConfigsInternalServerError{}
}

/*
GetAppConfigsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetAppConfigsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get app configs internal server error response has a 2xx status code
func (o *GetAppConfigsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get app configs internal server error response has a 3xx status code
func (o *GetAppConfigsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get app configs internal server error response has a 4xx status code
func (o *GetAppConfigsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get app configs internal server error response has a 5xx status code
func (o *GetAppConfigsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get app configs internal server error response a status code equal to that given
func (o *GetAppConfigsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get app configs internal server error response
func (o *GetAppConfigsInternalServerError) Code() int {
	return 500
}

func (o *GetAppConfigsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppConfigsInternalServerError) String() string {
	return fmt.Sprintf("[GET /v1/apps/{app_id}/configs][%d] getAppConfigsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppConfigsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetAppConfigsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
