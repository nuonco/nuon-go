// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// SyncSecretsReader is a Reader for the SyncSecrets structure.
type SyncSecretsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncSecretsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewSyncSecretsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSyncSecretsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSyncSecretsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSyncSecretsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSyncSecretsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSyncSecretsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/installs/{install_id}/sync-secrets] SyncSecrets", response, response.Code())
	}
}

// NewSyncSecretsCreated creates a SyncSecretsCreated with default headers values
func NewSyncSecretsCreated() *SyncSecretsCreated {
	return &SyncSecretsCreated{}
}

/*
SyncSecretsCreated describes a response with status code 201, with default header values.

Created
*/
type SyncSecretsCreated struct {
	Payload string
}

// IsSuccess returns true when this sync secrets created response has a 2xx status code
func (o *SyncSecretsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this sync secrets created response has a 3xx status code
func (o *SyncSecretsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets created response has a 4xx status code
func (o *SyncSecretsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync secrets created response has a 5xx status code
func (o *SyncSecretsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this sync secrets created response a status code equal to that given
func (o *SyncSecretsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the sync secrets created response
func (o *SyncSecretsCreated) Code() int {
	return 201
}

func (o *SyncSecretsCreated) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsCreated  %+v", 201, o.Payload)
}

func (o *SyncSecretsCreated) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsCreated  %+v", 201, o.Payload)
}

func (o *SyncSecretsCreated) GetPayload() string {
	return o.Payload
}

func (o *SyncSecretsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSecretsBadRequest creates a SyncSecretsBadRequest with default headers values
func NewSyncSecretsBadRequest() *SyncSecretsBadRequest {
	return &SyncSecretsBadRequest{}
}

/*
SyncSecretsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SyncSecretsBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this sync secrets bad request response has a 2xx status code
func (o *SyncSecretsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync secrets bad request response has a 3xx status code
func (o *SyncSecretsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets bad request response has a 4xx status code
func (o *SyncSecretsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync secrets bad request response has a 5xx status code
func (o *SyncSecretsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this sync secrets bad request response a status code equal to that given
func (o *SyncSecretsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the sync secrets bad request response
func (o *SyncSecretsBadRequest) Code() int {
	return 400
}

func (o *SyncSecretsBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsBadRequest  %+v", 400, o.Payload)
}

func (o *SyncSecretsBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsBadRequest  %+v", 400, o.Payload)
}

func (o *SyncSecretsBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *SyncSecretsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSecretsUnauthorized creates a SyncSecretsUnauthorized with default headers values
func NewSyncSecretsUnauthorized() *SyncSecretsUnauthorized {
	return &SyncSecretsUnauthorized{}
}

/*
SyncSecretsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SyncSecretsUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this sync secrets unauthorized response has a 2xx status code
func (o *SyncSecretsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync secrets unauthorized response has a 3xx status code
func (o *SyncSecretsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets unauthorized response has a 4xx status code
func (o *SyncSecretsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync secrets unauthorized response has a 5xx status code
func (o *SyncSecretsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this sync secrets unauthorized response a status code equal to that given
func (o *SyncSecretsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the sync secrets unauthorized response
func (o *SyncSecretsUnauthorized) Code() int {
	return 401
}

func (o *SyncSecretsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsUnauthorized  %+v", 401, o.Payload)
}

func (o *SyncSecretsUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsUnauthorized  %+v", 401, o.Payload)
}

func (o *SyncSecretsUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *SyncSecretsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSecretsForbidden creates a SyncSecretsForbidden with default headers values
func NewSyncSecretsForbidden() *SyncSecretsForbidden {
	return &SyncSecretsForbidden{}
}

/*
SyncSecretsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SyncSecretsForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this sync secrets forbidden response has a 2xx status code
func (o *SyncSecretsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync secrets forbidden response has a 3xx status code
func (o *SyncSecretsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets forbidden response has a 4xx status code
func (o *SyncSecretsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync secrets forbidden response has a 5xx status code
func (o *SyncSecretsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this sync secrets forbidden response a status code equal to that given
func (o *SyncSecretsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the sync secrets forbidden response
func (o *SyncSecretsForbidden) Code() int {
	return 403
}

func (o *SyncSecretsForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsForbidden  %+v", 403, o.Payload)
}

func (o *SyncSecretsForbidden) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsForbidden  %+v", 403, o.Payload)
}

func (o *SyncSecretsForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *SyncSecretsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSecretsNotFound creates a SyncSecretsNotFound with default headers values
func NewSyncSecretsNotFound() *SyncSecretsNotFound {
	return &SyncSecretsNotFound{}
}

/*
SyncSecretsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SyncSecretsNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this sync secrets not found response has a 2xx status code
func (o *SyncSecretsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync secrets not found response has a 3xx status code
func (o *SyncSecretsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets not found response has a 4xx status code
func (o *SyncSecretsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this sync secrets not found response has a 5xx status code
func (o *SyncSecretsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this sync secrets not found response a status code equal to that given
func (o *SyncSecretsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the sync secrets not found response
func (o *SyncSecretsNotFound) Code() int {
	return 404
}

func (o *SyncSecretsNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsNotFound  %+v", 404, o.Payload)
}

func (o *SyncSecretsNotFound) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsNotFound  %+v", 404, o.Payload)
}

func (o *SyncSecretsNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *SyncSecretsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncSecretsInternalServerError creates a SyncSecretsInternalServerError with default headers values
func NewSyncSecretsInternalServerError() *SyncSecretsInternalServerError {
	return &SyncSecretsInternalServerError{}
}

/*
SyncSecretsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type SyncSecretsInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this sync secrets internal server error response has a 2xx status code
func (o *SyncSecretsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this sync secrets internal server error response has a 3xx status code
func (o *SyncSecretsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this sync secrets internal server error response has a 4xx status code
func (o *SyncSecretsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this sync secrets internal server error response has a 5xx status code
func (o *SyncSecretsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this sync secrets internal server error response a status code equal to that given
func (o *SyncSecretsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the sync secrets internal server error response
func (o *SyncSecretsInternalServerError) Code() int {
	return 500
}

func (o *SyncSecretsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsInternalServerError  %+v", 500, o.Payload)
}

func (o *SyncSecretsInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/installs/{install_id}/sync-secrets][%d] syncSecretsInternalServerError  %+v", 500, o.Payload)
}

func (o *SyncSecretsInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *SyncSecretsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
