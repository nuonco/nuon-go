// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// GetInstallDeployPlanReader is a Reader for the GetInstallDeployPlan structure.
type GetInstallDeployPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstallDeployPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInstallDeployPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInstallDeployPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInstallDeployPlanUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInstallDeployPlanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInstallDeployPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInstallDeployPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan] GetInstallDeployPlan", response, response.Code())
	}
}

// NewGetInstallDeployPlanOK creates a GetInstallDeployPlanOK with default headers values
func NewGetInstallDeployPlanOK() *GetInstallDeployPlanOK {
	return &GetInstallDeployPlanOK{}
}

/*
GetInstallDeployPlanOK describes a response with status code 200, with default header values.

OK
*/
type GetInstallDeployPlanOK struct {
	Payload *models.Planv1Plan
}

// IsSuccess returns true when this get install deploy plan o k response has a 2xx status code
func (o *GetInstallDeployPlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get install deploy plan o k response has a 3xx status code
func (o *GetInstallDeployPlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan o k response has a 4xx status code
func (o *GetInstallDeployPlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get install deploy plan o k response has a 5xx status code
func (o *GetInstallDeployPlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get install deploy plan o k response a status code equal to that given
func (o *GetInstallDeployPlanOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get install deploy plan o k response
func (o *GetInstallDeployPlanOK) Code() int {
	return 200
}

func (o *GetInstallDeployPlanOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanOK %s", 200, payload)
}

func (o *GetInstallDeployPlanOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanOK %s", 200, payload)
}

func (o *GetInstallDeployPlanOK) GetPayload() *models.Planv1Plan {
	return o.Payload
}

func (o *GetInstallDeployPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Planv1Plan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallDeployPlanBadRequest creates a GetInstallDeployPlanBadRequest with default headers values
func NewGetInstallDeployPlanBadRequest() *GetInstallDeployPlanBadRequest {
	return &GetInstallDeployPlanBadRequest{}
}

/*
GetInstallDeployPlanBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetInstallDeployPlanBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install deploy plan bad request response has a 2xx status code
func (o *GetInstallDeployPlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install deploy plan bad request response has a 3xx status code
func (o *GetInstallDeployPlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan bad request response has a 4xx status code
func (o *GetInstallDeployPlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install deploy plan bad request response has a 5xx status code
func (o *GetInstallDeployPlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get install deploy plan bad request response a status code equal to that given
func (o *GetInstallDeployPlanBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get install deploy plan bad request response
func (o *GetInstallDeployPlanBadRequest) Code() int {
	return 400
}

func (o *GetInstallDeployPlanBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanBadRequest %s", 400, payload)
}

func (o *GetInstallDeployPlanBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanBadRequest %s", 400, payload)
}

func (o *GetInstallDeployPlanBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallDeployPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallDeployPlanUnauthorized creates a GetInstallDeployPlanUnauthorized with default headers values
func NewGetInstallDeployPlanUnauthorized() *GetInstallDeployPlanUnauthorized {
	return &GetInstallDeployPlanUnauthorized{}
}

/*
GetInstallDeployPlanUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInstallDeployPlanUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install deploy plan unauthorized response has a 2xx status code
func (o *GetInstallDeployPlanUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install deploy plan unauthorized response has a 3xx status code
func (o *GetInstallDeployPlanUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan unauthorized response has a 4xx status code
func (o *GetInstallDeployPlanUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install deploy plan unauthorized response has a 5xx status code
func (o *GetInstallDeployPlanUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get install deploy plan unauthorized response a status code equal to that given
func (o *GetInstallDeployPlanUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get install deploy plan unauthorized response
func (o *GetInstallDeployPlanUnauthorized) Code() int {
	return 401
}

func (o *GetInstallDeployPlanUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanUnauthorized %s", 401, payload)
}

func (o *GetInstallDeployPlanUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanUnauthorized %s", 401, payload)
}

func (o *GetInstallDeployPlanUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallDeployPlanUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallDeployPlanForbidden creates a GetInstallDeployPlanForbidden with default headers values
func NewGetInstallDeployPlanForbidden() *GetInstallDeployPlanForbidden {
	return &GetInstallDeployPlanForbidden{}
}

/*
GetInstallDeployPlanForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInstallDeployPlanForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install deploy plan forbidden response has a 2xx status code
func (o *GetInstallDeployPlanForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install deploy plan forbidden response has a 3xx status code
func (o *GetInstallDeployPlanForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan forbidden response has a 4xx status code
func (o *GetInstallDeployPlanForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install deploy plan forbidden response has a 5xx status code
func (o *GetInstallDeployPlanForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get install deploy plan forbidden response a status code equal to that given
func (o *GetInstallDeployPlanForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get install deploy plan forbidden response
func (o *GetInstallDeployPlanForbidden) Code() int {
	return 403
}

func (o *GetInstallDeployPlanForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanForbidden %s", 403, payload)
}

func (o *GetInstallDeployPlanForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanForbidden %s", 403, payload)
}

func (o *GetInstallDeployPlanForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallDeployPlanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallDeployPlanNotFound creates a GetInstallDeployPlanNotFound with default headers values
func NewGetInstallDeployPlanNotFound() *GetInstallDeployPlanNotFound {
	return &GetInstallDeployPlanNotFound{}
}

/*
GetInstallDeployPlanNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetInstallDeployPlanNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install deploy plan not found response has a 2xx status code
func (o *GetInstallDeployPlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install deploy plan not found response has a 3xx status code
func (o *GetInstallDeployPlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan not found response has a 4xx status code
func (o *GetInstallDeployPlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get install deploy plan not found response has a 5xx status code
func (o *GetInstallDeployPlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get install deploy plan not found response a status code equal to that given
func (o *GetInstallDeployPlanNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get install deploy plan not found response
func (o *GetInstallDeployPlanNotFound) Code() int {
	return 404
}

func (o *GetInstallDeployPlanNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanNotFound %s", 404, payload)
}

func (o *GetInstallDeployPlanNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanNotFound %s", 404, payload)
}

func (o *GetInstallDeployPlanNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallDeployPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstallDeployPlanInternalServerError creates a GetInstallDeployPlanInternalServerError with default headers values
func NewGetInstallDeployPlanInternalServerError() *GetInstallDeployPlanInternalServerError {
	return &GetInstallDeployPlanInternalServerError{}
}

/*
GetInstallDeployPlanInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetInstallDeployPlanInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this get install deploy plan internal server error response has a 2xx status code
func (o *GetInstallDeployPlanInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get install deploy plan internal server error response has a 3xx status code
func (o *GetInstallDeployPlanInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get install deploy plan internal server error response has a 4xx status code
func (o *GetInstallDeployPlanInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get install deploy plan internal server error response has a 5xx status code
func (o *GetInstallDeployPlanInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get install deploy plan internal server error response a status code equal to that given
func (o *GetInstallDeployPlanInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get install deploy plan internal server error response
func (o *GetInstallDeployPlanInternalServerError) Code() int {
	return 500
}

func (o *GetInstallDeployPlanInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanInternalServerError %s", 500, payload)
}

func (o *GetInstallDeployPlanInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/installs/{install_id}/deploys/{deploy_id}/plan][%d] getInstallDeployPlanInternalServerError %s", 500, payload)
}

func (o *GetInstallDeployPlanInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *GetInstallDeployPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
