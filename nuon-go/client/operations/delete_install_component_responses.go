// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// DeleteInstallComponentReader is a Reader for the DeleteInstallComponent structure.
type DeleteInstallComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstallComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteInstallComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteInstallComponentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteInstallComponentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteInstallComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInstallComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInstallComponentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/installs/{install_id}/components/{component_id}] DeleteInstallComponent", response, response.Code())
	}
}

// NewDeleteInstallComponentOK creates a DeleteInstallComponentOK with default headers values
func NewDeleteInstallComponentOK() *DeleteInstallComponentOK {
	return &DeleteInstallComponentOK{}
}

/*
DeleteInstallComponentOK describes a response with status code 200, with default header values.

OK
*/
type DeleteInstallComponentOK struct {
	Payload bool
}

// IsSuccess returns true when this delete install component o k response has a 2xx status code
func (o *DeleteInstallComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete install component o k response has a 3xx status code
func (o *DeleteInstallComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component o k response has a 4xx status code
func (o *DeleteInstallComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete install component o k response has a 5xx status code
func (o *DeleteInstallComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete install component o k response a status code equal to that given
func (o *DeleteInstallComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete install component o k response
func (o *DeleteInstallComponentOK) Code() int {
	return 200
}

func (o *DeleteInstallComponentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentOK %s", 200, payload)
}

func (o *DeleteInstallComponentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentOK %s", 200, payload)
}

func (o *DeleteInstallComponentOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteInstallComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstallComponentBadRequest creates a DeleteInstallComponentBadRequest with default headers values
func NewDeleteInstallComponentBadRequest() *DeleteInstallComponentBadRequest {
	return &DeleteInstallComponentBadRequest{}
}

/*
DeleteInstallComponentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteInstallComponentBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete install component bad request response has a 2xx status code
func (o *DeleteInstallComponentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete install component bad request response has a 3xx status code
func (o *DeleteInstallComponentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component bad request response has a 4xx status code
func (o *DeleteInstallComponentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete install component bad request response has a 5xx status code
func (o *DeleteInstallComponentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete install component bad request response a status code equal to that given
func (o *DeleteInstallComponentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete install component bad request response
func (o *DeleteInstallComponentBadRequest) Code() int {
	return 400
}

func (o *DeleteInstallComponentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentBadRequest %s", 400, payload)
}

func (o *DeleteInstallComponentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentBadRequest %s", 400, payload)
}

func (o *DeleteInstallComponentBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteInstallComponentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstallComponentUnauthorized creates a DeleteInstallComponentUnauthorized with default headers values
func NewDeleteInstallComponentUnauthorized() *DeleteInstallComponentUnauthorized {
	return &DeleteInstallComponentUnauthorized{}
}

/*
DeleteInstallComponentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteInstallComponentUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete install component unauthorized response has a 2xx status code
func (o *DeleteInstallComponentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete install component unauthorized response has a 3xx status code
func (o *DeleteInstallComponentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component unauthorized response has a 4xx status code
func (o *DeleteInstallComponentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete install component unauthorized response has a 5xx status code
func (o *DeleteInstallComponentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete install component unauthorized response a status code equal to that given
func (o *DeleteInstallComponentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete install component unauthorized response
func (o *DeleteInstallComponentUnauthorized) Code() int {
	return 401
}

func (o *DeleteInstallComponentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentUnauthorized %s", 401, payload)
}

func (o *DeleteInstallComponentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentUnauthorized %s", 401, payload)
}

func (o *DeleteInstallComponentUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteInstallComponentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstallComponentForbidden creates a DeleteInstallComponentForbidden with default headers values
func NewDeleteInstallComponentForbidden() *DeleteInstallComponentForbidden {
	return &DeleteInstallComponentForbidden{}
}

/*
DeleteInstallComponentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteInstallComponentForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete install component forbidden response has a 2xx status code
func (o *DeleteInstallComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete install component forbidden response has a 3xx status code
func (o *DeleteInstallComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component forbidden response has a 4xx status code
func (o *DeleteInstallComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete install component forbidden response has a 5xx status code
func (o *DeleteInstallComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete install component forbidden response a status code equal to that given
func (o *DeleteInstallComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete install component forbidden response
func (o *DeleteInstallComponentForbidden) Code() int {
	return 403
}

func (o *DeleteInstallComponentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentForbidden %s", 403, payload)
}

func (o *DeleteInstallComponentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentForbidden %s", 403, payload)
}

func (o *DeleteInstallComponentForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteInstallComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstallComponentNotFound creates a DeleteInstallComponentNotFound with default headers values
func NewDeleteInstallComponentNotFound() *DeleteInstallComponentNotFound {
	return &DeleteInstallComponentNotFound{}
}

/*
DeleteInstallComponentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteInstallComponentNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete install component not found response has a 2xx status code
func (o *DeleteInstallComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete install component not found response has a 3xx status code
func (o *DeleteInstallComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component not found response has a 4xx status code
func (o *DeleteInstallComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete install component not found response has a 5xx status code
func (o *DeleteInstallComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete install component not found response a status code equal to that given
func (o *DeleteInstallComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete install component not found response
func (o *DeleteInstallComponentNotFound) Code() int {
	return 404
}

func (o *DeleteInstallComponentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentNotFound %s", 404, payload)
}

func (o *DeleteInstallComponentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentNotFound %s", 404, payload)
}

func (o *DeleteInstallComponentNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteInstallComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstallComponentInternalServerError creates a DeleteInstallComponentInternalServerError with default headers values
func NewDeleteInstallComponentInternalServerError() *DeleteInstallComponentInternalServerError {
	return &DeleteInstallComponentInternalServerError{}
}

/*
DeleteInstallComponentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteInstallComponentInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete install component internal server error response has a 2xx status code
func (o *DeleteInstallComponentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete install component internal server error response has a 3xx status code
func (o *DeleteInstallComponentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete install component internal server error response has a 4xx status code
func (o *DeleteInstallComponentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete install component internal server error response has a 5xx status code
func (o *DeleteInstallComponentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete install component internal server error response a status code equal to that given
func (o *DeleteInstallComponentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete install component internal server error response
func (o *DeleteInstallComponentInternalServerError) Code() int {
	return 500
}

func (o *DeleteInstallComponentInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentInternalServerError %s", 500, payload)
}

func (o *DeleteInstallComponentInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/installs/{install_id}/components/{component_id}][%d] deleteInstallComponentInternalServerError %s", 500, payload)
}

func (o *DeleteInstallComponentInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteInstallComponentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
