// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// DeleteV1OrgsCurrentReader is a Reader for the DeleteV1OrgsCurrent structure.
type DeleteV1OrgsCurrentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteV1OrgsCurrentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteV1OrgsCurrentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteV1OrgsCurrentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteV1OrgsCurrentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteV1OrgsCurrentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteV1OrgsCurrentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteV1OrgsCurrentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/orgs/current] DeleteV1OrgsCurrent", response, response.Code())
	}
}

// NewDeleteV1OrgsCurrentOK creates a DeleteV1OrgsCurrentOK with default headers values
func NewDeleteV1OrgsCurrentOK() *DeleteV1OrgsCurrentOK {
	return &DeleteV1OrgsCurrentOK{}
}

/*
DeleteV1OrgsCurrentOK describes a response with status code 200, with default header values.

OK
*/
type DeleteV1OrgsCurrentOK struct {
	Payload bool
}

// IsSuccess returns true when this delete v1 orgs current o k response has a 2xx status code
func (o *DeleteV1OrgsCurrentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete v1 orgs current o k response has a 3xx status code
func (o *DeleteV1OrgsCurrentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current o k response has a 4xx status code
func (o *DeleteV1OrgsCurrentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v1 orgs current o k response has a 5xx status code
func (o *DeleteV1OrgsCurrentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 orgs current o k response a status code equal to that given
func (o *DeleteV1OrgsCurrentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete v1 orgs current o k response
func (o *DeleteV1OrgsCurrentOK) Code() int {
	return 200
}

func (o *DeleteV1OrgsCurrentOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentOK  %+v", 200, o.Payload)
}

func (o *DeleteV1OrgsCurrentOK) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentOK  %+v", 200, o.Payload)
}

func (o *DeleteV1OrgsCurrentOK) GetPayload() bool {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteV1OrgsCurrentBadRequest creates a DeleteV1OrgsCurrentBadRequest with default headers values
func NewDeleteV1OrgsCurrentBadRequest() *DeleteV1OrgsCurrentBadRequest {
	return &DeleteV1OrgsCurrentBadRequest{}
}

/*
DeleteV1OrgsCurrentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DeleteV1OrgsCurrentBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v1 orgs current bad request response has a 2xx status code
func (o *DeleteV1OrgsCurrentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 orgs current bad request response has a 3xx status code
func (o *DeleteV1OrgsCurrentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current bad request response has a 4xx status code
func (o *DeleteV1OrgsCurrentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v1 orgs current bad request response has a 5xx status code
func (o *DeleteV1OrgsCurrentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 orgs current bad request response a status code equal to that given
func (o *DeleteV1OrgsCurrentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete v1 orgs current bad request response
func (o *DeleteV1OrgsCurrentBadRequest) Code() int {
	return 400
}

func (o *DeleteV1OrgsCurrentBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteV1OrgsCurrentBadRequest) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteV1OrgsCurrentBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteV1OrgsCurrentUnauthorized creates a DeleteV1OrgsCurrentUnauthorized with default headers values
func NewDeleteV1OrgsCurrentUnauthorized() *DeleteV1OrgsCurrentUnauthorized {
	return &DeleteV1OrgsCurrentUnauthorized{}
}

/*
DeleteV1OrgsCurrentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteV1OrgsCurrentUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v1 orgs current unauthorized response has a 2xx status code
func (o *DeleteV1OrgsCurrentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 orgs current unauthorized response has a 3xx status code
func (o *DeleteV1OrgsCurrentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current unauthorized response has a 4xx status code
func (o *DeleteV1OrgsCurrentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v1 orgs current unauthorized response has a 5xx status code
func (o *DeleteV1OrgsCurrentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 orgs current unauthorized response a status code equal to that given
func (o *DeleteV1OrgsCurrentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete v1 orgs current unauthorized response
func (o *DeleteV1OrgsCurrentUnauthorized) Code() int {
	return 401
}

func (o *DeleteV1OrgsCurrentUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteV1OrgsCurrentUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteV1OrgsCurrentUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteV1OrgsCurrentForbidden creates a DeleteV1OrgsCurrentForbidden with default headers values
func NewDeleteV1OrgsCurrentForbidden() *DeleteV1OrgsCurrentForbidden {
	return &DeleteV1OrgsCurrentForbidden{}
}

/*
DeleteV1OrgsCurrentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteV1OrgsCurrentForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v1 orgs current forbidden response has a 2xx status code
func (o *DeleteV1OrgsCurrentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 orgs current forbidden response has a 3xx status code
func (o *DeleteV1OrgsCurrentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current forbidden response has a 4xx status code
func (o *DeleteV1OrgsCurrentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v1 orgs current forbidden response has a 5xx status code
func (o *DeleteV1OrgsCurrentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 orgs current forbidden response a status code equal to that given
func (o *DeleteV1OrgsCurrentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete v1 orgs current forbidden response
func (o *DeleteV1OrgsCurrentForbidden) Code() int {
	return 403
}

func (o *DeleteV1OrgsCurrentForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentForbidden  %+v", 403, o.Payload)
}

func (o *DeleteV1OrgsCurrentForbidden) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentForbidden  %+v", 403, o.Payload)
}

func (o *DeleteV1OrgsCurrentForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteV1OrgsCurrentNotFound creates a DeleteV1OrgsCurrentNotFound with default headers values
func NewDeleteV1OrgsCurrentNotFound() *DeleteV1OrgsCurrentNotFound {
	return &DeleteV1OrgsCurrentNotFound{}
}

/*
DeleteV1OrgsCurrentNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DeleteV1OrgsCurrentNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v1 orgs current not found response has a 2xx status code
func (o *DeleteV1OrgsCurrentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 orgs current not found response has a 3xx status code
func (o *DeleteV1OrgsCurrentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current not found response has a 4xx status code
func (o *DeleteV1OrgsCurrentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete v1 orgs current not found response has a 5xx status code
func (o *DeleteV1OrgsCurrentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete v1 orgs current not found response a status code equal to that given
func (o *DeleteV1OrgsCurrentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete v1 orgs current not found response
func (o *DeleteV1OrgsCurrentNotFound) Code() int {
	return 404
}

func (o *DeleteV1OrgsCurrentNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentNotFound  %+v", 404, o.Payload)
}

func (o *DeleteV1OrgsCurrentNotFound) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentNotFound  %+v", 404, o.Payload)
}

func (o *DeleteV1OrgsCurrentNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteV1OrgsCurrentInternalServerError creates a DeleteV1OrgsCurrentInternalServerError with default headers values
func NewDeleteV1OrgsCurrentInternalServerError() *DeleteV1OrgsCurrentInternalServerError {
	return &DeleteV1OrgsCurrentInternalServerError{}
}

/*
DeleteV1OrgsCurrentInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type DeleteV1OrgsCurrentInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this delete v1 orgs current internal server error response has a 2xx status code
func (o *DeleteV1OrgsCurrentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete v1 orgs current internal server error response has a 3xx status code
func (o *DeleteV1OrgsCurrentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete v1 orgs current internal server error response has a 4xx status code
func (o *DeleteV1OrgsCurrentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete v1 orgs current internal server error response has a 5xx status code
func (o *DeleteV1OrgsCurrentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete v1 orgs current internal server error response a status code equal to that given
func (o *DeleteV1OrgsCurrentInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete v1 orgs current internal server error response
func (o *DeleteV1OrgsCurrentInternalServerError) Code() int {
	return 500
}

func (o *DeleteV1OrgsCurrentInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteV1OrgsCurrentInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /v1/orgs/current][%d] deleteV1OrgsCurrentInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteV1OrgsCurrentInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *DeleteV1OrgsCurrentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
