// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetComponentReleasesParams creates a new GetComponentReleasesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetComponentReleasesParams() *GetComponentReleasesParams {
	return &GetComponentReleasesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetComponentReleasesParamsWithTimeout creates a new GetComponentReleasesParams object
// with the ability to set a timeout on a request.
func NewGetComponentReleasesParamsWithTimeout(timeout time.Duration) *GetComponentReleasesParams {
	return &GetComponentReleasesParams{
		timeout: timeout,
	}
}

// NewGetComponentReleasesParamsWithContext creates a new GetComponentReleasesParams object
// with the ability to set a context for a request.
func NewGetComponentReleasesParamsWithContext(ctx context.Context) *GetComponentReleasesParams {
	return &GetComponentReleasesParams{
		Context: ctx,
	}
}

// NewGetComponentReleasesParamsWithHTTPClient creates a new GetComponentReleasesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetComponentReleasesParamsWithHTTPClient(client *http.Client) *GetComponentReleasesParams {
	return &GetComponentReleasesParams{
		HTTPClient: client,
	}
}

/*
GetComponentReleasesParams contains all the parameters to send to the API endpoint

	for the get component releases operation.

	Typically these are written to a http.Request.
*/
type GetComponentReleasesParams struct {

	/* ComponentID.

	   component ID
	*/
	ComponentID string

	/* Limit.

	   limit of results to return

	   Default: 10
	*/
	Limit *int64

	/* Offset.

	   offset of results to return
	*/
	Offset *int64

	/* Page.

	   page number of results to return
	*/
	Page *int64

	/* XNuonPaginationEnabled.

	   Enable pagination
	*/
	XNuonPaginationEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get component releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetComponentReleasesParams) WithDefaults() *GetComponentReleasesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get component releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetComponentReleasesParams) SetDefaults() {
	var (
		limitDefault = int64(10)

		offsetDefault = int64(0)

		pageDefault = int64(0)
	)

	val := GetComponentReleasesParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
		Page:   &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get component releases params
func (o *GetComponentReleasesParams) WithTimeout(timeout time.Duration) *GetComponentReleasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get component releases params
func (o *GetComponentReleasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get component releases params
func (o *GetComponentReleasesParams) WithContext(ctx context.Context) *GetComponentReleasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get component releases params
func (o *GetComponentReleasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get component releases params
func (o *GetComponentReleasesParams) WithHTTPClient(client *http.Client) *GetComponentReleasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get component releases params
func (o *GetComponentReleasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponentID adds the componentID to the get component releases params
func (o *GetComponentReleasesParams) WithComponentID(componentID string) *GetComponentReleasesParams {
	o.SetComponentID(componentID)
	return o
}

// SetComponentID adds the componentId to the get component releases params
func (o *GetComponentReleasesParams) SetComponentID(componentID string) {
	o.ComponentID = componentID
}

// WithLimit adds the limit to the get component releases params
func (o *GetComponentReleasesParams) WithLimit(limit *int64) *GetComponentReleasesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get component releases params
func (o *GetComponentReleasesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get component releases params
func (o *GetComponentReleasesParams) WithOffset(offset *int64) *GetComponentReleasesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get component releases params
func (o *GetComponentReleasesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPage adds the page to the get component releases params
func (o *GetComponentReleasesParams) WithPage(page *int64) *GetComponentReleasesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get component releases params
func (o *GetComponentReleasesParams) SetPage(page *int64) {
	o.Page = page
}

// WithXNuonPaginationEnabled adds the xNuonPaginationEnabled to the get component releases params
func (o *GetComponentReleasesParams) WithXNuonPaginationEnabled(xNuonPaginationEnabled *bool) *GetComponentReleasesParams {
	o.SetXNuonPaginationEnabled(xNuonPaginationEnabled)
	return o
}

// SetXNuonPaginationEnabled adds the xNuonPaginationEnabled to the get component releases params
func (o *GetComponentReleasesParams) SetXNuonPaginationEnabled(xNuonPaginationEnabled *bool) {
	o.XNuonPaginationEnabled = xNuonPaginationEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *GetComponentReleasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param component_id
	if err := r.SetPathParam("component_id", o.ComponentID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int64

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.XNuonPaginationEnabled != nil {

		// header param x-nuon-pagination-enabled
		if err := r.SetHeaderParam("x-nuon-pagination-enabled", swag.FormatBool(*o.XNuonPaginationEnabled)); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
