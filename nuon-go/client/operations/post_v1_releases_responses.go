// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/nuonco/nuon-go/models"
)

// PostV1ReleasesReader is a Reader for the PostV1Releases structure.
type PostV1ReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV1ReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPostV1ReleasesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostV1ReleasesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostV1ReleasesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostV1ReleasesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostV1ReleasesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV1ReleasesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v1/releases] PostV1Releases", response, response.Code())
	}
}

// NewPostV1ReleasesCreated creates a PostV1ReleasesCreated with default headers values
func NewPostV1ReleasesCreated() *PostV1ReleasesCreated {
	return &PostV1ReleasesCreated{}
}

/*
PostV1ReleasesCreated describes a response with status code 201, with default header values.

Created
*/
type PostV1ReleasesCreated struct {
	Payload *models.AppComponentRelease
}

// IsSuccess returns true when this post v1 releases created response has a 2xx status code
func (o *PostV1ReleasesCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v1 releases created response has a 3xx status code
func (o *PostV1ReleasesCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases created response has a 4xx status code
func (o *PostV1ReleasesCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 releases created response has a 5xx status code
func (o *PostV1ReleasesCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 releases created response a status code equal to that given
func (o *PostV1ReleasesCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the post v1 releases created response
func (o *PostV1ReleasesCreated) Code() int {
	return 201
}

func (o *PostV1ReleasesCreated) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesCreated  %+v", 201, o.Payload)
}

func (o *PostV1ReleasesCreated) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesCreated  %+v", 201, o.Payload)
}

func (o *PostV1ReleasesCreated) GetPayload() *models.AppComponentRelease {
	return o.Payload
}

func (o *PostV1ReleasesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppComponentRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ReleasesBadRequest creates a PostV1ReleasesBadRequest with default headers values
func NewPostV1ReleasesBadRequest() *PostV1ReleasesBadRequest {
	return &PostV1ReleasesBadRequest{}
}

/*
PostV1ReleasesBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV1ReleasesBadRequest struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 releases bad request response has a 2xx status code
func (o *PostV1ReleasesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 releases bad request response has a 3xx status code
func (o *PostV1ReleasesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases bad request response has a 4xx status code
func (o *PostV1ReleasesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 releases bad request response has a 5xx status code
func (o *PostV1ReleasesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 releases bad request response a status code equal to that given
func (o *PostV1ReleasesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v1 releases bad request response
func (o *PostV1ReleasesBadRequest) Code() int {
	return 400
}

func (o *PostV1ReleasesBadRequest) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesBadRequest  %+v", 400, o.Payload)
}

func (o *PostV1ReleasesBadRequest) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesBadRequest  %+v", 400, o.Payload)
}

func (o *PostV1ReleasesBadRequest) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ReleasesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ReleasesUnauthorized creates a PostV1ReleasesUnauthorized with default headers values
func NewPostV1ReleasesUnauthorized() *PostV1ReleasesUnauthorized {
	return &PostV1ReleasesUnauthorized{}
}

/*
PostV1ReleasesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PostV1ReleasesUnauthorized struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 releases unauthorized response has a 2xx status code
func (o *PostV1ReleasesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 releases unauthorized response has a 3xx status code
func (o *PostV1ReleasesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases unauthorized response has a 4xx status code
func (o *PostV1ReleasesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 releases unauthorized response has a 5xx status code
func (o *PostV1ReleasesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 releases unauthorized response a status code equal to that given
func (o *PostV1ReleasesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the post v1 releases unauthorized response
func (o *PostV1ReleasesUnauthorized) Code() int {
	return 401
}

func (o *PostV1ReleasesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostV1ReleasesUnauthorized) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostV1ReleasesUnauthorized) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ReleasesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ReleasesForbidden creates a PostV1ReleasesForbidden with default headers values
func NewPostV1ReleasesForbidden() *PostV1ReleasesForbidden {
	return &PostV1ReleasesForbidden{}
}

/*
PostV1ReleasesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PostV1ReleasesForbidden struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 releases forbidden response has a 2xx status code
func (o *PostV1ReleasesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 releases forbidden response has a 3xx status code
func (o *PostV1ReleasesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases forbidden response has a 4xx status code
func (o *PostV1ReleasesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 releases forbidden response has a 5xx status code
func (o *PostV1ReleasesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 releases forbidden response a status code equal to that given
func (o *PostV1ReleasesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the post v1 releases forbidden response
func (o *PostV1ReleasesForbidden) Code() int {
	return 403
}

func (o *PostV1ReleasesForbidden) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesForbidden  %+v", 403, o.Payload)
}

func (o *PostV1ReleasesForbidden) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesForbidden  %+v", 403, o.Payload)
}

func (o *PostV1ReleasesForbidden) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ReleasesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ReleasesNotFound creates a PostV1ReleasesNotFound with default headers values
func NewPostV1ReleasesNotFound() *PostV1ReleasesNotFound {
	return &PostV1ReleasesNotFound{}
}

/*
PostV1ReleasesNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PostV1ReleasesNotFound struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 releases not found response has a 2xx status code
func (o *PostV1ReleasesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 releases not found response has a 3xx status code
func (o *PostV1ReleasesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases not found response has a 4xx status code
func (o *PostV1ReleasesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v1 releases not found response has a 5xx status code
func (o *PostV1ReleasesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post v1 releases not found response a status code equal to that given
func (o *PostV1ReleasesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the post v1 releases not found response
func (o *PostV1ReleasesNotFound) Code() int {
	return 404
}

func (o *PostV1ReleasesNotFound) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesNotFound  %+v", 404, o.Payload)
}

func (o *PostV1ReleasesNotFound) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesNotFound  %+v", 404, o.Payload)
}

func (o *PostV1ReleasesNotFound) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ReleasesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV1ReleasesInternalServerError creates a PostV1ReleasesInternalServerError with default headers values
func NewPostV1ReleasesInternalServerError() *PostV1ReleasesInternalServerError {
	return &PostV1ReleasesInternalServerError{}
}

/*
PostV1ReleasesInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV1ReleasesInternalServerError struct {
	Payload *models.StderrErrResponse
}

// IsSuccess returns true when this post v1 releases internal server error response has a 2xx status code
func (o *PostV1ReleasesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v1 releases internal server error response has a 3xx status code
func (o *PostV1ReleasesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v1 releases internal server error response has a 4xx status code
func (o *PostV1ReleasesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v1 releases internal server error response has a 5xx status code
func (o *PostV1ReleasesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v1 releases internal server error response a status code equal to that given
func (o *PostV1ReleasesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v1 releases internal server error response
func (o *PostV1ReleasesInternalServerError) Code() int {
	return 500
}

func (o *PostV1ReleasesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostV1ReleasesInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/releases][%d] postV1ReleasesInternalServerError  %+v", 500, o.Payload)
}

func (o *PostV1ReleasesInternalServerError) GetPayload() *models.StderrErrResponse {
	return o.Payload
}

func (o *PostV1ReleasesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StderrErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
