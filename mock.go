// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package nuon is a generated GoMock package.
package nuon

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nuonco/nuon-go/models"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateActionWorkflow mocks base method.
func (m *MockClient) CreateActionWorkflow(ctx context.Context, appID string, req *models.ServiceCreateAppActionWorkflowRequest) (*models.AppActionWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionWorkflow", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppActionWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionWorkflow indicates an expected call of CreateActionWorkflow.
func (mr *MockClientMockRecorder) CreateActionWorkflow(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionWorkflow", reflect.TypeOf((*MockClient)(nil).CreateActionWorkflow), ctx, appID, req)
}

// CreateActionWorkflowConfig mocks base method.
func (m *MockClient) CreateActionWorkflowConfig(ctx context.Context, actionWorkflowID string, req *models.ServiceCreateActionWorkflowConfigRequest) (*models.AppActionWorkflowConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActionWorkflowConfig", ctx, actionWorkflowID, req)
	ret0, _ := ret[0].(*models.AppActionWorkflowConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActionWorkflowConfig indicates an expected call of CreateActionWorkflowConfig.
func (mr *MockClientMockRecorder) CreateActionWorkflowConfig(ctx, actionWorkflowID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActionWorkflowConfig", reflect.TypeOf((*MockClient)(nil).CreateActionWorkflowConfig), ctx, actionWorkflowID, req)
}

// CreateApp mocks base method.
func (m *MockClient) CreateApp(ctx context.Context, req *models.ServiceCreateAppRequest) (*models.AppApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApp", ctx, req)
	ret0, _ := ret[0].(*models.AppApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApp indicates an expected call of CreateApp.
func (mr *MockClientMockRecorder) CreateApp(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApp", reflect.TypeOf((*MockClient)(nil).CreateApp), ctx, req)
}

// CreateAppBreakGlassConfig mocks base method.
func (m *MockClient) CreateAppBreakGlassConfig(ctx context.Context, appID string, req *models.ServiceCreateAppBreakGlassConfigRequest) (*models.AppAppBreakGlassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppBreakGlassConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppBreakGlassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppBreakGlassConfig indicates an expected call of CreateAppBreakGlassConfig.
func (mr *MockClientMockRecorder) CreateAppBreakGlassConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppBreakGlassConfig", reflect.TypeOf((*MockClient)(nil).CreateAppBreakGlassConfig), ctx, appID, req)
}

// CreateAppConfig mocks base method.
func (m *MockClient) CreateAppConfig(ctx context.Context, appID string, req *models.ServiceCreateAppConfigRequest) (*models.AppAppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppConfig indicates an expected call of CreateAppConfig.
func (mr *MockClientMockRecorder) CreateAppConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppConfig", reflect.TypeOf((*MockClient)(nil).CreateAppConfig), ctx, appID, req)
}

// CreateAppInputConfig mocks base method.
func (m *MockClient) CreateAppInputConfig(ctx context.Context, appID string, req *models.ServiceCreateAppInputConfigRequest) (*models.AppAppInputConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppInputConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppInputConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppInputConfig indicates an expected call of CreateAppInputConfig.
func (mr *MockClientMockRecorder) CreateAppInputConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppInputConfig", reflect.TypeOf((*MockClient)(nil).CreateAppInputConfig), ctx, appID, req)
}

// CreateAppPermissionsConfig mocks base method.
func (m *MockClient) CreateAppPermissionsConfig(ctx context.Context, appID string, req *models.ServiceCreateAppPermissionsConfigRequest) (*models.AppAppPermissionsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppPermissionsConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppPermissionsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppPermissionsConfig indicates an expected call of CreateAppPermissionsConfig.
func (mr *MockClientMockRecorder) CreateAppPermissionsConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppPermissionsConfig", reflect.TypeOf((*MockClient)(nil).CreateAppPermissionsConfig), ctx, appID, req)
}

// CreateAppPoliciesConfig mocks base method.
func (m *MockClient) CreateAppPoliciesConfig(ctx context.Context, appID string, req *models.ServiceCreateAppPoliciesConfigRequest) (*models.AppAppPoliciesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppPoliciesConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppPoliciesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppPoliciesConfig indicates an expected call of CreateAppPoliciesConfig.
func (mr *MockClientMockRecorder) CreateAppPoliciesConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppPoliciesConfig", reflect.TypeOf((*MockClient)(nil).CreateAppPoliciesConfig), ctx, appID, req)
}

// CreateAppRunnerConfig mocks base method.
func (m *MockClient) CreateAppRunnerConfig(ctx context.Context, appID string, req *models.ServiceCreateAppRunnerConfigRequest) (*models.AppAppRunnerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppRunnerConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppRunnerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppRunnerConfig indicates an expected call of CreateAppRunnerConfig.
func (mr *MockClientMockRecorder) CreateAppRunnerConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppRunnerConfig", reflect.TypeOf((*MockClient)(nil).CreateAppRunnerConfig), ctx, appID, req)
}

// CreateAppSandboxConfig mocks base method.
func (m *MockClient) CreateAppSandboxConfig(ctx context.Context, appID string, req *models.ServiceCreateAppSandboxConfigRequest) (*models.AppAppSandboxConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppSandboxConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppSandboxConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppSandboxConfig indicates an expected call of CreateAppSandboxConfig.
func (mr *MockClientMockRecorder) CreateAppSandboxConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSandboxConfig", reflect.TypeOf((*MockClient)(nil).CreateAppSandboxConfig), ctx, appID, req)
}

// CreateAppSecret mocks base method.
func (m *MockClient) CreateAppSecret(ctx context.Context, appID string, req *models.ServiceCreateAppSecretRequest) (*models.AppAppSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppSecret", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppSecret indicates an expected call of CreateAppSecret.
func (mr *MockClientMockRecorder) CreateAppSecret(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSecret", reflect.TypeOf((*MockClient)(nil).CreateAppSecret), ctx, appID, req)
}

// CreateAppSecretsConfig mocks base method.
func (m *MockClient) CreateAppSecretsConfig(ctx context.Context, appID string, req *models.ServiceCreateAppSecretsConfigRequest) (*models.AppAppSecretsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppSecretsConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppSecretsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppSecretsConfig indicates an expected call of CreateAppSecretsConfig.
func (mr *MockClientMockRecorder) CreateAppSecretsConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppSecretsConfig", reflect.TypeOf((*MockClient)(nil).CreateAppSecretsConfig), ctx, appID, req)
}

// CreateAppStackConfig mocks base method.
func (m *MockClient) CreateAppStackConfig(ctx context.Context, appID string, req *models.ServiceCreateAppStackConfigRequest) (*models.AppAppStackConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppStackConfig", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppAppStackConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppStackConfig indicates an expected call of CreateAppStackConfig.
func (mr *MockClientMockRecorder) CreateAppStackConfig(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppStackConfig", reflect.TypeOf((*MockClient)(nil).CreateAppStackConfig), ctx, appID, req)
}

// CreateComponent mocks base method.
func (m *MockClient) CreateComponent(ctx context.Context, appID string, req *models.ServiceCreateComponentRequest) (*models.AppComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponent indicates an expected call of CreateComponent.
func (mr *MockClientMockRecorder) CreateComponent(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*MockClient)(nil).CreateComponent), ctx, appID, req)
}

// CreateComponentBuild mocks base method.
func (m *MockClient) CreateComponentBuild(ctx context.Context, componentID string, req *models.ServiceCreateComponentBuildRequest) (*models.AppComponentBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponentBuild", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppComponentBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponentBuild indicates an expected call of CreateComponentBuild.
func (mr *MockClientMockRecorder) CreateComponentBuild(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentBuild", reflect.TypeOf((*MockClient)(nil).CreateComponentBuild), ctx, componentID, req)
}

// CreateComponentRelease mocks base method.
func (m *MockClient) CreateComponentRelease(ctx context.Context, componentID string, req *models.ServiceCreateComponentReleaseRequest) (*models.AppComponentRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponentRelease", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppComponentRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponentRelease indicates an expected call of CreateComponentRelease.
func (mr *MockClientMockRecorder) CreateComponentRelease(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponentRelease", reflect.TypeOf((*MockClient)(nil).CreateComponentRelease), ctx, componentID, req)
}

// CreateDockerBuildComponentConfig mocks base method.
func (m *MockClient) CreateDockerBuildComponentConfig(ctx context.Context, componentID string, req *models.ServiceCreateDockerBuildComponentConfigRequest) (*models.AppDockerBuildComponentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerBuildComponentConfig", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppDockerBuildComponentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerBuildComponentConfig indicates an expected call of CreateDockerBuildComponentConfig.
func (mr *MockClientMockRecorder) CreateDockerBuildComponentConfig(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerBuildComponentConfig", reflect.TypeOf((*MockClient)(nil).CreateDockerBuildComponentConfig), ctx, componentID, req)
}

// CreateExternalImageComponentConfig mocks base method.
func (m *MockClient) CreateExternalImageComponentConfig(ctx context.Context, componentID string, req *models.ServiceCreateExternalImageComponentConfigRequest) (*models.AppExternalImageComponentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalImageComponentConfig", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppExternalImageComponentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExternalImageComponentConfig indicates an expected call of CreateExternalImageComponentConfig.
func (mr *MockClientMockRecorder) CreateExternalImageComponentConfig(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalImageComponentConfig", reflect.TypeOf((*MockClient)(nil).CreateExternalImageComponentConfig), ctx, componentID, req)
}

// CreateHelmComponentConfig mocks base method.
func (m *MockClient) CreateHelmComponentConfig(ctx context.Context, componentID string, req *models.ServiceCreateHelmComponentConfigRequest) (*models.AppHelmComponentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHelmComponentConfig", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppHelmComponentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHelmComponentConfig indicates an expected call of CreateHelmComponentConfig.
func (mr *MockClientMockRecorder) CreateHelmComponentConfig(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHelmComponentConfig", reflect.TypeOf((*MockClient)(nil).CreateHelmComponentConfig), ctx, componentID, req)
}

// CreateInstall mocks base method.
func (m *MockClient) CreateInstall(ctx context.Context, appID string, req *models.ServiceCreateInstallRequest) (*models.AppInstall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstall", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppInstall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstall indicates an expected call of CreateInstall.
func (mr *MockClientMockRecorder) CreateInstall(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstall", reflect.TypeOf((*MockClient)(nil).CreateInstall), ctx, appID, req)
}

// CreateInstallActionWorkflowRun mocks base method.
func (m *MockClient) CreateInstallActionWorkflowRun(ctx context.Context, installID string, req *models.ServiceCreateInstallActionWorkflowRunRequest) (*models.AppInstallActionWorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallActionWorkflowRun", ctx, installID, req)
	ret0, _ := ret[0].(*models.AppInstallActionWorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallActionWorkflowRun indicates an expected call of CreateInstallActionWorkflowRun.
func (mr *MockClientMockRecorder) CreateInstallActionWorkflowRun(ctx, installID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallActionWorkflowRun", reflect.TypeOf((*MockClient)(nil).CreateInstallActionWorkflowRun), ctx, installID, req)
}

// CreateInstallDeploy mocks base method.
func (m *MockClient) CreateInstallDeploy(ctx context.Context, installID string, req *models.ServiceCreateInstallDeployRequest) (*models.AppInstallDeploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallDeploy", ctx, installID, req)
	ret0, _ := ret[0].(*models.AppInstallDeploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallDeploy indicates an expected call of CreateInstallDeploy.
func (mr *MockClientMockRecorder) CreateInstallDeploy(ctx, installID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallDeploy", reflect.TypeOf((*MockClient)(nil).CreateInstallDeploy), ctx, installID, req)
}

// CreateInstallInputs mocks base method.
func (m *MockClient) CreateInstallInputs(ctx context.Context, installID string, req *models.ServiceCreateInstallInputsRequest) (*models.AppInstallInputs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallInputs", ctx, installID, req)
	ret0, _ := ret[0].(*models.AppInstallInputs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallInputs indicates an expected call of CreateInstallInputs.
func (mr *MockClientMockRecorder) CreateInstallInputs(ctx, installID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallInputs", reflect.TypeOf((*MockClient)(nil).CreateInstallInputs), ctx, installID, req)
}

// CreateInstaller mocks base method.
func (m *MockClient) CreateInstaller(ctx context.Context, req *models.ServiceCreateInstallerRequest) (*models.AppInstaller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstaller", ctx, req)
	ret0, _ := ret[0].(*models.AppInstaller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstaller indicates an expected call of CreateInstaller.
func (mr *MockClientMockRecorder) CreateInstaller(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstaller", reflect.TypeOf((*MockClient)(nil).CreateInstaller), ctx, req)
}

// CreateJobComponentConfig mocks base method.
func (m *MockClient) CreateJobComponentConfig(ctx context.Context, componentID string, req *models.ServiceCreateJobComponentConfigRequest) (*models.AppJobComponentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobComponentConfig", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppJobComponentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobComponentConfig indicates an expected call of CreateJobComponentConfig.
func (mr *MockClientMockRecorder) CreateJobComponentConfig(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobComponentConfig", reflect.TypeOf((*MockClient)(nil).CreateJobComponentConfig), ctx, componentID, req)
}

// CreateOrg mocks base method.
func (m *MockClient) CreateOrg(ctx context.Context, req *models.ServiceCreateOrgRequest) (*models.AppOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrg", ctx, req)
	ret0, _ := ret[0].(*models.AppOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrg indicates an expected call of CreateOrg.
func (mr *MockClientMockRecorder) CreateOrg(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrg", reflect.TypeOf((*MockClient)(nil).CreateOrg), ctx, req)
}

// CreateOrgInvite mocks base method.
func (m *MockClient) CreateOrgInvite(ctx context.Context, req *models.ServiceCreateOrgInviteRequest) (*models.AppOrgInvite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrgInvite", ctx, req)
	ret0, _ := ret[0].(*models.AppOrgInvite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrgInvite indicates an expected call of CreateOrgInvite.
func (mr *MockClientMockRecorder) CreateOrgInvite(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrgInvite", reflect.TypeOf((*MockClient)(nil).CreateOrgInvite), ctx, req)
}

// CreateTerraformModuleComponentConfig mocks base method.
func (m *MockClient) CreateTerraformModuleComponentConfig(ctx context.Context, componentID string, req *models.ServiceCreateTerraformModuleComponentConfigRequest) (*models.AppTerraformModuleComponentConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTerraformModuleComponentConfig", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppTerraformModuleComponentConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTerraformModuleComponentConfig indicates an expected call of CreateTerraformModuleComponentConfig.
func (mr *MockClientMockRecorder) CreateTerraformModuleComponentConfig(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTerraformModuleComponentConfig", reflect.TypeOf((*MockClient)(nil).CreateTerraformModuleComponentConfig), ctx, componentID, req)
}

// CreateVCSConnection mocks base method.
func (m *MockClient) CreateVCSConnection(ctx context.Context, req *models.ServiceCreateConnectionRequest) (*models.AppVCSConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVCSConnection", ctx, req)
	ret0, _ := ret[0].(*models.AppVCSConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVCSConnection indicates an expected call of CreateVCSConnection.
func (mr *MockClientMockRecorder) CreateVCSConnection(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVCSConnection", reflect.TypeOf((*MockClient)(nil).CreateVCSConnection), ctx, req)
}

// CreateVCSConnectionCallback mocks base method.
func (m *MockClient) CreateVCSConnectionCallback(ctx context.Context, req *models.ServiceCreateConnectionCallbackRequest) (*models.AppVCSConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVCSConnectionCallback", ctx, req)
	ret0, _ := ret[0].(*models.AppVCSConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVCSConnectionCallback indicates an expected call of CreateVCSConnectionCallback.
func (mr *MockClientMockRecorder) CreateVCSConnectionCallback(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVCSConnectionCallback", reflect.TypeOf((*MockClient)(nil).CreateVCSConnectionCallback), ctx, req)
}

// DeleteActionWorkflow mocks base method.
func (m *MockClient) DeleteActionWorkflow(ctx context.Context, actionWorkflowID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActionWorkflow", ctx, actionWorkflowID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActionWorkflow indicates an expected call of DeleteActionWorkflow.
func (mr *MockClientMockRecorder) DeleteActionWorkflow(ctx, actionWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActionWorkflow", reflect.TypeOf((*MockClient)(nil).DeleteActionWorkflow), ctx, actionWorkflowID)
}

// DeleteApp mocks base method.
func (m *MockClient) DeleteApp(ctx context.Context, appID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", ctx, appID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockClientMockRecorder) DeleteApp(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockClient)(nil).DeleteApp), ctx, appID)
}

// DeleteAppSecret mocks base method.
func (m *MockClient) DeleteAppSecret(ctx context.Context, appID, secretID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppSecret", ctx, appID, secretID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAppSecret indicates an expected call of DeleteAppSecret.
func (mr *MockClientMockRecorder) DeleteAppSecret(ctx, appID, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppSecret", reflect.TypeOf((*MockClient)(nil).DeleteAppSecret), ctx, appID, secretID)
}

// DeleteComponent mocks base method.
func (m *MockClient) DeleteComponent(ctx context.Context, componentID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", ctx, componentID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComponent indicates an expected call of DeleteComponent.
func (mr *MockClientMockRecorder) DeleteComponent(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockClient)(nil).DeleteComponent), ctx, componentID)
}

// DeleteInstall mocks base method.
func (m *MockClient) DeleteInstall(ctx context.Context, installID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstall", ctx, installID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstall indicates an expected call of DeleteInstall.
func (mr *MockClientMockRecorder) DeleteInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstall", reflect.TypeOf((*MockClient)(nil).DeleteInstall), ctx, installID)
}

// DeleteInstallComponent mocks base method.
func (m *MockClient) DeleteInstallComponent(ctx context.Context, installID, componentID string, force bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallComponent", ctx, installID, componentID, force)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstallComponent indicates an expected call of DeleteInstallComponent.
func (mr *MockClientMockRecorder) DeleteInstallComponent(ctx, installID, componentID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallComponent", reflect.TypeOf((*MockClient)(nil).DeleteInstallComponent), ctx, installID, componentID, force)
}

// DeleteInstallComponents mocks base method.
func (m *MockClient) DeleteInstallComponents(ctx context.Context, installID string, force bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallComponents", ctx, installID, force)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstallComponents indicates an expected call of DeleteInstallComponents.
func (mr *MockClientMockRecorder) DeleteInstallComponents(ctx, installID, force interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallComponents", reflect.TypeOf((*MockClient)(nil).DeleteInstallComponents), ctx, installID, force)
}

// DeleteInstaller mocks base method.
func (m *MockClient) DeleteInstaller(ctx context.Context, installerID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstaller", ctx, installerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstaller indicates an expected call of DeleteInstaller.
func (mr *MockClientMockRecorder) DeleteInstaller(ctx, installerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstaller", reflect.TypeOf((*MockClient)(nil).DeleteInstaller), ctx, installerID)
}

// DeleteOrg mocks base method.
func (m *MockClient) DeleteOrg(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrg", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrg indicates an expected call of DeleteOrg.
func (mr *MockClientMockRecorder) DeleteOrg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrg", reflect.TypeOf((*MockClient)(nil).DeleteOrg), ctx)
}

// DeployInstallComponents mocks base method.
func (m *MockClient) DeployInstallComponents(ctx context.Context, installID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployInstallComponents", ctx, installID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployInstallComponents indicates an expected call of DeployInstallComponents.
func (mr *MockClientMockRecorder) DeployInstallComponents(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployInstallComponents", reflect.TypeOf((*MockClient)(nil).DeployInstallComponents), ctx, installID)
}

// DeprovisionInstall mocks base method.
func (m *MockClient) DeprovisionInstall(ctx context.Context, installID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeprovisionInstall", ctx, installID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeprovisionInstall indicates an expected call of DeprovisionInstall.
func (mr *MockClientMockRecorder) DeprovisionInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeprovisionInstall", reflect.TypeOf((*MockClient)(nil).DeprovisionInstall), ctx, installID)
}

// GetActionWorkflow mocks base method.
func (m *MockClient) GetActionWorkflow(ctx context.Context, actionWorkflowID string) (*models.AppActionWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionWorkflow", ctx, actionWorkflowID)
	ret0, _ := ret[0].(*models.AppActionWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionWorkflow indicates an expected call of GetActionWorkflow.
func (mr *MockClientMockRecorder) GetActionWorkflow(ctx, actionWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWorkflow", reflect.TypeOf((*MockClient)(nil).GetActionWorkflow), ctx, actionWorkflowID)
}

// GetActionWorkflowConfig mocks base method.
func (m *MockClient) GetActionWorkflowConfig(ctx context.Context, actionWorkflowConfigID string) (*models.AppActionWorkflowConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionWorkflowConfig", ctx, actionWorkflowConfigID)
	ret0, _ := ret[0].(*models.AppActionWorkflowConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionWorkflowConfig indicates an expected call of GetActionWorkflowConfig.
func (mr *MockClientMockRecorder) GetActionWorkflowConfig(ctx, actionWorkflowConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWorkflowConfig", reflect.TypeOf((*MockClient)(nil).GetActionWorkflowConfig), ctx, actionWorkflowConfigID)
}

// GetActionWorkflowConfigs mocks base method.
func (m *MockClient) GetActionWorkflowConfigs(ctx context.Context, actionWorkflowID string) ([]*models.AppActionWorkflowConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionWorkflowConfigs", ctx, actionWorkflowID)
	ret0, _ := ret[0].([]*models.AppActionWorkflowConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionWorkflowConfigs indicates an expected call of GetActionWorkflowConfigs.
func (mr *MockClientMockRecorder) GetActionWorkflowConfigs(ctx, actionWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWorkflowConfigs", reflect.TypeOf((*MockClient)(nil).GetActionWorkflowConfigs), ctx, actionWorkflowID)
}

// GetActionWorkflowLatestConfig mocks base method.
func (m *MockClient) GetActionWorkflowLatestConfig(ctx context.Context, actionWorkflowID string) (*models.AppActionWorkflowConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionWorkflowLatestConfig", ctx, actionWorkflowID)
	ret0, _ := ret[0].(*models.AppActionWorkflowConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionWorkflowLatestConfig indicates an expected call of GetActionWorkflowLatestConfig.
func (mr *MockClientMockRecorder) GetActionWorkflowLatestConfig(ctx, actionWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWorkflowLatestConfig", reflect.TypeOf((*MockClient)(nil).GetActionWorkflowLatestConfig), ctx, actionWorkflowID)
}

// GetActionWorkflows mocks base method.
func (m *MockClient) GetActionWorkflows(ctx context.Context, appID string, query *models.GetActionWorkflowsQuery) ([]*models.AppActionWorkflow, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionWorkflows", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppActionWorkflow)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActionWorkflows indicates an expected call of GetActionWorkflows.
func (mr *MockClientMockRecorder) GetActionWorkflows(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionWorkflows", reflect.TypeOf((*MockClient)(nil).GetActionWorkflows), ctx, appID, query)
}

// GetAllComponents mocks base method.
func (m *MockClient) GetAllComponents(ctx context.Context, query *models.GetAllComponentsQuery) ([]*models.AppComponent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllComponents", ctx, query)
	ret0, _ := ret[0].([]*models.AppComponent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllComponents indicates an expected call of GetAllComponents.
func (mr *MockClientMockRecorder) GetAllComponents(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllComponents", reflect.TypeOf((*MockClient)(nil).GetAllComponents), ctx, query)
}

// GetAllInstalls mocks base method.
func (m *MockClient) GetAllInstalls(ctx context.Context, query *models.GetAllInstallsQuery) ([]*models.AppInstall, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInstalls", ctx, query)
	ret0, _ := ret[0].([]*models.AppInstall)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllInstalls indicates an expected call of GetAllInstalls.
func (mr *MockClientMockRecorder) GetAllInstalls(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInstalls", reflect.TypeOf((*MockClient)(nil).GetAllInstalls), ctx, query)
}

// GetAllVCSConnectedRepos mocks base method.
func (m *MockClient) GetAllVCSConnectedRepos(ctx context.Context, query *models.GetAllVCSConnectedReposQuery) ([]*models.ServiceRepository, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVCSConnectedRepos", ctx, query)
	ret0, _ := ret[0].([]*models.ServiceRepository)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllVCSConnectedRepos indicates an expected call of GetAllVCSConnectedRepos.
func (mr *MockClientMockRecorder) GetAllVCSConnectedRepos(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVCSConnectedRepos", reflect.TypeOf((*MockClient)(nil).GetAllVCSConnectedRepos), ctx, query)
}

// GetApp mocks base method.
func (m *MockClient) GetApp(ctx context.Context, appID string) (*models.AppApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", ctx, appID)
	ret0, _ := ret[0].(*models.AppApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockClientMockRecorder) GetApp(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockClient)(nil).GetApp), ctx, appID)
}

// GetAppActionWorkflow mocks base method.
func (m *MockClient) GetAppActionWorkflow(ctx context.Context, appID, actionWorkflowID string) (*models.AppActionWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppActionWorkflow", ctx, appID, actionWorkflowID)
	ret0, _ := ret[0].(*models.AppActionWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppActionWorkflow indicates an expected call of GetAppActionWorkflow.
func (mr *MockClientMockRecorder) GetAppActionWorkflow(ctx, appID, actionWorkflowID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppActionWorkflow", reflect.TypeOf((*MockClient)(nil).GetAppActionWorkflow), ctx, appID, actionWorkflowID)
}

// GetAppBreakGlassConfig mocks base method.
func (m *MockClient) GetAppBreakGlassConfig(ctx context.Context, appID, appSecretConfigID string) (*models.AppAppBreakGlassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppBreakGlassConfig", ctx, appID, appSecretConfigID)
	ret0, _ := ret[0].(*models.AppAppBreakGlassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppBreakGlassConfig indicates an expected call of GetAppBreakGlassConfig.
func (mr *MockClientMockRecorder) GetAppBreakGlassConfig(ctx, appID, appSecretConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppBreakGlassConfig", reflect.TypeOf((*MockClient)(nil).GetAppBreakGlassConfig), ctx, appID, appSecretConfigID)
}

// GetAppComponent mocks base method.
func (m *MockClient) GetAppComponent(ctx context.Context, appID, componentNameOrID string) (*models.AppComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppComponent", ctx, appID, componentNameOrID)
	ret0, _ := ret[0].(*models.AppComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppComponent indicates an expected call of GetAppComponent.
func (mr *MockClientMockRecorder) GetAppComponent(ctx, appID, componentNameOrID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppComponent", reflect.TypeOf((*MockClient)(nil).GetAppComponent), ctx, appID, componentNameOrID)
}

// GetAppComponents mocks base method.
func (m *MockClient) GetAppComponents(ctx context.Context, appID string, query *models.GetAppComponentsQuery) ([]*models.AppComponent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppComponents", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppComponent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppComponents indicates an expected call of GetAppComponents.
func (mr *MockClientMockRecorder) GetAppComponents(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppComponents", reflect.TypeOf((*MockClient)(nil).GetAppComponents), ctx, appID, query)
}

// GetAppConfig mocks base method.
func (m *MockClient) GetAppConfig(ctx context.Context, appID, appConfigID string) (*models.AppAppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppConfig", ctx, appID, appConfigID)
	ret0, _ := ret[0].(*models.AppAppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppConfig indicates an expected call of GetAppConfig.
func (mr *MockClientMockRecorder) GetAppConfig(ctx, appID, appConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppConfig", reflect.TypeOf((*MockClient)(nil).GetAppConfig), ctx, appID, appConfigID)
}

// GetAppConfigTemplate mocks base method.
func (m *MockClient) GetAppConfigTemplate(ctx context.Context, appID string, typ models.ServiceAppConfigTemplateType) (*models.ServiceAppConfigTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppConfigTemplate", ctx, appID, typ)
	ret0, _ := ret[0].(*models.ServiceAppConfigTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppConfigTemplate indicates an expected call of GetAppConfigTemplate.
func (mr *MockClientMockRecorder) GetAppConfigTemplate(ctx, appID, typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppConfigTemplate", reflect.TypeOf((*MockClient)(nil).GetAppConfigTemplate), ctx, appID, typ)
}

// GetAppConfigs mocks base method.
func (m *MockClient) GetAppConfigs(ctx context.Context, appID string, query *models.GetAppConfigsQuery) ([]*models.AppAppConfig, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppConfigs", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppAppConfig)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppConfigs indicates an expected call of GetAppConfigs.
func (mr *MockClientMockRecorder) GetAppConfigs(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppConfigs", reflect.TypeOf((*MockClient)(nil).GetAppConfigs), ctx, appID, query)
}

// GetAppInputConfigs mocks base method.
func (m *MockClient) GetAppInputConfigs(ctx context.Context, appID string, query *models.GetAppInputConfigsQuery) ([]*models.AppAppInputConfig, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInputConfigs", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppAppInputConfig)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppInputConfigs indicates an expected call of GetAppInputConfigs.
func (mr *MockClientMockRecorder) GetAppInputConfigs(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInputConfigs", reflect.TypeOf((*MockClient)(nil).GetAppInputConfigs), ctx, appID, query)
}

// GetAppInputLatestConfig mocks base method.
func (m *MockClient) GetAppInputLatestConfig(ctx context.Context, appID string) (*models.AppAppInputConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInputLatestConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppInputConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppInputLatestConfig indicates an expected call of GetAppInputLatestConfig.
func (mr *MockClientMockRecorder) GetAppInputLatestConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInputLatestConfig", reflect.TypeOf((*MockClient)(nil).GetAppInputLatestConfig), ctx, appID)
}

// GetAppInstalls mocks base method.
func (m *MockClient) GetAppInstalls(ctx context.Context, appID string, query *models.GetAppInstallsQuery) ([]*models.AppInstall, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInstalls", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppInstall)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppInstalls indicates an expected call of GetAppInstalls.
func (mr *MockClientMockRecorder) GetAppInstalls(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInstalls", reflect.TypeOf((*MockClient)(nil).GetAppInstalls), ctx, appID, query)
}

// GetAppLatestConfig mocks base method.
func (m *MockClient) GetAppLatestConfig(ctx context.Context, appID string) (*models.AppAppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppLatestConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppLatestConfig indicates an expected call of GetAppLatestConfig.
func (mr *MockClientMockRecorder) GetAppLatestConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppLatestConfig", reflect.TypeOf((*MockClient)(nil).GetAppLatestConfig), ctx, appID)
}

// GetAppPermissionsConfig mocks base method.
func (m *MockClient) GetAppPermissionsConfig(ctx context.Context, appID, appSecretConfigID string) (*models.AppAppPermissionsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPermissionsConfig", ctx, appID, appSecretConfigID)
	ret0, _ := ret[0].(*models.AppAppPermissionsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPermissionsConfig indicates an expected call of GetAppPermissionsConfig.
func (mr *MockClientMockRecorder) GetAppPermissionsConfig(ctx, appID, appSecretConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPermissionsConfig", reflect.TypeOf((*MockClient)(nil).GetAppPermissionsConfig), ctx, appID, appSecretConfigID)
}

// GetAppPoliciesConfig mocks base method.
func (m *MockClient) GetAppPoliciesConfig(ctx context.Context, appID, appSecretConfigID string) (*models.AppAppPoliciesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppPoliciesConfig", ctx, appID, appSecretConfigID)
	ret0, _ := ret[0].(*models.AppAppPoliciesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppPoliciesConfig indicates an expected call of GetAppPoliciesConfig.
func (mr *MockClientMockRecorder) GetAppPoliciesConfig(ctx, appID, appSecretConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppPoliciesConfig", reflect.TypeOf((*MockClient)(nil).GetAppPoliciesConfig), ctx, appID, appSecretConfigID)
}

// GetAppReleases mocks base method.
func (m *MockClient) GetAppReleases(ctx context.Context, appID string, query *models.GetAppReleasesQuery) ([]*models.AppComponentRelease, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppReleases", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppComponentRelease)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppReleases indicates an expected call of GetAppReleases.
func (mr *MockClientMockRecorder) GetAppReleases(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppReleases", reflect.TypeOf((*MockClient)(nil).GetAppReleases), ctx, appID, query)
}

// GetAppRunnerConfigs mocks base method.
func (m *MockClient) GetAppRunnerConfigs(ctx context.Context, appID string, query *models.GetAppRunnerConfigsQuery) ([]*models.AppAppRunnerConfig, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRunnerConfigs", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppAppRunnerConfig)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppRunnerConfigs indicates an expected call of GetAppRunnerConfigs.
func (mr *MockClientMockRecorder) GetAppRunnerConfigs(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRunnerConfigs", reflect.TypeOf((*MockClient)(nil).GetAppRunnerConfigs), ctx, appID, query)
}

// GetAppRunnerLatestConfig mocks base method.
func (m *MockClient) GetAppRunnerLatestConfig(ctx context.Context, appID string) (*models.AppAppRunnerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppRunnerLatestConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppRunnerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppRunnerLatestConfig indicates an expected call of GetAppRunnerLatestConfig.
func (mr *MockClientMockRecorder) GetAppRunnerLatestConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppRunnerLatestConfig", reflect.TypeOf((*MockClient)(nil).GetAppRunnerLatestConfig), ctx, appID)
}

// GetAppSandboxConfigs mocks base method.
func (m *MockClient) GetAppSandboxConfigs(ctx context.Context, appID string, query *models.GetAppSandboxConfigsQuery) ([]*models.AppAppSandboxConfig, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSandboxConfigs", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppAppSandboxConfig)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppSandboxConfigs indicates an expected call of GetAppSandboxConfigs.
func (mr *MockClientMockRecorder) GetAppSandboxConfigs(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSandboxConfigs", reflect.TypeOf((*MockClient)(nil).GetAppSandboxConfigs), ctx, appID, query)
}

// GetAppSandboxLatestConfig mocks base method.
func (m *MockClient) GetAppSandboxLatestConfig(ctx context.Context, appID string) (*models.AppAppSandboxConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSandboxLatestConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppSandboxConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSandboxLatestConfig indicates an expected call of GetAppSandboxLatestConfig.
func (mr *MockClientMockRecorder) GetAppSandboxLatestConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSandboxLatestConfig", reflect.TypeOf((*MockClient)(nil).GetAppSandboxLatestConfig), ctx, appID)
}

// GetAppSecrets mocks base method.
func (m *MockClient) GetAppSecrets(ctx context.Context, appID string, query *models.GetAppSecretsQuery) ([]*models.AppAppSecret, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSecrets", ctx, appID, query)
	ret0, _ := ret[0].([]*models.AppAppSecret)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppSecrets indicates an expected call of GetAppSecrets.
func (mr *MockClientMockRecorder) GetAppSecrets(ctx, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSecrets", reflect.TypeOf((*MockClient)(nil).GetAppSecrets), ctx, appID, query)
}

// GetAppSecretsConfig mocks base method.
func (m *MockClient) GetAppSecretsConfig(ctx context.Context, appID, appSecretConfigID string) (*models.AppAppSecretsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppSecretsConfig", ctx, appID, appSecretConfigID)
	ret0, _ := ret[0].(*models.AppAppSecretsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppSecretsConfig indicates an expected call of GetAppSecretsConfig.
func (mr *MockClientMockRecorder) GetAppSecretsConfig(ctx, appID, appSecretConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppSecretsConfig", reflect.TypeOf((*MockClient)(nil).GetAppSecretsConfig), ctx, appID, appSecretConfigID)
}

// GetAppStackConfig mocks base method.
func (m *MockClient) GetAppStackConfig(ctx context.Context, appID, appStackConfigID string) (*models.AppAppStackConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppStackConfig", ctx, appID, appStackConfigID)
	ret0, _ := ret[0].(*models.AppAppStackConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppStackConfig indicates an expected call of GetAppStackConfig.
func (mr *MockClientMockRecorder) GetAppStackConfig(ctx, appID, appStackConfigID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppStackConfig", reflect.TypeOf((*MockClient)(nil).GetAppStackConfig), ctx, appID, appStackConfigID)
}

// GetApps mocks base method.
func (m *MockClient) GetApps(ctx context.Context, query *models.GetAppsQuery) ([]*models.AppApp, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", ctx, query)
	ret0, _ := ret[0].([]*models.AppApp)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApps indicates an expected call of GetApps.
func (mr *MockClientMockRecorder) GetApps(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockClient)(nil).GetApps), ctx, query)
}

// GetBuild mocks base method.
func (m *MockClient) GetBuild(ctx context.Context, buildID string) (*models.AppComponentBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", ctx, buildID)
	ret0, _ := ret[0].(*models.AppComponentBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockClientMockRecorder) GetBuild(ctx, buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockClient)(nil).GetBuild), ctx, buildID)
}

// GetCLIConfig mocks base method.
func (m *MockClient) GetCLIConfig(ctx context.Context) (*models.ServiceCLIConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCLIConfig", ctx)
	ret0, _ := ret[0].(*models.ServiceCLIConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCLIConfig indicates an expected call of GetCLIConfig.
func (mr *MockClientMockRecorder) GetCLIConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCLIConfig", reflect.TypeOf((*MockClient)(nil).GetCLIConfig), ctx)
}

// GetCloudPlatformRegions mocks base method.
func (m *MockClient) GetCloudPlatformRegions(ctx context.Context, cloudPlatform string) ([]*models.AppCloudPlatformRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudPlatformRegions", ctx, cloudPlatform)
	ret0, _ := ret[0].([]*models.AppCloudPlatformRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudPlatformRegions indicates an expected call of GetCloudPlatformRegions.
func (mr *MockClientMockRecorder) GetCloudPlatformRegions(ctx, cloudPlatform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudPlatformRegions", reflect.TypeOf((*MockClient)(nil).GetCloudPlatformRegions), ctx, cloudPlatform)
}

// GetComponent mocks base method.
func (m *MockClient) GetComponent(ctx context.Context, componentID string) (*models.AppComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponent", ctx, componentID)
	ret0, _ := ret[0].(*models.AppComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponent indicates an expected call of GetComponent.
func (mr *MockClientMockRecorder) GetComponent(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponent", reflect.TypeOf((*MockClient)(nil).GetComponent), ctx, componentID)
}

// GetComponentBuild mocks base method.
func (m *MockClient) GetComponentBuild(ctx context.Context, componentID, buildID string) (*models.AppComponentBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentBuild", ctx, componentID, buildID)
	ret0, _ := ret[0].(*models.AppComponentBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentBuild indicates an expected call of GetComponentBuild.
func (mr *MockClientMockRecorder) GetComponentBuild(ctx, componentID, buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentBuild", reflect.TypeOf((*MockClient)(nil).GetComponentBuild), ctx, componentID, buildID)
}

// GetComponentBuilds mocks base method.
func (m *MockClient) GetComponentBuilds(ctx context.Context, componentID, appID string, query *models.GetComponentBuildsQuery) ([]*models.AppComponentBuild, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentBuilds", ctx, componentID, appID, query)
	ret0, _ := ret[0].([]*models.AppComponentBuild)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentBuilds indicates an expected call of GetComponentBuilds.
func (mr *MockClientMockRecorder) GetComponentBuilds(ctx, componentID, appID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentBuilds", reflect.TypeOf((*MockClient)(nil).GetComponentBuilds), ctx, componentID, appID, query)
}

// GetComponentConfigs mocks base method.
func (m *MockClient) GetComponentConfigs(ctx context.Context, componentID string, query *models.GetComponentConfigsQuery) ([]*models.AppComponentConfigConnection, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentConfigs", ctx, componentID, query)
	ret0, _ := ret[0].([]*models.AppComponentConfigConnection)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentConfigs indicates an expected call of GetComponentConfigs.
func (mr *MockClientMockRecorder) GetComponentConfigs(ctx, componentID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentConfigs", reflect.TypeOf((*MockClient)(nil).GetComponentConfigs), ctx, componentID, query)
}

// GetComponentLatestBuild mocks base method.
func (m *MockClient) GetComponentLatestBuild(ctx context.Context, componentID string) (*models.AppComponentBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentLatestBuild", ctx, componentID)
	ret0, _ := ret[0].(*models.AppComponentBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentLatestBuild indicates an expected call of GetComponentLatestBuild.
func (mr *MockClientMockRecorder) GetComponentLatestBuild(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentLatestBuild", reflect.TypeOf((*MockClient)(nil).GetComponentLatestBuild), ctx, componentID)
}

// GetComponentLatestConfig mocks base method.
func (m *MockClient) GetComponentLatestConfig(ctx context.Context, componentID string) (*models.AppComponentConfigConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentLatestConfig", ctx, componentID)
	ret0, _ := ret[0].(*models.AppComponentConfigConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentLatestConfig indicates an expected call of GetComponentLatestConfig.
func (mr *MockClientMockRecorder) GetComponentLatestConfig(ctx, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentLatestConfig", reflect.TypeOf((*MockClient)(nil).GetComponentLatestConfig), ctx, componentID)
}

// GetComponentReleases mocks base method.
func (m *MockClient) GetComponentReleases(ctx context.Context, componentID string, query *models.GetComponentReleasesQuery) ([]*models.AppComponentRelease, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentReleases", ctx, componentID, query)
	ret0, _ := ret[0].([]*models.AppComponentRelease)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetComponentReleases indicates an expected call of GetComponentReleases.
func (mr *MockClientMockRecorder) GetComponentReleases(ctx, componentID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentReleases", reflect.TypeOf((*MockClient)(nil).GetComponentReleases), ctx, componentID, query)
}

// GetCurrentUser mocks base method.
func (m *MockClient) GetCurrentUser(ctx context.Context) (*models.AppAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx)
	ret0, _ := ret[0].(*models.AppAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockClientMockRecorder) GetCurrentUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockClient)(nil).GetCurrentUser), ctx)
}

// GetInstall mocks base method.
func (m *MockClient) GetInstall(ctx context.Context, installID string) (*models.AppInstall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstall", ctx, installID)
	ret0, _ := ret[0].(*models.AppInstall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstall indicates an expected call of GetInstall.
func (mr *MockClientMockRecorder) GetInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstall", reflect.TypeOf((*MockClient)(nil).GetInstall), ctx, installID)
}

// GetInstallActionWorkflowRecentRuns mocks base method.
func (m *MockClient) GetInstallActionWorkflowRecentRuns(ctx context.Context, installID, actionWorkflowID string, query *models.GetInstallActionWorkflowRecentRunsQuery) (*models.AppInstallActionWorkflow, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallActionWorkflowRecentRuns", ctx, installID, actionWorkflowID, query)
	ret0, _ := ret[0].(*models.AppInstallActionWorkflow)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallActionWorkflowRecentRuns indicates an expected call of GetInstallActionWorkflowRecentRuns.
func (mr *MockClientMockRecorder) GetInstallActionWorkflowRecentRuns(ctx, installID, actionWorkflowID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallActionWorkflowRecentRuns", reflect.TypeOf((*MockClient)(nil).GetInstallActionWorkflowRecentRuns), ctx, installID, actionWorkflowID, query)
}

// GetInstallActionWorkflowRun mocks base method.
func (m *MockClient) GetInstallActionWorkflowRun(ctx context.Context, installID, runID string) (*models.AppInstallActionWorkflowRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallActionWorkflowRun", ctx, installID, runID)
	ret0, _ := ret[0].(*models.AppInstallActionWorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallActionWorkflowRun indicates an expected call of GetInstallActionWorkflowRun.
func (mr *MockClientMockRecorder) GetInstallActionWorkflowRun(ctx, installID, runID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallActionWorkflowRun", reflect.TypeOf((*MockClient)(nil).GetInstallActionWorkflowRun), ctx, installID, runID)
}

// GetInstallComponentDeploys mocks base method.
func (m *MockClient) GetInstallComponentDeploys(ctx context.Context, installID, componentID string, query *models.GetInstallComponentDeploysQuery) ([]*models.AppInstallDeploy, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallComponentDeploys", ctx, installID, componentID, query)
	ret0, _ := ret[0].([]*models.AppInstallDeploy)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallComponentDeploys indicates an expected call of GetInstallComponentDeploys.
func (mr *MockClientMockRecorder) GetInstallComponentDeploys(ctx, installID, componentID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallComponentDeploys", reflect.TypeOf((*MockClient)(nil).GetInstallComponentDeploys), ctx, installID, componentID, query)
}

// GetInstallComponentLatestDeploy mocks base method.
func (m *MockClient) GetInstallComponentLatestDeploy(ctx context.Context, installID, componentID string) (*models.AppInstallDeploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallComponentLatestDeploy", ctx, installID, componentID)
	ret0, _ := ret[0].(*models.AppInstallDeploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallComponentLatestDeploy indicates an expected call of GetInstallComponentLatestDeploy.
func (mr *MockClientMockRecorder) GetInstallComponentLatestDeploy(ctx, installID, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallComponentLatestDeploy", reflect.TypeOf((*MockClient)(nil).GetInstallComponentLatestDeploy), ctx, installID, componentID)
}

// GetInstallComponents mocks base method.
func (m *MockClient) GetInstallComponents(ctx context.Context, installID string, query *models.GetInstallComponentsQuery) ([]*models.AppInstallComponent, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallComponents", ctx, installID, query)
	ret0, _ := ret[0].([]*models.AppInstallComponent)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallComponents indicates an expected call of GetInstallComponents.
func (mr *MockClientMockRecorder) GetInstallComponents(ctx, installID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallComponents", reflect.TypeOf((*MockClient)(nil).GetInstallComponents), ctx, installID, query)
}

// GetInstallCurrentInputs mocks base method.
func (m *MockClient) GetInstallCurrentInputs(ctx context.Context, installID string) (*models.AppInstallInputs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallCurrentInputs", ctx, installID)
	ret0, _ := ret[0].(*models.AppInstallInputs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallCurrentInputs indicates an expected call of GetInstallCurrentInputs.
func (mr *MockClientMockRecorder) GetInstallCurrentInputs(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallCurrentInputs", reflect.TypeOf((*MockClient)(nil).GetInstallCurrentInputs), ctx, installID)
}

// GetInstallDeploy mocks base method.
func (m *MockClient) GetInstallDeploy(ctx context.Context, installID, deployID string) (*models.AppInstallDeploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallDeploy", ctx, installID, deployID)
	ret0, _ := ret[0].(*models.AppInstallDeploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallDeploy indicates an expected call of GetInstallDeploy.
func (mr *MockClientMockRecorder) GetInstallDeploy(ctx, installID, deployID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallDeploy", reflect.TypeOf((*MockClient)(nil).GetInstallDeploy), ctx, installID, deployID)
}

// GetInstallDeploys mocks base method.
func (m *MockClient) GetInstallDeploys(ctx context.Context, installID string, query *models.GetInstallDeploysQuery) ([]*models.AppInstallDeploy, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallDeploys", ctx, installID, query)
	ret0, _ := ret[0].([]*models.AppInstallDeploy)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallDeploys indicates an expected call of GetInstallDeploys.
func (mr *MockClientMockRecorder) GetInstallDeploys(ctx, installID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallDeploys", reflect.TypeOf((*MockClient)(nil).GetInstallDeploys), ctx, installID, query)
}

// GetInstallInputs mocks base method.
func (m *MockClient) GetInstallInputs(ctx context.Context, installID string, query *models.GetInstallInputsQuery) ([]*models.AppInstallInputs, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallInputs", ctx, installID, query)
	ret0, _ := ret[0].([]*models.AppInstallInputs)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallInputs indicates an expected call of GetInstallInputs.
func (mr *MockClientMockRecorder) GetInstallInputs(ctx, installID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallInputs", reflect.TypeOf((*MockClient)(nil).GetInstallInputs), ctx, installID, query)
}

// GetInstallLatestDeploy mocks base method.
func (m *MockClient) GetInstallLatestDeploy(ctx context.Context, installID string) (*models.AppInstallDeploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallLatestDeploy", ctx, installID)
	ret0, _ := ret[0].(*models.AppInstallDeploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallLatestDeploy indicates an expected call of GetInstallLatestDeploy.
func (mr *MockClientMockRecorder) GetInstallLatestDeploy(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallLatestDeploy", reflect.TypeOf((*MockClient)(nil).GetInstallLatestDeploy), ctx, installID)
}

// GetInstallSandboxRuns mocks base method.
func (m *MockClient) GetInstallSandboxRuns(ctx context.Context, installID string, query *models.GetInstallSandboxRunsQuery) ([]*models.AppInstallSandboxRun, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallSandboxRuns", ctx, installID, query)
	ret0, _ := ret[0].([]*models.AppInstallSandboxRun)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallSandboxRuns indicates an expected call of GetInstallSandboxRuns.
func (mr *MockClientMockRecorder) GetInstallSandboxRuns(ctx, installID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallSandboxRuns", reflect.TypeOf((*MockClient)(nil).GetInstallSandboxRuns), ctx, installID, query)
}

// GetInstaller mocks base method.
func (m *MockClient) GetInstaller(ctx context.Context, installerID string) (*models.AppInstaller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstaller", ctx, installerID)
	ret0, _ := ret[0].(*models.AppInstaller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstaller indicates an expected call of GetInstaller.
func (mr *MockClientMockRecorder) GetInstaller(ctx, installerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstaller", reflect.TypeOf((*MockClient)(nil).GetInstaller), ctx, installerID)
}

// GetInstallers mocks base method.
func (m *MockClient) GetInstallers(ctx context.Context, query *models.GetInstallersQuery) ([]*models.AppInstaller, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallers", ctx, query)
	ret0, _ := ret[0].([]*models.AppInstaller)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstallers indicates an expected call of GetInstallers.
func (mr *MockClientMockRecorder) GetInstallers(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallers", reflect.TypeOf((*MockClient)(nil).GetInstallers), ctx, query)
}

// GetLatestAppBreakGlassConfig mocks base method.
func (m *MockClient) GetLatestAppBreakGlassConfig(ctx context.Context, appID string) (*models.AppAppBreakGlassConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAppBreakGlassConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppBreakGlassConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAppBreakGlassConfig indicates an expected call of GetLatestAppBreakGlassConfig.
func (mr *MockClientMockRecorder) GetLatestAppBreakGlassConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAppBreakGlassConfig", reflect.TypeOf((*MockClient)(nil).GetLatestAppBreakGlassConfig), ctx, appID)
}

// GetLatestAppPermissionsConfig mocks base method.
func (m *MockClient) GetLatestAppPermissionsConfig(ctx context.Context, appID string) (*models.AppAppPermissionsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAppPermissionsConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppPermissionsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAppPermissionsConfig indicates an expected call of GetLatestAppPermissionsConfig.
func (mr *MockClientMockRecorder) GetLatestAppPermissionsConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAppPermissionsConfig", reflect.TypeOf((*MockClient)(nil).GetLatestAppPermissionsConfig), ctx, appID)
}

// GetLatestAppPoliciesConfig mocks base method.
func (m *MockClient) GetLatestAppPoliciesConfig(ctx context.Context, appID string) (*models.AppAppPoliciesConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAppPoliciesConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppPoliciesConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAppPoliciesConfig indicates an expected call of GetLatestAppPoliciesConfig.
func (mr *MockClientMockRecorder) GetLatestAppPoliciesConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAppPoliciesConfig", reflect.TypeOf((*MockClient)(nil).GetLatestAppPoliciesConfig), ctx, appID)
}

// GetLatestAppSecretsConfig mocks base method.
func (m *MockClient) GetLatestAppSecretsConfig(ctx context.Context, appID string) (*models.AppAppSecretsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAppSecretsConfig", ctx, appID)
	ret0, _ := ret[0].(*models.AppAppSecretsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAppSecretsConfig indicates an expected call of GetLatestAppSecretsConfig.
func (mr *MockClientMockRecorder) GetLatestAppSecretsConfig(ctx, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAppSecretsConfig", reflect.TypeOf((*MockClient)(nil).GetLatestAppSecretsConfig), ctx, appID)
}

// GetOrg mocks base method.
func (m *MockClient) GetOrg(ctx context.Context) (*models.AppOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg", ctx)
	ret0, _ := ret[0].(*models.AppOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockClientMockRecorder) GetOrg(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockClient)(nil).GetOrg), ctx)
}

// GetOrgInvites mocks base method.
func (m *MockClient) GetOrgInvites(ctx context.Context, query *models.GetOrgInvitesQuery) ([]*models.AppOrgInvite, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgInvites", ctx, query)
	ret0, _ := ret[0].([]*models.AppOrgInvite)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgInvites indicates an expected call of GetOrgInvites.
func (mr *MockClientMockRecorder) GetOrgInvites(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgInvites", reflect.TypeOf((*MockClient)(nil).GetOrgInvites), ctx, query)
}

// GetOrgs mocks base method.
func (m *MockClient) GetOrgs(ctx context.Context, query *models.GetOrgsQuery) ([]*models.AppOrg, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgs", ctx, query)
	ret0, _ := ret[0].([]*models.AppOrg)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrgs indicates an expected call of GetOrgs.
func (mr *MockClientMockRecorder) GetOrgs(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgs", reflect.TypeOf((*MockClient)(nil).GetOrgs), ctx, query)
}

// GetRelease mocks base method.
func (m *MockClient) GetRelease(ctx context.Context, releaseID string) (*models.AppComponentRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", ctx, releaseID)
	ret0, _ := ret[0].(*models.AppComponentRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockClientMockRecorder) GetRelease(ctx, releaseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockClient)(nil).GetRelease), ctx, releaseID)
}

// GetReleaseSteps mocks base method.
func (m *MockClient) GetReleaseSteps(ctx context.Context, releaseID string, query *models.GetReleaseStepsQuery) ([]*models.AppComponentReleaseStep, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseSteps", ctx, releaseID, query)
	ret0, _ := ret[0].([]*models.AppComponentReleaseStep)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseSteps indicates an expected call of GetReleaseSteps.
func (mr *MockClientMockRecorder) GetReleaseSteps(ctx, releaseID, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseSteps", reflect.TypeOf((*MockClient)(nil).GetReleaseSteps), ctx, releaseID, query)
}

// GetVCSConnection mocks base method.
func (m *MockClient) GetVCSConnection(ctx context.Context, connID string) (*models.AppVCSConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVCSConnection", ctx, connID)
	ret0, _ := ret[0].(*models.AppVCSConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVCSConnection indicates an expected call of GetVCSConnection.
func (mr *MockClientMockRecorder) GetVCSConnection(ctx, connID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCSConnection", reflect.TypeOf((*MockClient)(nil).GetVCSConnection), ctx, connID)
}

// GetVCSConnections mocks base method.
func (m *MockClient) GetVCSConnections(ctx context.Context, query *models.GetVCSConnectionsQuery) ([]*models.AppVCSConnection, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVCSConnections", ctx, query)
	ret0, _ := ret[0].([]*models.AppVCSConnection)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVCSConnections indicates an expected call of GetVCSConnections.
func (mr *MockClientMockRecorder) GetVCSConnections(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVCSConnections", reflect.TypeOf((*MockClient)(nil).GetVCSConnections), ctx, query)
}

// RenderInstaller mocks base method.
func (m *MockClient) RenderInstaller(ctx context.Context, installerID string) (*models.ServiceRenderedInstaller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderInstaller", ctx, installerID)
	ret0, _ := ret[0].(*models.ServiceRenderedInstaller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderInstaller indicates an expected call of RenderInstaller.
func (mr *MockClientMockRecorder) RenderInstaller(ctx, installerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderInstaller", reflect.TypeOf((*MockClient)(nil).RenderInstaller), ctx, installerID)
}

// ReprovisionInstall mocks base method.
func (m *MockClient) ReprovisionInstall(ctx context.Context, installID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReprovisionInstall", ctx, installID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReprovisionInstall indicates an expected call of ReprovisionInstall.
func (mr *MockClientMockRecorder) ReprovisionInstall(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReprovisionInstall", reflect.TypeOf((*MockClient)(nil).ReprovisionInstall), ctx, installID)
}

// SetOrgID mocks base method.
func (m *MockClient) SetOrgID(orgID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOrgID", orgID)
}

// SetOrgID indicates an expected call of SetOrgID.
func (mr *MockClientMockRecorder) SetOrgID(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrgID", reflect.TypeOf((*MockClient)(nil).SetOrgID), orgID)
}

// TeardownInstallComponent mocks base method.
func (m *MockClient) TeardownInstallComponent(ctx context.Context, installID, componentID string) (*models.AppInstallDeploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownInstallComponent", ctx, installID, componentID)
	ret0, _ := ret[0].(*models.AppInstallDeploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TeardownInstallComponent indicates an expected call of TeardownInstallComponent.
func (mr *MockClientMockRecorder) TeardownInstallComponent(ctx, installID, componentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownInstallComponent", reflect.TypeOf((*MockClient)(nil).TeardownInstallComponent), ctx, installID, componentID)
}

// TeardownInstallComponents mocks base method.
func (m *MockClient) TeardownInstallComponents(ctx context.Context, installID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TeardownInstallComponents", ctx, installID)
	ret0, _ := ret[0].(error)
	return ret0
}

// TeardownInstallComponents indicates an expected call of TeardownInstallComponents.
func (mr *MockClientMockRecorder) TeardownInstallComponents(ctx, installID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TeardownInstallComponents", reflect.TypeOf((*MockClient)(nil).TeardownInstallComponents), ctx, installID)
}

// UpdateActionWorkflow mocks base method.
func (m *MockClient) UpdateActionWorkflow(ctx context.Context, actionWorkflowID string, req *models.ServiceUpdateActionWorkflowRequest) (*models.AppActionWorkflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActionWorkflow", ctx, actionWorkflowID, req)
	ret0, _ := ret[0].(*models.AppActionWorkflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActionWorkflow indicates an expected call of UpdateActionWorkflow.
func (mr *MockClientMockRecorder) UpdateActionWorkflow(ctx, actionWorkflowID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActionWorkflow", reflect.TypeOf((*MockClient)(nil).UpdateActionWorkflow), ctx, actionWorkflowID, req)
}

// UpdateApp mocks base method.
func (m *MockClient) UpdateApp(ctx context.Context, appID string, req *models.ServiceUpdateAppRequest) (*models.AppApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", ctx, appID, req)
	ret0, _ := ret[0].(*models.AppApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockClientMockRecorder) UpdateApp(ctx, appID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockClient)(nil).UpdateApp), ctx, appID, req)
}

// UpdateAppConfig mocks base method.
func (m *MockClient) UpdateAppConfig(ctx context.Context, appID, appConfigID string, req *models.ServiceUpdateAppConfigRequest) (*models.AppAppConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppConfig", ctx, appID, appConfigID, req)
	ret0, _ := ret[0].(*models.AppAppConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppConfig indicates an expected call of UpdateAppConfig.
func (mr *MockClientMockRecorder) UpdateAppConfig(ctx, appID, appConfigID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppConfig", reflect.TypeOf((*MockClient)(nil).UpdateAppConfig), ctx, appID, appConfigID, req)
}

// UpdateComponent mocks base method.
func (m *MockClient) UpdateComponent(ctx context.Context, componentID string, req *models.ServiceUpdateComponentRequest) (*models.AppComponent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponent", ctx, componentID, req)
	ret0, _ := ret[0].(*models.AppComponent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComponent indicates an expected call of UpdateComponent.
func (mr *MockClientMockRecorder) UpdateComponent(ctx, componentID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponent", reflect.TypeOf((*MockClient)(nil).UpdateComponent), ctx, componentID, req)
}

// UpdateInstall mocks base method.
func (m *MockClient) UpdateInstall(ctx context.Context, installID string, req *models.ServiceUpdateInstallRequest) (*models.AppInstall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstall", ctx, installID, req)
	ret0, _ := ret[0].(*models.AppInstall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstall indicates an expected call of UpdateInstall.
func (mr *MockClientMockRecorder) UpdateInstall(ctx, installID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstall", reflect.TypeOf((*MockClient)(nil).UpdateInstall), ctx, installID, req)
}

// UpdateInstallInputs mocks base method.
func (m *MockClient) UpdateInstallInputs(ctx context.Context, installID string, req *models.ServiceUpdateInstallInputsRequest) (*models.AppInstallInputs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstallInputs", ctx, installID, req)
	ret0, _ := ret[0].(*models.AppInstallInputs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstallInputs indicates an expected call of UpdateInstallInputs.
func (mr *MockClientMockRecorder) UpdateInstallInputs(ctx, installID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstallInputs", reflect.TypeOf((*MockClient)(nil).UpdateInstallInputs), ctx, installID, req)
}

// UpdateInstaller mocks base method.
func (m *MockClient) UpdateInstaller(ctx context.Context, installerID string, req *models.ServiceUpdateInstallerRequest) (*models.AppInstaller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstaller", ctx, installerID, req)
	ret0, _ := ret[0].(*models.AppInstaller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstaller indicates an expected call of UpdateInstaller.
func (mr *MockClientMockRecorder) UpdateInstaller(ctx, installerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstaller", reflect.TypeOf((*MockClient)(nil).UpdateInstaller), ctx, installerID, req)
}

// UpdateOrg mocks base method.
func (m *MockClient) UpdateOrg(ctx context.Context, req *models.ServiceUpdateOrgRequest) (*models.AppOrg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrg", ctx, req)
	ret0, _ := ret[0].(*models.AppOrg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrg indicates an expected call of UpdateOrg.
func (mr *MockClientMockRecorder) UpdateOrg(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrg", reflect.TypeOf((*MockClient)(nil).UpdateOrg), ctx, req)
}
